
#ifndef __LCIF_INTERFACE_H__
#define __LCIF_INTERFACE_H__


#ifdef __LCIF_C__
#define LCIF_EXTERN
#else
#define LCIF_EXTERN	extern
#endif


#define LCIF_MAX_FRAME_SIZE		240

//
// LCIF Protocol Definition
//

#define LCIFMSG_MAJOR_VERSION			0x01
#define LCIFMSG_MINOR_VERSION			0x06

#define LCIFMSG_PROTOCOL_SIMPLE			0x04

#define LCIFMSG_SIMPLE_GROUP_BTAA		0xA4

#define LCIFMSG_REGISTER_REQ			0x00
#define LCIFMSG_REGISTER_RESP			0x01
#define LCIFMSG_DEREGISTER_REQ			0x80
#define LCIFMSG_DEREGISTER_RESP			0x81
#define LCIFMSG_SET_ACCESSORY_CONF_REQ	0x02
#define LCIFMSG_SET_ACCESSORY_CONF_RESP	0x03
#define LCIFMSG_GET_ACCESSORY_CONF_REQ	0x04
#define LCIFMSG_GET_ACCESSORY_CONF_RESP	0x05
#define LCIFMSG_SET_TERMINAL_CONF_REQ	0x06
#define LCIFMSG_SET_TERMINAL_CONF_RESP	0x07
#define LCIFMSG_GET_TERMINAL_CONF_REQ	0x08
#define LCIFMSG_GET_TERMINAL_CONF_RESP	0x09
#define LCIFMSG_SUBSCRIBE_REQ			0x0A
#define LCIFMSG_SUBSCRIBE_RESP			0x0B
#define LCIFMSG_UNSUBSCRIBE_REQ			0x0C
#define LCIFMSG_UNSUBSCRIBE_RESP		0x0D
#define LCIFMSG_EVENT_REQ				0x0E
#define LCIFMSG_EVENT_RESP				0x0F

#define LCIFMSG_STATUS					0x00
#define LCIFMSG_CAUSE					0x0B
#define LCIFMSG_VALUE_TEXT				0x01
#define LCIFMSG_VALUE_TEXT_UTF8			0x02
#define LCIFMSG_VALUE_INTEGER8			0x03
#define LCIFMSG_VALUE_INTEGER16			0x04
#define LCIFMSG_VALUE_INTEGER32			0x05
#define LCIFMSG_VALUE_INTEGER64			0x06
#define LCIFMSG_VALUE_FLOAT				0x07
#define LCIFMSG_VALUE_INTEGER_ARRAY		0x08
#define LCIFMSG_PART					0x09
#define LCIFMSG_SETTING_ID_ARRAY		0x0A
#define LCIFMSG_EVENT_ACTION_ID			0x10
#define LCIFMSG_EVENT_MYOWNKEY_DATA		0x0D
#define LCIFMSG_EVENT_HORIZSLIDER_DATA	0x0F
#define LCIFMSG_EVENT_VERTSLIDER_DATA	0x0E

#define LCIF_SUBSCRIBED_BAT_LEVEL		0x01
#define LCIF_SUBSCRIBED_CHG_IND			0x02

enum
{
	LCIFMSG_FAIL	= 0x00,
	LCIFMSG_OK		= 0x01
};

enum
{
	LCIFMSG_PART_NOT_LAST	= 0x00,
	LCIFMSG_PART_LAST		= 0x01
};

enum
{
	LCIFMSG_MYOWNKEY_SHORT_PRESS	= 0x01,
	LCIFMSG_MYOWNKEY_LONG_PRESS		= 0x02,
	LCIFMSG_MYOWNKEY_DOUBLE_PRESS	= 0x03
};

enum
{
	LCIFMSG_VERTSLIDER_UP_TO_DOWN_MOVE	= 0x01,
	LCIFMSG_VERTSLIDER_DOWN_TO_UP_MOVE	= 0x02
};

enum
{
	LCIFMSG_HORIZSLIDER_LEFT_TO_RIGHT_MOVE	= 0x01,
	LCIFMSG_HORIZSLIDER_RIGHT_TO_LEFT_MOVE	= 0x02
};

enum
{
	LCIFMSG_ACTION_TYPE_ENTER_PAIRING					= 0x01,
	LCIFMSG_ACTION_TYPE_CALL_TO_NUMBER					= 0x20,
	LCIFMSG_ACTION_TYPE_SPEAK_TIME						= 0x21,
	LCIFMSG_ACTION_TYPE_SPEAK_TIME_WITH_SEC				= 0x22,
	LCIFMSG_ACTION_TYPE_CAMERA_SHUTTER					= 0x23,
	LCIFMSG_ACTION_TYPE_SPEAK_UNREAD_MSG				= 0x24,
	LCIFMSG_ACTION_TYPE_MUTE_UNMUTE_MIC					= 0x25,
	LCIFMSG_ACTION_TYPE_SOFT_REJECT						= 0x26,
	LCIFMSG_ACTION_TYPE_SAY_AND_PLAY					= 0x27,
	LCIFMSG_ACTION_TYPE_SPEAK_CALENDAR_EVENT			= 0x28,
	LCIFMSG_ACTION_TYPE_SPEAK_NEW_MSG					= 0x29,
	LCIFMSG_ACTION_TYPE_LAUNCH_MUSIC_PLAYER				= 0x2A,
	LCIFMSG_ACTION_TYPE_LAUNCH_MAPS_APPLICATION			= 0x2B,
	LCIFMSG_ACTION_TYPE_STATUS_UPDATE_FB_CURRENT_SONG	= 0x2C,
	LCIFMSG_ACTION_TYPE_FIND_PHONE						= 0x2D,
	LCIFMSG_ACTION_TYPE_ACTIVATE_VOICE_UI				= 0x2E
};

enum
{
	LCIFMSG_ID_TYPE_BATTERY_LEVEL				= 0x64,
	LCIFMSG_ID_TYPE_CHG_IND						= 0x65,
	LCIFMSG_ID_TYPE_SIG_STRENGTH				= 0x66,
	LCIFMSG_ID_TYPE_SOUND_PRESURE				= 0x67,
	LCIFMSG_ID_TYPE_SW_VER						= 0x68,
	LCIFMSG_ID_TYPE_HW_VER						= 0x69,
	LCIFMSG_ID_TYPE_HS_MODEL					= 0x6A,
	LCIFMSG_ID_TYPE_MULTICONN_STATUS			= 0x6B,
	LCIFMSG_ID_TYPE_NR_OF_CONNECTED_SPEAKERS	= 0x6C,
	LCIFMSG_ID_TYPE_BT_NAME						= 0x6D,
	LCIFMSG_ID_TYPE_LED_ON_OFF					= 0x6E,
	LCIFMSG_ID_TYPE_MULTI_CONNECTION_ON_OFF		= 0x6F,
	LCIFMSG_ID_TYPE_REDIAL_ON_OFF				= 0x70,
	LCIFMSG_ID_TYPE_VOICE_DIAL_ON_OFF			= 0x71,
	LCIFMSG_ID_TYPE_VOICE_PROMPTS_ON_OFF		= 0x72,
	LCIFMSG_ID_TYPE_VOICE_VOICE_UI_ON_OFF		= 0x73,
	LCIFMSG_ID_TYPE_ACCESSORY_LANGUAGE			= 0x74,
	LCIFMSG_ID_TYPE_TERMINAL_LANGUAGE			= 0x75,
	LCIFMSG_ID_TYPE_INIT_SPEECH_VOL				= 0x76,
	LCIFMSG_ID_TYPE_MUTE_SYNCH					= 0x77,
	LCIFMSG_ID_TYPE_REST_FACT_SETTINGS			= 0x78,
	LCIFMSG_ID_TYPE_SELECT_VOCE_PROMPTS			= 0x79,
	LCIFMSG_ID_TYPE_EQUALIZER					= 0x7A,
	LCIFMSG_ID_TYPE_TONES_ON_OFF				= 0x7B,
	LCIFMSG_ID_TYPE_TALK_TIME					= 0x7C,
	LCIFMSG_ID_TYPE_PLAYBACK_TIME				= 0x7D,
	LCIFMSG_ID_TYPE_STANDBY_TIME				= 0x7E,
	LCIFMSG_ID_TYPE_CHARGING_TIME				= 0x7F,
	LCIFMSG_ID_TYPE_EQ_BASS						= 0x80,
	LCIFMSG_ID_TYPE_EQ_TREBLE					= 0x81,
	LCIFMSG_ID_TYPE_TURN_ON_OFF					= 0x82,
	LCIFMSG_ID_TYPE_SW_VARIANT					= 0x83
};

enum
{
	LCIFMSG_OFF	= 0x00,
	LCIFMSG_ON	= 0x01
};

enum
{
	LCIFMSG_FALSE	= 0x00,
	LCIFMSG_TRUE	= 0x01
};

enum
{
	LCIFMSG_LANG_UNKNOWN,
	LCIFMSG_LANG_ENGLISH,
	LCIFMSG_LANG_GERMAN,
	LCIFMSG_LANG_FRENCH,
	LCIFMSG_LANG_ITALIN,
	LCIFMSG_LANG_SPANISH,
	LCIFMSG_LANG_PORTUGUESE,
	LCIFMSG_LANG_DUTCH,
	LCIFMSG_LANG_DANISH,
	LCIFMSG_LANG_SWEDISH,
	LCIFMSG_LANG_FINNISH,
	LCIFMSG_LANG_GREEK,
	LCIFMSG_LANG_HUNGARY,
	LCIFMSG_LANG_TURKISH,
	LCIFMSG_LANG_NORWAY,
	LCIFMSG_LANG_RUSSIA,
	LCIFMSG_LANG_ARABIC,
	LCIFMSG_LANG_BAHASA_IND,
	LCIFMSG_LANG_BAHASA_MAL,
	LCIFMSG_LANG_BULGARIAN,
	LCIFMSG_LANG_CROATIAN,
	LCIFMSG_LANG_CZECH,
	LCIFMSG_LANG_CHINESE_S,
	LCIFMSG_LANG_CHINESE_T,
	LCIFMSG_LANG_ESTONIAN,
	LCIFMSG_LANG_HEBREW,
	LCIFMSG_LANG_LATVIAN,
	LCIFMSG_LANG_LITHUANIAN,
	LCIFMSG_LANG_POLISH,
	LCIFMSG_LANG_ROMANIAN,
	LCIFMSG_LANG_SERBIAN,
	LCIFMSG_LANG_SLOVAKIA,
	LCIFMSG_LANG_SLOVENIA,
	LCIFMSG_LANG_THAI,
	LCIFMSG_LANG_VIETNAMESE,
	LCIFMSG_LANG_AMER_ENGLISH,
	LCIFMSG_LANG_AMER_SPAN,
	LCIFMSG_LANG_BRAZ_PORT,
	LCIFMSG_LANG_CAN_FRENCH,
	LCIFMSG_LANG_JAPANESE,
	LCIFMSG_LANG_FARSI,
	LCIFMSG_LANG_UKRAINIAN,
	LCIFMSG_LANG_ICELANDIC,
	LCIFMSG_LANG_HINDI,
	LCIFMSG_LANG_TAGALOG,
	LCIFMSG_LANG_AFRIKAANS,
	LCIFMSG_LANG_SESOTHO,
	LCIFMSG_LANG_SWAHILI,
	LCIFMSG_LANG_XHOSA,
	LCIFMSG_LANG_ZULU,
	LCIFMSG_LANG_URDU,
	LCIFMSG_LANG_CHINESE_UK,
	LCIFMSG_LANG_MACEDONIAN,
	LCIFMSG_LANG_BENGALI,
	LCIFMSG_LANG_GUJARATI,
	LCIFMSG_LANG_KANNADA,
	LCIFMSG_LANG_MALAYALAM,
	LCIFMSG_LANG_MARATHI,
	LCIFMSG_LANG_PUNJABI,
	LCIFMSG_LANG_SINHALESE,
	LCIFMSG_LANG_TAMIL,
	LCIFMSG_LANG_TELUGU,
	LCIFMSG_LANG_ALBANIAN,
	LCIFMSG_LANG_AMHARIC,
	LCIFMSG_LANG_ARMENIAN,
	LCIFMSG_LANG_AUSTRALIAN_ENGLISH,
	LCIFMSG_LANG_AUSTRIAN_GERMAN,
	LCIFMSG_LANG_AZERBAIJANI,
	LCIFMSG_LANG_BELARUSSIAN,
	LCIFMSG_LANG_BELGIAN_FLEMISH,
	LCIFMSG_LANG_BELGIAN_FRENCH,
	LCIFMSG_LANG_BURMESE,
	LCIFMSG_LANG_CANDIAN_ENGLISH,
	LCIFMSG_LANG_CATALAN,
	LCIFMSG_LANG_CYPRUS_GREEK,
	LCIFMSG_LANG_CYPRUS_TURKISH,
	LCIFMSG_LANG_FINLAND_SWEDISH,
	LCIFMSG_LANG_GAELIC,
	LCIFMSG_LANG_GEORGIAN,
	LCIFMSG_LANG_INTERNATIONAL_ENGLISH,
	LCIFMSG_LANG_INTERNATIONAL_FRENCH,
	LCIFMSG_LANG_INTERNATIONAL_SPANISH,
	LCIFMSG_LANG_IRISH,
	LCIFMSG_LANG_KAZAKH,
	LCIFMSG_LANG_KHMER,
	LCIFMSG_LANG_KOREAN,
	LCIFMSG_LANG_LAO,
	LCIFMSG_LANG_MOLDOVIAN,
	LCIFMSG_LANG_MONGOLIAN,
	LCIFMSG_LANG_NEW_ZEALAND_ENGLISH,
	LCIFMSG_LANG_NORWEGIAN_NYNORSK,
	LCIFMSG_LANG_SOMALI,
	LCIFMSG_LANG_SOUTH_AFRICAN_ENGLISH,
	LCIFMSG_LANG_SWISS_FRENCH,
	LCIFMSG_LANG_SWISS_GERMAN,
	LCIFMSG_LANG_SWISS_ITALIAN,
	LCIFMSG_LANG_TAIWANESE_CHINESE,
	LCIFMSG_LANG_TAJIK,
	LCIFMSG_LANG_TIBETAN,
	LCIFMSG_LANG_TIGRINYA,
	LCIFMSG_LANG_TURKMEN,
	LCIFMSG_LANG_UZBEK,
	LCIFMSG_LANG_WELSH
};

enum
{
	LCIFMSG_EQUALIZER_UNKNOWN,
	LCIFMSG_EQUALIZER_DISCO,
	LCIFMSG_EQUALIZER_HALL,
	LCIFMSG_EQUALIZER_HEAVY,
	LCIFMSG_EQUALIZER_CLASSICAL,
	LCIFMSG_EQUALIZER_DANCE,
	LCIFMSG_EQUALIZER_JAZZ,
	LCIFMSG_EQUALIZER_POP,
	LCIFMSG_EQUALIZER_ROCK,
	LCIFMSG_EQUALIZER_SOFT,
	LCIFMSG_EQUALIZER_FLAT
};

typedef struct
{
	U8	protocol;
	U8	data_start;
	U16	length;
	U8	version_major, version_minor;
	U8	msg_grp, msg_id;
	U8	conn_id, trans_id;
	U16	sb_count;
} LCIFMSG_HEADER;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U8	status;
	U8	fill1[3];
} LCIFMSG_STATUS_SB;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U16	cause;
	U16	fill1;
} LCIFMSG_CAUSE_SB;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U16	setting_id;
	U8	fill1[2];
} LCIFMSG_VALUE_SB;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U16	setting_id;
	U16	text_len;
} LCIFMSG_VALUE_TEXT_SB;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U16	setting_id;
	U16	text_len;
} LCIFMSG_VALUE_TEXT_UTF8_SB;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U16	setting_id;
	U8	fill1;
	U8	value;
} LCIFMSG_VALUE_INTEGER8_SB;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U16	setting_id;
	U16	value;
} LCIFMSG_VALUE_INTEGER16_SB;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U16	setting_id;
	U16	fill1;
	U32	value;
} LCIFMSG_VALUE_INTEGER32_SB;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U16	setting_id;
	U16	fill1;
	U32	value_hi32;	//msb
	U32	value_lo32;	//lsb
} LCIFMSG_VALUE_INTEGER64_SB;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U16	setting_id;
	U16	fill1;
	U32	value;	//IEEE754 single precision
} LCIFMSG_VALUE_FLOAT_SB;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U16	setting_id;
	U16	value_length;
	//U32	value[1];
} LCIFMSG_VALUE_INTEGER_ARRAY_SB;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U16	part_number;
	U8	part_indicator;
	U8	fill1;
} LCIFMSG_PART_SB;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U16	id_count;
	U16	id_value[1];
} LCIFMSG_SETTING_ID_ARRAY_SB;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U8	action_id;
	U8	fill1[3];
} LCIFMSG_EVENT_ACTION_ID_SB;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U8	press_type;
	U8	fill1[3];
} LCIFMSG_EVENT_MYOWNKEY_DATA_SB;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U8	move_type;
	U8	fill1[3];
} LCIFMSG_EVENT_HORIZSLIDER_DATA_SB;

typedef struct
{
	U16 sb_id;
	U16	sb_len;
	U8	move_type;
	U8	fill1[3];
} LCIFMSG_EVENT_VERTSLIDER_DATA_SB;

//
// LCIF Implementation
//

typedef struct
{
	MMI_PROFILE_INFO mmiProfileInfo;
	U8 XDATA_PTR pendingDataPtr;	//waiting for responding buffer available
	OSMQ OSMQ_LCIF_Data_From_RFCOMM;
} LCIF_LINK_INFO;

typedef struct
{
	LCIF_LINK_INFO linkInfo[MAX_MULTI_POINT_NO];
} LCIF_CTL;

//
// LCIF Public Function
//

PUBLIC void LCIF_Init (void);

//
// LCIF Customer Code Interface
//

typedef struct
{
	U8	protocol;
	U8	data_start;
	U16	length;
	U8	version_major, version_minor;
	U8	msg_grp, msg_id;
	U16	setting_id;
	U16	sb_count;
} LCIFMSG_AIROHA_HEADER;

PUBLIC void LCIF_SendTerminalConfReq(U8 linkIndex, U8 msg_id, U16 setting_id);

#define LCIFMSG_ID_AIROHA_LINK_CONNECT		0x01
#define LCIFMSG_ID_AIROHA_LINK_DISCONNECT	0x02

#endif //__LCIF_INTERFACE_H__
