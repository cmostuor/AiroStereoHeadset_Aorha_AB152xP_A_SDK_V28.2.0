
#ifndef __VOICE_PROMPT_CTL_H__
#define __VOICE_PROMPT_CTL_H__

#include "os.h"
#include "bt_config_profile.h"

#include "voice_command_ctl.h"

enum
{
#if VOICE_LANG_CHI
	LANG_CHI,
#endif
#if VOICE_LANG_ENG
	LANG_ENG,
#endif
	LANG_COUNT
};

#if VOICE_LANG_CHI
	#define VOICE_LANG_DEFAULT	LANG_CHI
#elif VOICE_LANG_ENG
	#define VOICE_LANG_DEFAULT	LANG_ENG
#else
	#error "VOICE_LANG_DEFAULT not defined !!!"
#endif



typedef union
{
	U32 vp_ptr;
	U8 play_type;
} VoicePromptOffset;

typedef struct
{
	U8 databaseLanguage[3];
}DRIVER_VOICE_COMMAND_LANGUAGE_INFO;

typedef struct
{
	VoicePromptOffset vpScriptOffsetTbl;
	VoicePromptOffset vpScriptDataTbl;
	VoicePromptOffset vpDataOffsetTbl;
	U16 vpScriptOffsetEntries;
	U16 vpScriptDataEntries;
	U16 vpDataOffsetEntries;
	DRIVER_VOICE_COMMAND_LANGUAGE_INFO vcLanguage;
	U32 reserve1;
	U32 reserve2;
} VoiceLangCtl;

extern VoiceLangCtl CODE gVoiceLangCtl[];


#define VP_SCP_DEF(L, NAME)				vp_scp_##NAME##L
#define VP_SCP_ENUM(L, NAME)			VP_SCP_##NAME##L
#define VP_SCP_DATA(L, NAME)			static U8 CODE VP_SCP_DEF(L, NAME) [] = { VP_SCP_ENUM(L, NAME) };
#define VP_SCP_OFFSET(L, NAME)			VP_SCP_OFFSET_##NAME##L
#define VP_SCP_OFFSET_NEXT(L, NAME)		( VP_SCP_OFFSET(L, NAME) + (sizeof(VP_SCP_DEF(L, NAME)) / sizeof(VP_SCP_DEF(L, NAME)[0])) )
#define VP_SCP_DATA_SIZE(L)				VP_SCP_DATA_SIZE##L

#define VP_DAT_DEF(L, NAME)				vp_dat_##NAME##L
#define VP_DAT_ENUM(L, NAME)			VP_DAT_##NAME##L
#define VP_DAT_DECL(L, NAME)			extern U8 CODE VP_DAT_DEF(L, NAME) [];

#define VPB(N)							0xFF/*VP_DAT_BREAK*/,(U8)((N)>>8),(U8)(N)

#define VP_TBL_DEF(L, NAME)				gVoicePrompt##NAME##L

///////////////////////////////////////////////////////////////////////////
// Script Offset Table
///////////////////////////////////////////////////////////////////////////
#ifdef SUPPORT_VOICE_COMMAND
#define SCRIPT_OFFSET_TABLE(L)																			\
	enum {																								\
		VP_SCP_OFFSET(L, DUMMY) 					= 0,												\
		VP_SCP_OFFSET(L, VOICE_PROMPT_LANG_CHANGE) 	= VP_SCP_OFFSET_NEXT(L, DUMMY),						\
		VP_SCP_OFFSET(L, VOICE_PROMPT_ON) 			= VP_SCP_OFFSET_NEXT(L, VOICE_PROMPT_LANG_CHANGE),	\
		VP_SCP_OFFSET(L, VOICE_PROMPT_OFF) 			= VP_SCP_OFFSET_NEXT(L, VOICE_PROMPT_ON),			\
		VP_SCP_OFFSET(L, MULTI_POINT_MODE_ON) 		= VP_SCP_OFFSET_NEXT(L, VOICE_PROMPT_OFF),			\
		VP_SCP_OFFSET(L, MULTI_POINT_MODE_OFF) 		= VP_SCP_OFFSET_NEXT(L, MULTI_POINT_MODE_ON),		\
		VP_SCP_OFFSET(L, MUTE_ON) 					= VP_SCP_OFFSET_NEXT(L, MULTI_POINT_MODE_OFF),		\
		VP_SCP_OFFSET(L, MUTE_OFF) 					= VP_SCP_OFFSET_NEXT(L, MUTE_ON),					\
		VP_SCP_OFFSET(L, POWER_ON) 					= VP_SCP_OFFSET_NEXT(L, MUTE_OFF),					\
		VP_SCP_OFFSET(L, POWER_OFF) 				= VP_SCP_OFFSET_NEXT(L, POWER_ON),					\
		VP_SCP_OFFSET(L, PAIRING) 					= VP_SCP_OFFSET_NEXT(L, POWER_OFF),					\
		VP_SCP_OFFSET(L, PAIRING_SUCCESSFUL) 		= VP_SCP_OFFSET_NEXT(L, PAIRING),					\
		VP_SCP_OFFSET(L, CONNECTED) 				= VP_SCP_OFFSET_NEXT(L, PAIRING_SUCCESSFUL),		\
		VP_SCP_OFFSET(L, SECOND_DEVICE_CONNECTED)	= VP_SCP_OFFSET_NEXT(L, CONNECTED),					\
		VP_SCP_OFFSET(L, DEVICE_DISCONNECTED) 		= VP_SCP_OFFSET_NEXT(L, SECOND_DEVICE_CONNECTED),	\
		VP_SCP_OFFSET(L, INCOMING_CALL) 			= VP_SCP_OFFSET_NEXT(L, DEVICE_DISCONNECTED),		\
		VP_SCP_OFFSET(L, CALL_REJECTED) 			= VP_SCP_OFFSET_NEXT(L, INCOMING_CALL),				\
		VP_SCP_OFFSET(L, CALL_CANCELLED) 			= VP_SCP_OFFSET_NEXT(L, CALL_REJECTED),				\
		VP_SCP_OFFSET(L, CALL_ENDED) 				= VP_SCP_OFFSET_NEXT(L, CALL_CANCELLED),			\
		VP_SCP_OFFSET(L, RE_DIALING) 				= VP_SCP_OFFSET_NEXT(L, CALL_ENDED),				\
		VP_SCP_OFFSET(L, LOW_BATTERY) 				= VP_SCP_OFFSET_NEXT(L, RE_DIALING),				\
		VP_SCP_OFFSET(L, BATTERY_IS_HIGH) 			= VP_SCP_OFFSET_NEXT(L, LOW_BATTERY),				\
		VP_SCP_OFFSET(L, BATTERY_IS_MEDIAN) 		= VP_SCP_OFFSET_NEXT(L, BATTERY_IS_HIGH),			\
		VP_SCP_OFFSET(L, BATTERY_IS_LOW) 			= VP_SCP_OFFSET_NEXT(L, BATTERY_IS_MEDIAN),			\
		VP_SCP_OFFSET(L, VOLUME_MAXIMUM) 			= VP_SCP_OFFSET_NEXT(L, BATTERY_IS_LOW),			\
		VP_SCP_OFFSET(L, PAUSE) 					= VP_SCP_OFFSET_NEXT(L, VOLUME_MAXIMUM),			\
		VP_SCP_OFFSET(L, LINE_IN_MODE) 				= VP_SCP_OFFSET_NEXT(L, PAUSE),						\
		VP_SCP_OFFSET(L, BLUETOOTH_MODE) 			= VP_SCP_OFFSET_NEXT(L, LINE_IN_MODE),				\
		VP_SCP_OFFSET(L, FM_MODE) 					= VP_SCP_OFFSET_NEXT(L, BLUETOOTH_MODE),			\
		VP_SCP_OFFSET(L, SEEK_UP) 					= VP_SCP_OFFSET_NEXT(L, FM_MODE),					\
		VP_SCP_OFFSET(L, SEEK_DOWN) 				= VP_SCP_OFFSET_NEXT(L, SEEK_UP),					\
		VP_SCP_OFFSET(L, LEFT_CHANNEL) 				= VP_SCP_OFFSET_NEXT(L, SEEK_DOWN),					\
		VP_SCP_OFFSET(L, RIGHT_CHANNEL) 			= VP_SCP_OFFSET_NEXT(L, LEFT_CHANNEL),				\
		VP_SCP_OFFSET(L, WHAT_CAN_I_SAY) 			= VP_SCP_OFFSET_NEXT(L, RIGHT_CHANNEL),				\
		VP_SCP_OFFSET(L, CONNECTION_STATUS) 		= VP_SCP_OFFSET_NEXT(L, WHAT_CAN_I_SAY),			\
		VP_SCP_OFFSET(L, CHECK_BATTERY) 			= VP_SCP_OFFSET_NEXT(L, CONNECTION_STATUS),			\
		VP_SCP_OFFSET(L, CANCEL) 					= VP_SCP_OFFSET_NEXT(L, CHECK_BATTERY),				\
		VP_SCP_OFFSET(L, VOICE_PROMPT_EXAMPLE) 	= VP_SCP_OFFSET_NEXT(L, CANCEL),					\
		VP_SCP_OFFSET(L, TAKE_THE_CALL) 			= VP_SCP_OFFSET_NEXT(L, VOICE_PROMPT_EXAMPLE),		\
		VP_SCP_OFFSET(L, REJECT) 					= VP_SCP_OFFSET_NEXT(L, TAKE_THE_CALL),					\
		VP_SCP_OFFSET(L, REJECT_PHONE_CALL) 		= VP_SCP_OFFSET_NEXT(L, REJECT),					\
		VP_SCP_OFFSET(L, PAIRING_FOR_VC) 			= VP_SCP_OFFSET_NEXT(L, REJECT_PHONE_CALL),			\
		VP_SCP_OFFSET(L, LAST_CALL_OUT) 			= VP_SCP_OFFSET_NEXT(L, PAIRING_FOR_VC),			\
		VP_SCP_OFFSET(L, VOICE_DIAL_FOR_VC) 		= VP_SCP_OFFSET_NEXT(L, LAST_CALL_OUT),				\
		VP_SCP_OFFSET(L, VOICE_COMMAND_EXAMPE_SET0) = VP_SCP_OFFSET_NEXT(L, VOICE_DIAL_FOR_VC),			\
		VP_SCP_OFFSET(L, VOICE_COMMAND_EXAMPE_SET1) = VP_SCP_OFFSET_NEXT(L, VOICE_COMMAND_EXAMPE_SET0), 		\
		VP_SCP_OFFSET(L, VOICE_COMMAND_EXAMPE_SET2) = VP_SCP_OFFSET_NEXT(L, VOICE_COMMAND_EXAMPE_SET1), 		\
		VP_SCP_OFFSET(L, MAKE_A_CALL) 				= VP_SCP_OFFSET_NEXT(L, VOICE_COMMAND_EXAMPE_SET2), 		\
		VP_SCP_OFFSET(L, CHECK_STATUS) 				= VP_SCP_OFFSET_NEXT(L, MAKE_A_CALL), 						\
		VP_SCP_OFFSET(L, RING_BACK) 				= VP_SCP_OFFSET_NEXT(L, CHECK_STATUS), 						\
		VP_SCP_OFFSET(L, BEEP) 						= VP_SCP_OFFSET_NEXT(L, RING_BACK), 						\
		VP_SCP_OFFSET(L, INCOMING_CALL_ENDED) 		= VP_SCP_OFFSET_NEXT(L, BEEP), 						\
		VP_SCP_DATA_SIZE(L)							= VP_SCP_OFFSET_NEXT(L, INCOMING_CALL_ENDED)						\
	};
#else
	
#define SCRIPT_OFFSET_TABLE(L)																			\
	enum {																								\
		VP_SCP_OFFSET(L, DUMMY) 					= 0,												\
		VP_SCP_OFFSET(L, VOICE_PROMPT_LANG_CHANGE) 	= VP_SCP_OFFSET_NEXT(L, DUMMY),						\
		VP_SCP_OFFSET(L, VOICE_PROMPT_ON) 			= VP_SCP_OFFSET_NEXT(L, VOICE_PROMPT_LANG_CHANGE),	\
		VP_SCP_OFFSET(L, VOICE_PROMPT_OFF) 			= VP_SCP_OFFSET_NEXT(L, VOICE_PROMPT_ON),			\
		VP_SCP_OFFSET(L, MULTI_POINT_MODE_ON) 		= VP_SCP_OFFSET_NEXT(L, VOICE_PROMPT_OFF),			\
		VP_SCP_OFFSET(L, MULTI_POINT_MODE_OFF) 		= VP_SCP_OFFSET_NEXT(L, MULTI_POINT_MODE_ON),		\
		VP_SCP_OFFSET(L, MUTE_ON) 					= VP_SCP_OFFSET_NEXT(L, MULTI_POINT_MODE_OFF),		\
		VP_SCP_OFFSET(L, MUTE_OFF) 					= VP_SCP_OFFSET_NEXT(L, MUTE_ON),					\
		VP_SCP_OFFSET(L, POWER_ON) 					= VP_SCP_OFFSET_NEXT(L, MUTE_OFF),					\
		VP_SCP_OFFSET(L, POWER_OFF) 				= VP_SCP_OFFSET_NEXT(L, POWER_ON),					\
		VP_SCP_OFFSET(L, PAIRING) 					= VP_SCP_OFFSET_NEXT(L, POWER_OFF),					\
		VP_SCP_OFFSET(L, PAIRING_SUCCESSFUL) 		= VP_SCP_OFFSET_NEXT(L, PAIRING),					\
		VP_SCP_OFFSET(L, CONNECTED) 				= VP_SCP_OFFSET_NEXT(L, PAIRING_SUCCESSFUL),		\
		VP_SCP_OFFSET(L, SECOND_DEVICE_CONNECTED)	= VP_SCP_OFFSET_NEXT(L, CONNECTED),					\
		VP_SCP_OFFSET(L, DEVICE_DISCONNECTED) 		= VP_SCP_OFFSET_NEXT(L, SECOND_DEVICE_CONNECTED),	\
		VP_SCP_OFFSET(L, INCOMING_CALL) 			= VP_SCP_OFFSET_NEXT(L, DEVICE_DISCONNECTED),		\
		VP_SCP_OFFSET(L, CALL_REJECTED) 			= VP_SCP_OFFSET_NEXT(L, INCOMING_CALL),				\
		VP_SCP_OFFSET(L, CALL_CANCELLED) 			= VP_SCP_OFFSET_NEXT(L, CALL_REJECTED),				\
		VP_SCP_OFFSET(L, CALL_ENDED) 				= VP_SCP_OFFSET_NEXT(L, CALL_CANCELLED),			\
		VP_SCP_OFFSET(L, RE_DIALING) 				= VP_SCP_OFFSET_NEXT(L, CALL_ENDED),				\
		VP_SCP_OFFSET(L, LOW_BATTERY) 				= VP_SCP_OFFSET_NEXT(L, RE_DIALING),				\
		VP_SCP_OFFSET(L, BATTERY_IS_HIGH) 			= VP_SCP_OFFSET_NEXT(L, LOW_BATTERY),				\
		VP_SCP_OFFSET(L, BATTERY_IS_MEDIAN) 		= VP_SCP_OFFSET_NEXT(L, BATTERY_IS_HIGH),			\
		VP_SCP_OFFSET(L, BATTERY_IS_LOW) 			= VP_SCP_OFFSET_NEXT(L, BATTERY_IS_MEDIAN),			\
		VP_SCP_OFFSET(L, VOLUME_MAXIMUM) 			= VP_SCP_OFFSET_NEXT(L, BATTERY_IS_LOW),			\
		VP_SCP_OFFSET(L, PAUSE) 					= VP_SCP_OFFSET_NEXT(L, VOLUME_MAXIMUM),			\
		VP_SCP_OFFSET(L, LINE_IN_MODE) 				= VP_SCP_OFFSET_NEXT(L, PAUSE),						\
		VP_SCP_OFFSET(L, BLUETOOTH_MODE) 			= VP_SCP_OFFSET_NEXT(L, LINE_IN_MODE),				\
		VP_SCP_OFFSET(L, FM_MODE) 					= VP_SCP_OFFSET_NEXT(L, BLUETOOTH_MODE),			\
		VP_SCP_OFFSET(L, SEEK_UP) 					= VP_SCP_OFFSET_NEXT(L, FM_MODE),					\
		VP_SCP_OFFSET(L, SEEK_DOWN) 				= VP_SCP_OFFSET_NEXT(L, SEEK_UP),					\
		VP_SCP_OFFSET(L, LEFT_CHANNEL) 				= VP_SCP_OFFSET_NEXT(L, SEEK_DOWN),					\
		VP_SCP_OFFSET(L, RIGHT_CHANNEL) 			= VP_SCP_OFFSET_NEXT(L, LEFT_CHANNEL),				\
		VP_SCP_OFFSET(L, INCOMING_CALL_ENDED) 		= VP_SCP_OFFSET_NEXT(L, RIGHT_CHANNEL),				\
		VP_SCP_DATA_SIZE(L)						= VP_SCP_OFFSET_NEXT(L, INCOMING_CALL_ENDED)				\	
	};	
#endif //SUPPORT_VOICE_COMMAND

#endif //__VOICE_PROMPT_CTL_H__
