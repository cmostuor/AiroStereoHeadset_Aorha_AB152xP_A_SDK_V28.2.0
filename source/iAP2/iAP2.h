
#ifndef __IAP2_H__
#define __IAP2_H__

#include "iAP2_interface.h"
#include "..\MMI\MMI_interface.h"

#define IAP2_PACKET_START			0xFF5A

// packet control byte
#define IAP2_PKT_SYNC				0x80
#define IAP2_PKT_ACK				0x40
#define IAP2_PKT_EACK				0x20
#define IAP2_PKT_RST				0x10
#define IAP2_PKT_SLP				0x08

// session identifier
#define IAP2_SESSION_ID_LINK		0

typedef struct
{
	U16 packet_start;
	U16 packet_pength;
	U8 control_byte;
	U8 seq_number;
	U8 ack_number;
	U8 session_identifier;
	U8 header_checksum;
} IAP2PktHeader;

/* IAP2 Control Session */
#define IAP2_CTRL_MESSAGE_START								0x4040

#define IAP2_CTRL_REQUEST_AUTHENTICATION_CERTIFICATE		0xAA00
#define IAP2_CTRL_AUTHENTICATION_CERTIFICATE				0xAA01
#define IAP2_CTRL_REQUEST_AUTHENTICATION_CHALLENGE_RESPONSE	0xAA02
#define IAP2_CTRL_AUTHENTICATION_RESPONSE					0xAA03
#define IAP2_CTRL_AUTHENTICATION_FAILED						0xAA04
#define IAP2_CTRL_AUTHENTICATION_SUCCEEDED					0xAA05

#define IAP2_PARAM_AUTHENTICATION_CERTIFICATE				0
#define IAP2_PARAM_AUTHENTICATION_CHALLENGE					0
#define IAP2_PARAM_AUTHENTICATION_RESPONSE					0

#define IAP2_CTRL_START_IDENTIFICATION						0x1D00
#define IAP2_CTRL_IDENTIFICATION_INFORMATION				0x1D01
#define IAP2_CTRL_IDENTIFICATION_ACCEPTED					0x1D02
#define IAP2_CTRL_IDENTIFICATION_REJECTED					0x1D03
#define IAP2_CTRL_CANCEL_IDENTIFICATION						0x1D05
#define IAP2_CTRL_IDENTIFICATION_INFORMATION_UPDATE			0x1D06

#define IAP2_CTRL_START_EXTERNAL_ACCESSORY_PROTOCOL			0xEA00
#define IAP2_CTRL_STOP_EXTERNAL_ACCESSORY_PROTOCOL			0xEA01
#define IAP2_CTRL_REQUEST_APP_LAUNCH						0xEA02
#define IAP2_CTRL_STATUS_EXTERNAL_ACCESSORY_PROTOCOL		0xEA03


/* Authentication IC */
#define IAP2_AUTH_ADDR		0x22

#define IAP2_AUTH_REG_AUTHENTICATION_CTRL_STATUS	0x10
#define IAP2_AUTH_REG_CHALLENGE_RESPONSE_LENGTH		0x11
#define IAP2_AUTH_REG_CHALLENGE_RESPONSE_DATA		0x12

#define IAP2_AUTH_REG_CHALLENGE_LENGTH				0x20
#define IAP2_AUTH_REG_CHALLENGE_DATA				0x21

#define IAP2_AUTH_REG_CERTIFICATE_LENGTH			0x30
#define IAP2_AUTH_REG_CERTIFICATE_DATA				0x31


/* IAP2 State Control */
enum
{
	IAP2_STATE_DETECT_SUPPORT = PROFILE_STATE_START,
	IAP2_STATE_LINK_UNSUPPORT,
	IAP2_STATE_SEND_LINK_CONFIG,
	IAP2_STATE_WAIT_LINK_CONFIG,
	IAP2_STATE_WAIT_AUTHENTICATION_REQUEST,
	IAP2_STATE_READ_CERTIFICATE_LENGTH,
	IAP2_STATE_READ_CERTIFICATE_DATA,
	IAP2_STATE_WAIT_CHALLENGE_REQUEST,
	IAP2_STATE_READ_CHALLENGE_LENGTH,
	IAP2_STATE_READ_CHALLENGE_DATA,
	IAP2_STATE_WAIT_AUTHENTICATION_VERDICT,
	IAP2_STATE_WAIT_START_IDENTIFICATION,
	IAP2_STATE_SEND_IDENTIFICATION,
	IAP2_STATE_WAIT_IDENTIFICATION_VERDICT,
	IAP2_STATE_LINK_ESTABLISHED,
};

typedef union
{
	struct {
		U8 detectCount;
	} detect;
	struct {
		U16 length;
	} certificate;
	struct {
		U16 length;
	} challenge;
} IAP2StateVar;

typedef struct
{
	MMI_PROFILE_INFO mmiProfileInfo;
	OSMQ OSMQ_IAP2_ExtASeesion_From_UART;
	U8 txSEQ; //SEQ number for next tx packet
	U8 rxSEQ; //SEQ number of last acknowledged rx packet
	U8 rxCumulative, maxCumulative;
	U16 rxCumulativeTimeout;
	OST XDATA_PTR rxCumulativeTimer;
	IAP2StateVar stateVar;
	U8 protocolIdentifier;
	U8 protocolSessionIdentifier;
} IAP2_LINK_INFO;

typedef struct
{
	IAP2_LINK_INFO linkInfo[MAX_MULTI_POINT_NO];
} IAP2_CTL;

IAP2_EXTERN IAP2_CTL XDATA gIAP2_ctl;

PUBLIC IAP2_LINK_INFO XDATA_PTR IAP2_GetLinkInfo(U8 linkIndex);

#endif //__IAP2_H__
