#ifndef _HCI_H_
#define _HCI_H_
/*
 * AIROHA Bluetooth Device Firmware
 * COPYRIGHT (C) 2014 AIROHA TECHNOLOGY CORP. CO., LTD. ALL RIGHTS RESERVED
 *
 * HCI.h is the file defines the constants and command/event format
 *
 * Programmer : CharlesSu@airoha.com.tw, Ext.2882
 */
#include "cpu.h"



////////////////////////////////////////////////////////////////////////////////
// Bluetooth HCI Command Definitions ///////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/*
 * HC UART TRANSPORT PACKET ID
 */
typedef U8 HCI_UART_XPORT_PKT_ID;
#define HCI_UART_XPORT_PKT_ID_COMMAND   ((HCI_UART_XPORT_PKT_ID)1)
#define HCI_UART_XPORT_PKT_ID_ACL_DATA  ((HCI_UART_XPORT_PKT_ID)2)
#define HCI_UART_XPORT_PKT_ID_SCO_DATA  ((HCI_UART_XPORT_PKT_ID)3)
#define HCI_UART_XPORT_PKT_ID_EVENT     ((HCI_UART_XPORT_PKT_ID)4)
#define HCI_UART_XPORT_PKT_ID_LINK_CONTROL	(HCI_UART_XPORT_PKT_ID)15  //THREE_WIRE_UART_LINK_CONTROL

#ifndef HCI_UART_XPORT_PKT_ID_LEN
#define HCI_UART_XPORT_PKT_ID_LEN 1
#else
#error "HCI_UART_XPORT_PKT_ID_LEN has been defined"
#endif



/*
 * HC SPI TRANSPORT PACKET ID
 */
#if (FEA_SUPP_HCI_SPI_TRANSPORT)
typedef U8 HCI_SPI_XPORT_PKT_ID;
#define HCI_SPI_XPORT_PKT_ID_COMMAND   HCI_UART_XPORT_PKT_ID_COMMAND
#define HCI_SPI_XPORT_PKT_ID_ACL_DATA  HCI_UART_XPORT_PKT_ID_ACL_DATA
#define HCI_SPI_XPORT_PKT_ID_SCO_DATA  HCI_UART_XPORT_PKT_ID_SCO_DATA
#define HCI_SPI_XPORT_PKT_ID_EVENT     HCI_UART_XPORT_PKT_ID_EVENT

#ifndef HCI_SPI_XPORT_PKT_ID_LEN
#define HCI_SPI_XPORT_PKT_ID_LEN HCI_UART_XPORT_PKT_ID_LEN
#else
#error "HCI_SPI_XPORT_PKT_ID_LEN has been defined"
#endif
#endif



/*
 * HCI Command OGFs
 */
typedef U8 HCI_CMD_OGF;
#define HCI_CMD_OGF_LINK_CTL                                (HCI_CMD_OGF)0x01
#define HCI_CMD_OGF_LINK_POLICY                             (HCI_CMD_OGF)0x02
#define HCI_CMD_OGF_CTLR_AND_BB                             (HCI_CMD_OGF)0x03
#define HCI_CMD_OGF_INFO_PARA                               (HCI_CMD_OGF)0x04
#define HCI_CMD_OGF_STATUS_PARA                             (HCI_CMD_OGF)0x05
#define HCI_CMD_OGF_TEST                                    (HCI_CMD_OGF)0x06
#define HCI_CMD_OGF_LE_CTLR                                 (HCI_CMD_OGF)0x08
/* AIROHA proprietory HCI Command OGFs */
#define HCI_CMD_OGF_AIROHA_VENDOR                           (HCI_CMD_OGF)0x3F


/*
 * HCI Command OCFs
 */
typedef U16 HCI_CMD_OCF;

/* HCI Command OCF of LINK CONTROL Group */
#define HCI_CMD_OCF_INQUIRY                                 (HCI_CMD_OCF)0x01
#define HCI_CMD_OCF_INQUIRY_CANCEL                          (HCI_CMD_OCF)0x02
#define HCI_CMD_OCF_PERIODIC_INQUIRY_MODE                   (HCI_CMD_OCF)0x03
#define HCI_CMD_OCF_EXIT_PERIODIC_INQUIRY_MODE              (HCI_CMD_OCF)0x04
#define HCI_CMD_OCF_CREATE_CONNECTION                       (HCI_CMD_OCF)0x05
#define HCI_CMD_OCF_DISCONNECT                              (HCI_CMD_OCF)0x06
#define HCI_CMD_OCF_ADD_SCO_CONNECTION                      (HCI_CMD_OCF)0x07   /* Deprecated */
#define HCI_CMD_OCF_CREATE_CONNECTION_CANCEL                (HCI_CMD_OCF)0x08
#define HCI_CMD_OCF_ACCEPT_CONNECTION_REQUEST               (HCI_CMD_OCF)0x09
#define HCI_CMD_OCF_REJECT_CONNECTION_REQUEST               (HCI_CMD_OCF)0x0A
#define HCI_CMD_OCF_LINK_KEY_REQUEST_REPLY                  (HCI_CMD_OCF)0X0B
#define HCI_CMD_OCF_LINK_KEY_REQUEST_NEGATIVE_REPLY         (HCI_CMD_OCF)0X0C
#define HCI_CMD_OCF_PIN_CODE_REQUEST_REPLY                  (HCI_CMD_OCF)0X0D
#define HCI_CMD_OCF_PIN_CODE_REQUEST_NEGATIVE_REPLY         (HCI_CMD_OCF)0X0E
#define HCI_CMD_OCF_CHANGE_CONNECTION_PACKET_TYPE           (HCI_CMD_OCF)0x0F
#define HCI_CMD_OCF_ACL_U_GO_STOP_CONFIRM                   (HCI_CMD_OCF)0x10   /* Airoha defined */
#define HCI_CMD_OCF_AUTHENTICATION_REQUESTED                (HCI_CMD_OCF)0x11
#define HCI_CMD_OCF_ACL_LINK_INDEX_CHANGED_CONFIRM          (HCI_CMD_OCF)0x12   /* Airoha defined */
#define HCI_CMD_OCF_SET_CONNECTION_ENCRYPTION               (HCI_CMD_OCF)0x13
#define HCI_CMD_OCF_RESEGMENT_CNF                           (HCI_CMD_OCF)0x14   /* Airoha defined */
#define HCI_CMD_OCF_CHANGE_CONNECTION_LINK_KEY              (HCI_CMD_OCF)0x15
#define HCI_CMD_OCF_MASTER_LINK_KEY                         (HCI_CMD_OCF)0x17
#define HCI_CMD_OCF_REMOTE_NAME_REQUEST                     (HCI_CMD_OCF)0x19
#define HCI_CMD_OCF_REMOTE_NAME_REQUEST_CANCEL              (HCI_CMD_OCF)0x1A
#define HCI_CMD_OCF_READ_REMOTE_SUPPORTED_FEATURES          (HCI_CMD_OCF)0x1B
#define HCI_CMD_OCF_READ_REMOTE_EXTENDED_FEATURES           (HCI_CMD_OCF)0x1C
#define HCI_CMD_OCF_READ_REMOTE_VERSION_INFORMATION         (HCI_CMD_OCF)0x1D
#define HCI_CMD_OCF_READ_CLOCK_OFFSET                       (HCI_CMD_OCF)0x1F
#define HCI_CMD_OCF_READ_LMP_HANDLE                         (HCI_CMD_OCF)0x20
#define HCI_CMD_OCF_SETUP_SYNCHRONOUS_CONNECTION            (HCI_CMD_OCF)0x28
#define HCI_CMD_OCF_ACCEPT_SYNCHRONOUS_CONNECTION_REQUEST   (HCI_CMD_OCF)0x29
#define HCI_CMD_OCF_REJECT_SYNCHRONOUS_CONNECTION_REQUEST   (HCI_CMD_OCF)0x2A
#define HCI_CMD_OCF_IO_CAPABILITY_REQUEST_REPLY             (HCI_CMD_OCF)0x2B
#define HCI_CMD_OCF_USR_CONFIRMATION_REQ_REPLY              (HCI_CMD_OCF)0x2C
#define HCI_CMD_OCF_USR_CONFIRMATION_REQ_NEGATIVE_REPLY     (HCI_CMD_OCF)0x2D
#define HCI_CMD_OCF_USR_PASSKEY_REQ_REPLY                   (HCI_CMD_OCF)0x2E
#define HCI_CMD_OCF_USR_PASSKEY_REQ_NEGATIVE_REPLY          (HCI_CMD_OCF)0x2F
#define HCI_CMD_OCF_REMOTE_OOB_DATA_REQ_REPLY               (HCI_CMD_OCF)0x30
#define HCI_CMD_OCF_REMOTE_OOB_DATA_REQ_NEGATIVE_REPLY      (HCI_CMD_OCF)0x33
#define HCI_CMD_OCF_IO_CAPABILITY_REQ_NEGATIVE_REPLY        (HCI_CMD_OCF)0x34
#define HCI_CMD_OCF_CREATE_PHYSICAL_LINK                    (HCI_CMD_OCF)0x35
#define HCI_CMD_OCF_ACCEPT_PHYSICAL_LINK                    (HCI_CMD_OCF)0x36
#define HCI_CMD_OCF_DISCONNECT_PHYSICAL_LINK                (HCI_CMD_OCF)0x37
#define HCI_CMD_OCF_CREATE_LOGICAL_LINK                     (HCI_CMD_OCF)0x38
#define HCI_CMD_OCF_ACCEPT_LOGICAL_LINK                     (HCI_CMD_OCF)0x39
#define HCI_CMD_OCF_DISCONNECT_LOGICAL_LINK                 (HCI_CMD_OCF)0x3A
#define HCI_CMD_OCF_LOGICAL_LINK_CANCEL                     (HCI_CMD_OCF)0x3B
#define HCI_CMD_OCF_FLOW_SPEC_MODIFY                        (HCI_CMD_OCF)0x3C

/* HCI Command OCF of LINK POLICY Group */
#define HCI_CMD_OCF_HOLD_MODE                               (HCI_CMD_OCF)0x01
#define HCI_CMD_OCF_SNIFF_MODE                              (HCI_CMD_OCF)0x03
#define HCI_CMD_OCF_EXIT_SNIFF_MODE                         (HCI_CMD_OCF)0x04
#define HCI_CMD_OCF_PARK_STATE                              (HCI_CMD_OCF)0x05
#define HCI_CMD_OCF_EXIT_PARK_STATE                         (HCI_CMD_OCF)0x06
#define HCI_CMD_OCF_QOS_SETUP                               (HCI_CMD_OCF)0x07
#define HCI_CMD_OCF_ROLE_DISCOVERY                          (HCI_CMD_OCF)0x09
#define HCI_CMD_OCF_SWITCH_ROLE                             (HCI_CMD_OCF)0x0B
#define HCI_CMD_OCF_READ_LINK_POLICY_SETTINGS               (HCI_CMD_OCF)0x0C
#define HCI_CMD_OCF_WRITE_LINK_POLICY_SETTINGS              (HCI_CMD_OCF)0x0D
#define HCI_CMD_OCF_READ_DEFAULT_LINK_POLICY_SETTINGS       (HCI_CMD_OCF)0x0E
#define HCI_CMD_OCF_WRITE_DEFAULT_LINK_POLICY_SETTINGS      (HCI_CMD_OCF)0x0F
#define HCI_CMD_OCF_FLOW_SPECIFICATION                      (HCI_CMD_OCF)0x10
#define HCI_CMD_OCF_SNIFF_SUBRATING                         (HCI_CMD_OCF)0x11

/* HCI Command OCF of CONTROLLER AND BASEBAND Group */
#define HCI_CMD_OCF_SET_EVENT_MASK                          (HCI_CMD_OCF)0x01
#define HCI_CMD_OCF_RESET                                   (HCI_CMD_OCF)0x03
#define HCI_CMD_OCF_SET_EVENT_FILTER                        (HCI_CMD_OCF)0x05
#define HCI_CMD_OCF_FLUSH                                   (HCI_CMD_OCF)0x08
#define HCI_CMD_OCF_READ_PIN_TYPE                           (HCI_CMD_OCF)0x09
#define HCI_CMD_OCF_WRITE_PIN_TYPE                          (HCI_CMD_OCF)0x0A
#define HCI_CMD_OCF_CREATE_NEW_UNIT_KEY                     (HCI_CMD_OCF)0x0B
#define HCI_CMD_OCF_READ_STORED_LINK_KEY                    (HCI_CMD_OCF)0x0D
#define HCI_CMD_OCF_WRITE_STORED_LINK_KEY                   (HCI_CMD_OCF)0x11
#define HCI_CMD_OCF_DELETE_STORED_LINK_KEY                  (HCI_CMD_OCF)0x12
#define HCI_CMD_OCF_WRITE_LOCAL_NAME                        (HCI_CMD_OCF)0x13
#define HCI_CMD_OCF_READ_LOCAL_NAME                         (HCI_CMD_OCF)0x14
#define HCI_CMD_OCF_READ_CONNECTION_ACCEPT_TIMEOUT          (HCI_CMD_OCF)0x15
#define HCI_CMD_OCF_WRITE_CONNECTION_ACCEPT_TIMEOUT         (HCI_CMD_OCF)0x16
#define HCI_CMD_OCF_READ_PAGE_TIMEOUT                       (HCI_CMD_OCF)0x17
#define HCI_CMD_OCF_WRITE_PAGE_TIMEOUT                      (HCI_CMD_OCF)0x18
#define HCI_CMD_OCF_READ_SCAN_ENABLE                        (HCI_CMD_OCF)0x19
#define HCI_CMD_OCF_WRITE_SCAN_ENABLE                       (HCI_CMD_OCF)0x1A
#define HCI_CMD_OCF_READ_PAGE_SCAN_ACTIVITY                 (HCI_CMD_OCF)0x1B
#define HCI_CMD_OCF_WRITE_PAGE_SCAN_ACTIVITY                (HCI_CMD_OCF)0x1C
#define HCI_CMD_OCF_READ_INQUIRY_SCAN_ACTIVITY              (HCI_CMD_OCF)0x1D
#define HCI_CMD_OCF_WRITE_INQUIRY_SCAN_ACTIVITY             (HCI_CMD_OCF)0x1E
#define HCI_CMD_OCF_READ_AUTHENTICATION_ENABLE              (HCI_CMD_OCF)0x1F
#define HCI_CMD_OCF_WRITE_AUTHENTICATION_ENABLE             (HCI_CMD_OCF)0x20
#define HCI_CMD_OCF_READ_ENCRYPTION_MODE                    (HCI_CMD_OCF)0x21   /* Deprecated */
#define HCI_CMD_OCF_WRITE_ENCRYPTION_MODE                   (HCI_CMD_OCF)0x22   /* Deprecated */
#define HCI_CMD_OCF_READ_CLASS_OF_DEVICE                    (HCI_CMD_OCF)0x23
#define HCI_CMD_OCF_WRITE_CLASS_OF_DEVICE                   (HCI_CMD_OCF)0x24
#define HCI_CMD_OCF_READ_VOICE_SETTING                      (HCI_CMD_OCF)0x25
#define HCI_CMD_OCF_WRITE_VOICE_SETTING                     (HCI_CMD_OCF)0x26
#define HCI_CMD_OCF_READ_AUTOMATIC_FLUSH_TIMEOUT            (HCI_CMD_OCF)0x27
#define HCI_CMD_OCF_WRITE_AUTOMATIC_FLUSH_TIMEOUT           (HCI_CMD_OCF)0x28
#define HCI_CMD_OCF_READ_NUM_BROADCAST_RETRANSMISSIONS   	(HCI_CMD_OCF)0x29
#define HCI_CMD_OCF_WRITE_NUM_BROADCAST_RETRANSMISSIONS  	(HCI_CMD_OCF)0x2A
#define HCI_CMD_OCF_READ_HOLD_MODE_ACTIVITY                 (HCI_CMD_OCF)0x2B
#define HCI_CMD_OCF_WRITE_HOLD_MODE_ACTIVITY                (HCI_CMD_OCF)0x2C
#define HCI_CMD_OCF_READ_TRANSMIT_POWER_LEVEL               (HCI_CMD_OCF)0x2D
#define HCI_CMD_OCF_READ_SYNCHRONOUS_FLOW_CONTROL_ENABLE    (HCI_CMD_OCF)0x2E
#define HCI_CMD_OCF_WRITE_SYNCHRONOUS_FLOW_CONTROL_ENABLE   (HCI_CMD_OCF)0x2F
#define HCI_CMD_OCF_SET_CONTROLLER_TO_HOST_FLOW_CONTROL     (HCI_CMD_OCF)0x31
#define HCI_CMD_OCF_HOST_BUFFER_SIZE                        (HCI_CMD_OCF)0x33
#define HCI_CMD_OCF_HOST_NUMBER_OF_COMPLETED_PACKETS        (HCI_CMD_OCF)0x35
#define HCI_CMD_OCF_READ_LINK_SUPERVISION_TIMEOUT           (HCI_CMD_OCF)0x36
#define HCI_CMD_OCF_WRITE_LINK_SUPERVISION_TIMEOUT          (HCI_CMD_OCF)0x37
#define HCI_CMD_OCF_READ_NUMBER_OF_SUPPORTED_IAC            (HCI_CMD_OCF)0x38
#define HCI_CMD_OCF_READ_CURRENT_IAC_LAP                    (HCI_CMD_OCF)0x39
#define HCI_CMD_OCF_WRITE_CURRENT_IAC_LAP                   (HCI_CMD_OCF)0x3A
#define HCI_CMD_OCF_SET_AFH_HOST_CHANNEL_CLASSIFICATION     (HCI_CMD_OCF)0x3F
#define HCI_CMD_OCF_READ_INQUIRY_SCAN_TYPE                  (HCI_CMD_OCF)0x42
#define HCI_CMD_OCF_WRITE_INQUIRY_SCAN_TYPE                 (HCI_CMD_OCF)0x43
#define HCI_CMD_OCF_READ_INQUIRY_MODE                       (HCI_CMD_OCF)0x44
#define HCI_CMD_OCF_WRITE_INQUIRY_MODE                      (HCI_CMD_OCF)0x45
#define HCI_CMD_OCF_READ_PAGE_SCAN_TYPE                     (HCI_CMD_OCF)0x46
#define HCI_CMD_OCF_WRITE_PAGE_SCAN_TYPE                    (HCI_CMD_OCF)0x47
#define HCI_CMD_OCF_READ_AFH_CHANNEL_ASSESSMENT_MODE        (HCI_CMD_OCF)0x48
#define HCI_CMD_OCF_WRITE_AFH_CHANNEL_ASSESSMENT_MODE       (HCI_CMD_OCF)0x49
#define HCI_CMD_OCF_READ_EXTENDED_INQUIRY_RESPONSE          (HCI_CMD_OCF)0x51
#define HCI_CMD_OCF_WRITE_EXTENDED_INQUIRY_RESPONSE         (HCI_CMD_OCF)0x52
#define HCI_CMD_OCF_REFRESH_ENCRYPTION_KEY                  (HCI_CMD_OCF)0x53
#define HCI_CMD_OCF_READ_SIMPLE_PAIRING_MODE                (HCI_CMD_OCF)0x55
#define HCI_CMD_OCF_WRITE_SIMPLE_PAIRING_MODE               (HCI_CMD_OCF)0x56
#define HCI_CMD_OCF_READ_LOCAL_OOB_DATA                     (HCI_CMD_OCF)0x57
#define HCI_CMD_OCF_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL    (HCI_CMD_OCF)0x58
#define HCI_CMD_OCF_WRITE_INQUIRY_TX_POWER_LEVEL            (HCI_CMD_OCF)0x59
#define HCI_CMD_OCF_READ_DEFAULT_ERRONEOUS_DATA_REPORTING   (HCI_CMD_OCF)0x5A
#define HCI_CMD_OCF_WRITE_DEFAULT_ERRONEOUS_DATA_REPORTING  (HCI_CMD_OCF)0x5B
#define HCI_CMD_OCF_ENHANCED_FLUSH                          (HCI_CMD_OCF)0x5F
#define HCI_CMD_OCF_SEND_KEYPRESS_NOTIFICATION              (HCI_CMD_OCF)0x60
#define HCI_CMD_OCF_READ_LOGICAL_LINK_ACCEPT_TIMEOUT        (HCI_CMD_OCF)0x61
#define HCI_CMD_OCF_WRITE_LOGICAL_LINK_ACCEPT_TIMEOUT       (HCI_CMD_OCF)0x62
#define HCI_CMD_OCF_SET_EVENT_MASK_PAGE_2                   (HCI_CMD_OCF)0x63
#define HCI_CMD_OCF_READ_LOCATION_DATA                      (HCI_CMD_OCF)0x64
#define HCI_CMD_OCF_WRITE_LOCATION_DATA                     (HCI_CMD_OCF)0x65
#define HCI_CMD_OCF_READ_FLOW_CONTROL_MODE                  (HCI_CMD_OCF)0x66
#define HCI_CMD_OCF_WRITE_FLOW_CONTROL_MODE                 (HCI_CMD_OCF)0x67
#define HCI_CMD_OCF_READ_ENHANCE_TRANSMIT_POWER_LEVEL       (HCI_CMD_OCF)0x68
#define HCI_CMD_OCF_READ_BEST_EFFORT_FLUSH_TIMEOUT          (HCI_CMD_OCF)0x69
#define HCI_CMD_OCF_WRITE_BEST_EFFORT_FLUSH_TIMEOUT         (HCI_CMD_OCF)0x6A
#define HCI_CMD_OCF_SHORT_RANGE_MODE                        (HCI_CMD_OCF)0x6B
#define HCI_CMD_OCF_READ_LE_HOST_SUPPORT                    (HCI_CMD_OCF)0x6C
#define HCI_CMD_OCF_WRITE_LE_HOST_SUPPORT                   (HCI_CMD_OCF)0x6D

/* HCI Command OCF of INFORMATION PARAMETER Group */
#define HCI_CMD_OCF_READ_LOCAL_VERSION_INFORMATION          (HCI_CMD_OCF)0x01
#define HCI_CMD_OCF_READ_LOCAL_SUPPORTED_COMMANDS           (HCI_CMD_OCF)0x02
#define HCI_CMD_OCF_READ_LOCAL_SUPPORTED_FEATURES           (HCI_CMD_OCF)0x03
#define HCI_CMD_OCF_READ_LOCAL_EXTENDED_FEATURES            (HCI_CMD_OCF)0x04
#define HCI_CMD_OCF_READ_BUFFER_SIZE                        (HCI_CMD_OCF)0x05
#define HCI_CMD_OCF_READ_BD_ADDR                            (HCI_CMD_OCF)0x09
#define HCI_CMD_OCF_READ_DATE_BLOCK_SIZE                    (HCI_CMD_OCF)0x0A

/* HCI Command OCF of STATUS PARAMETER Group */
#define HCI_CMD_OCF_READ_FAILED_CONTACT_COUNTER             (HCI_CMD_OCF)0x01
#define HCI_CMD_OCF_RESET_FAILED_CONTACT_COUNTER            (HCI_CMD_OCF)0x02
#define HCI_CMD_OCF_READ_LINK_QUALITY                       (HCI_CMD_OCF)0x03
#define HCI_CMD_OCF_READ_RSSI                               (HCI_CMD_OCF)0x05
#define HCI_CMD_OCF_READ_AFH_CHANNEL_MAP                    (HCI_CMD_OCF)0x06
#define HCI_CMD_OCF_READ_CLOCK                              (HCI_CMD_OCF)0x07
#define HCI_CMD_OCF_READ_ENCRYPTION_KEY_SIZE                (HCI_CMD_OCF)0x08
#define HCI_CMD_OCF_READ_LOCAL_AMP_INFO                     (HCI_CMD_OCF)0x09
#define HCI_CMD_OCF_READ_LOCAL_AMP_ASSOC                    (HCI_CMD_OCF)0x0A
#define HCI_CMD_OCF_WRITE_REMOTE_AMP_ASSOC                  (HCI_CMD_OCF)0x0B

/* HCI Command OCF of TEST Group */
#define HCI_CMD_OCF_READ_LOOPBACK_MODE                      (HCI_CMD_OCF)0x01
#define HCI_CMD_OCF_WRITE_LOOPBACK_MODE                     (HCI_CMD_OCF)0x02
#define HCI_CMD_OCF_ENABLE_DEVICE_UNDER_TEST_MODE           (HCI_CMD_OCF)0x03
#define HCI_CMD_OCF_WRITE_SIMPLE_PAIRING_DEBUG_MODE         (HCI_CMD_OCF)0x04
#define HCI_CMD_OCF_ENABLE_AMP_RECEIVER_REPORTS             (HCI_CMD_OCF)0x07
#define HCI_CMD_OCF_AMP_TEST_END                            (HCI_CMD_OCF)0x08
#define HCI_CMD_OCF_AMP_TEST                                (HCI_CMD_OCF)0x09

/* HCI Command OCF of LE CONTROLLER Group */
#define HCI_CMD_OCF_LE_SET_EVENT_MASK                       (HCI_CMD_OCF)0x01
#define HCI_CMD_OCF_LE_READ_BUFFER_SIZE                     (HCI_CMD_OCF)0x02
#define HCI_CMD_OCF_LE_READ_LOCAL_SUPPORTED_FEATURES        (HCI_CMD_OCF)0x03
#define HCI_CMD_OCF_LE_SET_RANDOM_ADDRESS                   (HCI_CMD_OCF)0x05
#define HCI_CMD_OCF_LE_SET_ADVERTISING_PARAMETER            (HCI_CMD_OCF)0x06
#define HCI_CMD_OCF_LE_READ_ADVERTISING_CHANNEL_TX_POWER    (HCI_CMD_OCF)0x07
#define HCI_CMD_OCF_LE_ADVERTISING_DATA                     (HCI_CMD_OCF)0x08
#define HCI_CMD_OCF_LE_SET_SCAN_RESPONSE_DATA               (HCI_CMD_OCF)0x09
#define HCI_CMD_OCF_LE_SET_ADVERTISING_ENABLE               (HCI_CMD_OCF)0x0A
#define HCI_CMD_OCF_LE_SET_SCAN_PARAMETERS                  (HCI_CMD_OCF)0x0B
#define HCI_CMD_OCF_LE_SET_SCAN_ENABLE                      (HCI_CMD_OCF)0x0C
#define HCI_CMD_OCF_LE_CREATE_CONNECTION                    (HCI_CMD_OCF)0x0D
#define HCI_CMD_OCF_LE_CREATE_CONNECTION_CANCEL             (HCI_CMD_OCF)0x0E
#define HCI_CMD_OCF_LE_READ_WHITE_LIST_SIZE                 (HCI_CMD_OCF)0x0F
#define HCI_CMD_OCF_LE_CLEAR_WHITE_LIST                     (HCI_CMD_OCF)0x10
#define HCI_CMD_OCF_LE_ADD_DEVICE_TO_WHITE_LIST             (HCI_CMD_OCF)0x11
#define HCI_CMD_OCF_LE_REMOVE_DEVICE_FROM_WHITE_LIST        (HCI_CMD_OCF)0x12
#define HCI_CMD_OCF_LE_CONNECTION_UPDATE                    (HCI_CMD_OCF)0x13
#define HCI_CMD_OCF_LE_SET_HOST_CHANNEL_CLASSIFICATION      (HCI_CMD_OCF)0x14
#define HCI_CMD_OCF_LE_READ_CHANNEL_MAP                     (HCI_CMD_OCF)0x15
#define HCI_CMD_OCF_LE_READ_REMOTE_USED_FEATURES            (HCI_CMD_OCF)0x16
#define HCI_CMD_OCF_LE_ENCRYPT                              (HCI_CMD_OCF)0x17
#define HCI_CMD_OCF_LE_RAND                                 (HCI_CMD_OCF)0x18
#define HCI_CMD_OCF_LE_START_ENCRYPTION                     (HCI_CMD_OCF)0x19
#define HCI_CMD_OCF_LE_LONG_TERM_KEY_REQUEST_REPLY          (HCI_CMD_OCF)0x1A
#define HCI_CMD_OCF_LE_LONG_TERM_KEY_REQUEST_NEGATIVE_REPLY (HCI_CMD_OCF)0x1B
#define HCI_CMD_OCF_LE_READ_SUPPORTED_STATES                (HCI_CMD_OCF)0x1C
#define HCI_CMD_OCF_LE_RECEIVER_TEST                        (HCI_CMD_OCF)0x1D
#define HCI_CMD_OCF_LE_TRANSMITTER_TEST                     (HCI_CMD_OCF)0x1E
#define HCI_CMD_OCF_LE_TEST_END                             (HCI_CMD_OCF)0x1F

#define HCI_CMD_OCF_LE_SET_DATA_LENGTH                      (HCI_CMD_OCF)0x22
#define HCI_CMD_OCF_LE_READ_SUGGESTED_DEFAULT_DATA_LENGTH   (HCI_CMD_OCF)0x23
#define HCI_CMD_OCF_LE_WRITE_SUGGESTED_DEFAULT_DATA_LENGTH  (HCI_CMD_OCF)0x24

/*
 * AIROHA proprietory HCI Command OCFs
 */ 
/* HCI_CMD_OGF_AIROHA_VENDOR */
#define HCI_CMD_OCF_AIROHA_VENDOR                           (HCI_CMD_OCF)0x00
#define HCI_CMD_OCF_MMI_SEND_TO_UART                        (HCI_CMD_OCF)0x01


/*
 * HCI Command OPCODE
 */
typedef U16 HCI_OPCODE;
#define HCI_COMBINED_OPCODE(ogf,ocf) (((HCI_OPCODE)(ogf)<<10)|(HCI_OPCODE)(ocf))

/* HCI Link Control Command OpCode */
#define HCI_CMDCODE_INQUIRY                                 HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_INQUIRY)
#define HCI_CMDCODE_INQUIRY_CANCEL                          HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_INQUIRY_CANCEL)
#define HCI_CMDCODE_PERIODIC_INQUIRY_MODE                   HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_PERIODIC_INQUIRY_MODE)
#define HCI_CMDCODE_EXIT_PERIODIC_INQUIRY_MODE              HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_EXIT_PERIODIC_INQUIRY_MODE)
#define HCI_CMDCODE_CREATE_CONNECTION                       HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_CREATE_CONNECTION)
#define HCI_CMDCODE_DISCONNECT                              HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_DISCONNECT)
#define HCI_CMDCODE_ADD_SCO_CONNECTION                      HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_ADD_SCO_CONNECTION)
#define HCI_CMDCODE_CREATE_CONNECTION_CANCEL                HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_CREATE_CONNECTION_CANCEL)
#define HCI_CMDCODE_ACCEPT_CONNECTION_REQUEST               HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_ACCEPT_CONNECTION_REQUEST)
#define HCI_CMDCODE_REJECT_CONNECTION_REQUEST               HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_REJECT_CONNECTION_REQUEST)
#define HCI_CMDCODE_LINK_KEY_REQUEST_REPLY                  HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_LINK_KEY_REQUEST_REPLY)
#define HCI_CMDCODE_LINK_KEY_REQUEST_NEGATIVE_REPLY         HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_LINK_KEY_REQUEST_NEGATIVE_REPLY)
#define HCI_CMDCODE_PIN_CODE_REQUEST_REPLY                  HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_PIN_CODE_REQUEST_REPLY)
#define HCI_CMDCODE_PIN_CODE_REQUEST_NEGATIVE_REPLY         HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_PIN_CODE_REQUEST_NEGATIVE_REPLY)
#define HCI_CMDCODE_CHANGE_CONNECTION_PACKET_TYPE           HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_CHANGE_CONNECTION_PACKET_TYPE)
#define HCI_CMDCODE_ACL_U_GO_STOP_CONFIRM                   HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_ACL_U_GO_STOP_CONFIRM)
#define HCI_CMDCODE_AUTHENTICATION_REQUESTED                HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_AUTHENTICATION_REQUESTED)
#define HCI_CMDCODE_ACL_LINK_INDEX_CHANGED_CONFIRM          HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_ACL_LINK_INDEX_CHANGED_CONFIRM)
#define HCI_CMDCODE_SET_CONNECTION_ENCRYPTION               HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_SET_CONNECTION_ENCRYPTION)
#define HCI_CMDCODE_RESEGMENT_CNF                           HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_RESEGMENT_CNF)
#define HCI_CMDCODE_CHANGE_CONNECTION_LINK_KEY              HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_CHANGE_CONNECTION_LINK_KEY)
#define HCI_CMDCODE_MASTER_LINK_KEY                         HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_MASTER_LINK_KEY)
#define HCI_CMDCODE_REMOTE_NAME_REQUEST                     HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_REMOTE_NAME_REQUEST)
#define HCI_CMDCODE_REMOTE_NAME_REQUEST_CANCEL              HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_REMOTE_NAME_REQUEST_CANCEL)
#define HCI_CMDCODE_READ_REMOTE_SUPPORTED_FEATURES          HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_READ_REMOTE_SUPPORTED_FEATURES)
#define HCI_CMDCODE_READ_REMOTE_EXTENDED_FEATURES           HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_READ_REMOTE_EXTENDED_FEATURES)
#define HCI_CMDCODE_READ_REMOTE_VERSION_INFORMATION         HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_READ_REMOTE_VERSION_INFORMATION)
#define HCI_CMDCODE_READ_CLOCK_OFFSET                       HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_READ_CLOCK_OFFSET)
#define HCI_CMDCODE_READ_LMP_HANDLE                         HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_READ_LMP_HANDLE)
#define HCI_CMDCODE_SETUP_SYNCHRONOUS_CONNECTION            HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_SETUP_SYNCHRONOUS_CONNECTION)
#define HCI_CMDCODE_ACCEPT_SYNCHRONOUS_CONNECTION_REQUEST   HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_ACCEPT_SYNCHRONOUS_CONNECTION_REQUEST)
#define HCI_CMDCODE_REJECT_SYNCHRONOUS_CONNECTION_REQUEST   HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_REJECT_SYNCHRONOUS_CONNECTION_REQUEST)
#define HCI_CMDCODE_IO_CAPABILITY_REQUEST_REPLY             HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_IO_CAPABILITY_REQUEST_REPLY)
#define HCI_CMDCODE_USR_CONFIRMATION_REQ_REPLY              HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_USR_CONFIRMATION_REQ_REPLY)
#define HCI_CMDCODE_USR_CONFIRMATION_REQ_NEGATIVE_REPLY     HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_USR_CONFIRMATION_REQ_NEGATIVE_REPLY)
#define HCI_CMDCODE_USR_PASSKEY_REQ_REPLY                   HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_USR_PASSKEY_REQ_REPLY)
#define HCI_CMDCODE_USR_PASSKEY_REQ_NEGATIVE_REPLY          HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_USR_PASSKEY_REQ_NEGATIVE_REPLY)
#define HCI_CMDCODE_REMOTE_OOB_DATA_REQ_REPLY               HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_REMOTE_OOB_DATA_REQ_REPLY)
#define HCI_CMDCODE_REMOTE_OOB_DATA_REQ_NEGATIVE_REPLY      HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_REMOTE_OOB_DATA_REQ_NEGATIVE_REPLY)
#define HCI_CMDCODE_IO_CAPABILITY_REQ_NEGATIVE_REPLY        HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_IO_CAPABILITY_REQ_NEGATIVE_REPLY)
#define HCI_CMDCODE_CREATE_PHYSICAL_LINK                    HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_CREATE_PHYSICAL_LINK)
#define HCI_CMDCODE_ACCEPT_PHYSICAL_LINK                    HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_ACCEPT_PHYSICAL_LINK)
#define HCI_CMDCODE_DISCONNECT_PHYSICAL_LINK                HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_DISCONNECT_PHYSICAL_LINK)
#define HCI_CMDCODE_CREATE_LOGICAL_LINK                     HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_CREATE_LOGICAL_LINK)
#define HCI_CMDCODE_ACCEPT_LOGICAL_LINK                     HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_ACCEPT_LOGICAL_LINK)
#define HCI_CMDCODE_DISCONNECT_LOGICAL_LINK                 HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_DISCONNECT_LOGICAL_LINK)
#define HCI_CMDCODE_LOGICAL_LINK_CANCEL                     HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_LOGICAL_LINK_CANCEL)
#define HCI_CMDCODE_FLOW_SPEC_MODIFY                        HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_CTL,HCI_CMD_OCF_FLOW_SPEC_MODIFY)

/* HCI Link Policy Command OpCode */
#define HCI_CMDCODE_HOLD_MODE                               HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_POLICY,HCI_CMD_OCF_HOLD_MODE)
#define HCI_CMDCODE_SNIFF_MODE                              HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_POLICY,HCI_CMD_OCF_SNIFF_MODE)
#define HCI_CMDCODE_EXIT_SNIFF_MODE                         HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_POLICY,HCI_CMD_OCF_EXIT_SNIFF_MODE)
#define HCI_CMDCODE_PARK_STATE                              HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_POLICY,HCI_CMD_OCF_PARK_STATE)
#define HCI_CMDCODE_EXIT_PARK_STATE                         HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_POLICY,HCI_CMD_OCF_EXIT_PARK_STATE)
#define HCI_CMDCODE_QOS_SETUP                               HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_POLICY,HCI_CMD_OCF_QOS_SETUP)
#define HCI_CMDCODE_ROLE_DISCOVERY                          HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_POLICY,HCI_CMD_OCF_ROLE_DISCOVERY)
#define HCI_CMDCODE_SWITCH_ROLE                             HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_POLICY,HCI_CMD_OCF_SWITCH_ROLE)
#define HCI_CMDCODE_READ_LINK_POLICY_SETTINGS               HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_POLICY,HCI_CMD_OCF_READ_LINK_POLICY_SETTINGS)
#define HCI_CMDCODE_WRITE_LINK_POLICY_SETTINGS              HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_POLICY,HCI_CMD_OCF_WRITE_LINK_POLICY_SETTINGS)
#define HCI_CMDCODE_READ_DEFAULT_LINK_POLICY_SETTINGS       HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_POLICY,HCI_CMD_OCF_READ_DEFAULT_LINK_POLICY_SETTINGS)
#define HCI_CMDCODE_WRITE_DEFAULT_LINK_POLICY_SETTINGS      HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_POLICY,HCI_CMD_OCF_WRITE_DEFAULT_LINK_POLICY_SETTINGS)
#define HCI_CMDCODE_FLOW_SPECIFICATION                      HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_POLICY,HCI_CMD_OCF_FLOW_SPECIFICATION)
#define HCI_CMDCODE_SNIFF_SUBRATING                         HCI_COMBINED_OPCODE(HCI_CMD_OGF_LINK_POLICY,HCI_CMD_OCF_SNIFF_SUBRATING)

/* HCI Controller And Baseband Command OpCode */
#define HCI_CMDCODE_SET_EVENT_MASK                          HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_SET_EVENT_MASK)
#define HCI_CMDCODE_RESET                                   HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_RESET)
#define HCI_CMDCODE_SET_EVENT_FILTER                        HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_SET_EVENT_FILTER)
#define HCI_CMDCODE_FLUSH                                   HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_FLUSH)
#define HCI_CMDCODE_READ_PIN_TYPE                           HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_PIN_TYPE)
#define HCI_CMDCODE_WRITE_PIN_TYPE                          HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_PIN_TYPE)
#define HCI_CMDCODE_CREATE_NEW_UNIT_KEY                     HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_CREATE_NEW_UNIT_KEY)
#define HCI_CMDCODE_READ_STORED_LINK_KEY                    HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_STORED_LINK_KEY)
#define HCI_CMDCODE_WRITE_STORED_LINK_KEY                   HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_STORED_LINK_KEY)
#define HCI_CMDCODE_DELETE_STORED_LINK_KEY                  HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_DELETE_STORED_LINK_KEY)
#define HCI_CMDCODE_WRITE_LOCAL_NAME                        HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_LOCAL_NAME)
#define HCI_CMDCODE_READ_LOCAL_NAME                         HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_LOCAL_NAME)
#define HCI_CMDCODE_READ_CONNECTION_ACCEPT_TIMEOUT          HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_CONNECTION_ACCEPT_TIMEOUT)
#define HCI_CMDCODE_WRITE_CONNECTION_ACCEPT_TIMEOUT         HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_CONNECTION_ACCEPT_TIMEOUT)
#define HCI_CMDCODE_READ_PAGE_TIMEOUT                       HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_PAGE_TIMEOUT)
#define HCI_CMDCODE_WRITE_PAGE_TIMEOUT                      HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_PAGE_TIMEOUT)
#define HCI_CMDCODE_READ_SCAN_ENABLE                        HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_SCAN_ENABLE)
#define HCI_CMDCODE_WRITE_SCAN_ENABLE                       HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_SCAN_ENABLE)
#define HCI_CMDCODE_READ_PAGE_SCAN_ACTIVITY                 HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_PAGE_SCAN_ACTIVITY)
#define HCI_CMDCODE_WRITE_PAGE_SCAN_ACTIVITY                HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_PAGE_SCAN_ACTIVITY)
#define HCI_CMDCODE_READ_INQUIRY_SCAN_ACTIVITY              HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_INQUIRY_SCAN_ACTIVITY)
#define HCI_CMDCODE_WRITE_INQUIRY_SCAN_ACTIVITY             HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_INQUIRY_SCAN_ACTIVITY)
#define HCI_CMDCODE_READ_AUTHENTICATION_ENABLE              HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_AUTHENTICATION_ENABLE)
#define HCI_CMDCODE_WRITE_AUTHENTICATION_ENABLE             HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_AUTHENTICATION_ENABLE)
#define HCI_CMDCODE_READ_ENCRYPTION_MODE                    HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_ENCRYPTION_MODE)
#define HCI_CMDCODE_WRITE_ENCRYPTION_MODE                   HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_ENCRYPTION_MODE)
#define HCI_CMDCODE_READ_CLASS_OF_DEVICE                    HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_CLASS_OF_DEVICE)
#define HCI_CMDCODE_WRITE_CLASS_OF_DEVICE                   HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_CLASS_OF_DEVICE)
#define HCI_CMDCODE_READ_VOICE_SETTING                      HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_VOICE_SETTING)
#define HCI_CMDCODE_WRITE_VOICE_SETTING                     HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_VOICE_SETTING)
#define HCI_CMDCODE_READ_AUTOMATIC_FLUSH_TIMEOUT            HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_AUTOMATIC_FLUSH_TIMEOUT)
#define HCI_CMDCODE_WRITE_AUTOMATIC_FLUSH_TIMEOUT           HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_AUTOMATIC_FLUSH_TIMEOUT)
#define HCI_CMDCODE_READ_NUM_BROADCAST_RETRANSMISSIONS   	HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_NUM_BROADCAST_RETRANSMISSIONS)
#define HCI_CMDCODE_WRITE_NUM_BROADCAST_RETRANSMISSIONS  	HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_NUM_BROADCAST_RETRANSMISSIONS)
#define HCI_CMDCODE_READ_HOLD_MODE_ACTIVITY                 HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_HOLD_MODE_ACTIVITY)
#define HCI_CMDCODE_WRITE_HOLD_MODE_ACTIVITY                HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_HOLD_MODE_ACTIVITY)
#define HCI_CMDCODE_READ_TRANSMIT_POWER_LEVEL               HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_TRANSMIT_POWER_LEVEL)
#define HCI_CMDCODE_READ_SYNCHRONOUS_FLOW_CONTROL_ENABLE    HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_SYNCHRONOUS_FLOW_CONTROL_ENABLE)
#define HCI_CMDCODE_WRITE_SYNCHRONOUS_FLOW_CONTROL_ENABLE   HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_SYNCHRONOUS_FLOW_CONTROL_ENABLE)
#define HCI_CMDCODE_SET_CONTROLLER_TO_HOST_FLOW_CONTROL     HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_SET_CONTROLLER_TO_HOST_FLOW_CONTROL)
#define HCI_CMDCODE_HOST_BUFFER_SIZE                        HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_HOST_BUFFER_SIZE)
#define HCI_CMDCODE_HOST_NUMBER_OF_COMPLETED_PACKETS        HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_HOST_NUMBER_OF_COMPLETED_PACKETS)
#define HCI_CMDCODE_READ_LINK_SUPERVISION_TIMEOUT           HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_LINK_SUPERVISION_TIMEOUT)
#define HCI_CMDCODE_WRITE_LINK_SUPERVISION_TIMEOUT          HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_LINK_SUPERVISION_TIMEOUT)
#define HCI_CMDCODE_READ_NUMBER_OF_SUPPORTED_IAC            HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_NUMBER_OF_SUPPORTED_IAC)
#define HCI_CMDCODE_READ_CURRENT_IAC_LAP                    HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_CURRENT_IAC_LAP)
#define HCI_CMDCODE_WRITE_CURRENT_IAC_LAP                   HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_CURRENT_IAC_LAP)
#define HCI_CMDCODE_SET_AFH_HOST_CHANNEL_CLASSIFICATION     HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_SET_AFH_HOST_CHANNEL_CLASSIFICATION)
#define HCI_CMDCODE_READ_INQUIRY_SCAN_TYPE                  HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_INQUIRY_SCAN_TYPE)
#define HCI_CMDCODE_WRITE_INQUIRY_SCAN_TYPE                 HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_INQUIRY_SCAN_TYPE)
#define HCI_CMDCODE_READ_INQUIRY_MODE                       HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_INQUIRY_MODE)
#define HCI_CMDCODE_WRITE_INQUIRY_MODE                      HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_INQUIRY_MODE)
#define HCI_CMDCODE_READ_PAGE_SCAN_TYPE                     HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_PAGE_SCAN_TYPE)
#define HCI_CMDCODE_WRITE_PAGE_SCAN_TYPE                    HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_PAGE_SCAN_TYPE)
#define HCI_CMDCODE_READ_AFH_CHANNEL_ASSESSMENT_MODE        HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_AFH_CHANNEL_ASSESSMENT_MODE)
#define HCI_CMDCODE_WRITE_AFH_CHANNEL_ASSESSMENT_MODE       HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_AFH_CHANNEL_ASSESSMENT_MODE)
#define HCI_CMDCODE_READ_EXTENDED_INQUIRY_RESPONSE          HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_EXTENDED_INQUIRY_RESPONSE)
#define HCI_CMDCODE_WRITE_EXTENDED_INQUIRY_RESPONSE         HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_EXTENDED_INQUIRY_RESPONSE)
#define HCI_CMDCODE_REFRESH_ENCRYPTION_KEY                  HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_REFRESH_ENCRYPTION_KEY)
#define HCI_CMDCODE_READ_SIMPLE_PAIRING_MODE                HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_SIMPLE_PAIRING_MODE)
#define HCI_CMDCODE_WRITE_SIMPLE_PAIRING_MODE               HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_SIMPLE_PAIRING_MODE)
#define HCI_CMDCODE_READ_LOCAL_OOB_DATA                     HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_LOCAL_OOB_DATA)
#define HCI_CMDCODE_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL    HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL)
#define HCI_CMDCODE_WRITE_INQUIRY_TX_POWER_LEVEL            HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_INQUIRY_TX_POWER_LEVEL)
#define HCI_CMDCODE_READ_DEFAULT_ERRONEOUS_DATA_REPORTING   HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_DEFAULT_ERRONEOUS_DATA_REPORTING)
#define HCI_CMDCODE_WRITE_DEFAULT_ERRONEOUS_DATA_REPORTING  HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_DEFAULT_ERRONEOUS_DATA_REPORTING)
#define HCI_CMDCODE_ENHANCED_FLUSH                          HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_ENHANCED_FLUSH)
#define HCI_CMDCODE_SEND_KEYPRESS_NOTIFICATION              HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_SEND_KEYPRESS_NOTIFICATION)
#define HCI_CMDCODE_READ_LOGICAL_LINK_ACCEPT_TIMEOUT        HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_LOGICAL_LINK_ACCEPT_TIMEOUT)
#define HCI_CMDCODE_WRITE_LOGICAL_LINK_ACCEPT_TIMEOUT       HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_LOGICAL_LINK_ACCEPT_TIMEOUT)
#define HCI_CMDCODE_SET_EVENT_MASK_PAGE_2                   HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_SET_EVENT_MASK_PAGE_2)
#define HCI_CMDCODE_READ_LOCATION_DATA                      HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_LOCATION_DATA)
#define HCI_CMDCODE_WRITE_LOCATION_DATA                     HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_LOCATION_DATA)
#define HCI_CMDCODE_READ_FLOW_CONTROL_MODE                  HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_FLOW_CONTROL_MODE)
#define HCI_CMDCODE_WRITE_FLOW_CONTROL_MODE                 HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_FLOW_CONTROL_MODE)
#define HCI_CMDCODE_READ_ENHANCE_TRANSMIT_POWER_LEVEL       HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_ENHANCE_TRANSMIT_POWER_LEVEL)
#define HCI_CMDCODE_READ_BEST_EFFORT_FLUSH_TIMEOUT          HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_BEST_EFFORT_FLUSH_TIMEOUT)
#define HCI_CMDCODE_WRITE_BEST_EFFORT_FLUSH_TIMEOUT         HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_BEST_EFFORT_FLUSH_TIMEOUT)
#define HCI_CMDCODE_SHORT_RANGE_MODE                        HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_SHORT_RANGE_MODE)
#define HCI_CMDCODE_READ_LE_HOST_SUPPORT                    HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_READ_LE_HOST_SUPPORT)
#define HCI_CMDCODE_WRITE_LE_HOST_SUPPORT                   HCI_COMBINED_OPCODE(HCI_CMD_OGF_CTLR_AND_BB,HCI_CMD_OCF_WRITE_LE_HOST_SUPPORT)

/* HCI Information Parameter Command OpCode */
#define HCI_CMDCODE_READ_LOCAL_VERSION_INFORMATION          HCI_COMBINED_OPCODE(HCI_CMD_OGF_INFO_PARA,HCI_CMD_OCF_READ_LOCAL_VERSION_INFORMATION)
#define HCI_CMDCODE_READ_LOCAL_SUPPORTED_COMMANDS           HCI_COMBINED_OPCODE(HCI_CMD_OGF_INFO_PARA,HCI_CMD_OCF_READ_LOCAL_SUPPORTED_COMMANDS)
#define HCI_CMDCODE_READ_LOCAL_SUPPORTED_FEATURES           HCI_COMBINED_OPCODE(HCI_CMD_OGF_INFO_PARA,HCI_CMD_OCF_READ_LOCAL_SUPPORTED_FEATURES)
#define HCI_CMDCODE_READ_LOCAL_EXTENDED_FEATURES            HCI_COMBINED_OPCODE(HCI_CMD_OGF_INFO_PARA,HCI_CMD_OCF_READ_LOCAL_EXTENDED_FEATURES)
#define HCI_CMDCODE_READ_BUFFER_SIZE                        HCI_COMBINED_OPCODE(HCI_CMD_OGF_INFO_PARA,HCI_CMD_OCF_READ_BUFFER_SIZE)
#define HCI_CMDCODE_READ_BD_ADDR                            HCI_COMBINED_OPCODE(HCI_CMD_OGF_INFO_PARA,HCI_CMD_OCF_READ_BD_ADDR)
#define HCI_CMDCODE_READ_DATE_BLOCK_SIZE                    HCI_COMBINED_OPCODE(HCI_CMD_OGF_INFO_PARA,HCI_CMD_OCF_READ_DATE_BLOCK_SIZE)

/* HCI Status Parameter Command OpCode */
#define HCI_CMDCODE_READ_FAILED_CONTACT_COUNTER             HCI_COMBINED_OPCODE(HCI_CMD_OGF_STATUS_PARA,HCI_CMD_OCF_READ_FAILED_CONTACT_COUNTER)
#define HCI_CMDCODE_RESET_FAILED_CONTACT_COUNTER            HCI_COMBINED_OPCODE(HCI_CMD_OGF_STATUS_PARA,HCI_CMD_OCF_RESET_FAILED_CONTACT_COUNTER)
#define HCI_CMDCODE_READ_LINK_QUALITY                       HCI_COMBINED_OPCODE(HCI_CMD_OGF_STATUS_PARA,HCI_CMD_OCF_READ_LINK_QUALITY)
#define HCI_CMDCODE_READ_RSSI                               HCI_COMBINED_OPCODE(HCI_CMD_OGF_STATUS_PARA,HCI_CMD_OCF_READ_RSSI)
#define HCI_CMDCODE_READ_AFH_CHANNEL_MAP                    HCI_COMBINED_OPCODE(HCI_CMD_OGF_STATUS_PARA,HCI_CMD_OCF_READ_AFH_CHANNEL_MAP)
#define HCI_CMDCODE_READ_CLOCK                              HCI_COMBINED_OPCODE(HCI_CMD_OGF_STATUS_PARA,HCI_CMD_OCF_READ_CLOCK)
#define HCI_CMDCODE_READ_ENCRYPTION_KEY_SIZE                HCI_COMBINED_OPCODE(HCI_CMD_OGF_STATUS_PARA,HCI_CMD_OCF_READ_ENCRYPTION_KEY_SIZE)
#define HCI_CMDCODE_READ_LOCAL_AMP_INFO                     HCI_COMBINED_OPCODE(HCI_CMD_OGF_STATUS_PARA,HCI_CMD_OCF_READ_LOCAL_AMP_INFO)
#define HCI_CMDCODE_READ_LOCAL_AMP_ASSOC                    HCI_COMBINED_OPCODE(HCI_CMD_OGF_STATUS_PARA,HCI_CMD_OCF_READ_LOCAL_AMP_ASSOC)
#define HCI_CMDCODE_WRITE_REMOTE_AMP_ASSOC                  HCI_COMBINED_OPCODE(HCI_CMD_OGF_STATUS_PARA,HCI_CMD_OCF_WRITE_REMOTE_AMP_ASSOC)

/* HCI Test Command OpCode */
#define HCI_CMDCODE_READ_LOOPBACK_MODE                      HCI_COMBINED_OPCODE(HCI_CMD_OGF_TEST,HCI_CMD_OCF_READ_LOOPBACK_MODE)
#define HCI_CMDCODE_WRITE_LOOPBACK_MODE                     HCI_COMBINED_OPCODE(HCI_CMD_OGF_TEST,HCI_CMD_OCF_WRITE_LOOPBACK_MODE)
#define HCI_CMDCODE_ENABLE_DEVICE_UNDER_TEST_MODE           HCI_COMBINED_OPCODE(HCI_CMD_OGF_TEST,HCI_CMD_OCF_ENABLE_DEVICE_UNDER_TEST_MODE)
#define HCI_CMDCODE_WRITE_SIMPLE_PAIRING_DEBUG_MODE         HCI_COMBINED_OPCODE(HCI_CMD_OGF_TEST,HCI_CMD_OCF_WRITE_SIMPLE_PAIRING_DEBUG_MODE)
#define HCI_CMDCODE_ENABLE_AMP_RECEIVER_REPORTS             HCI_COMBINED_OPCODE(HCI_CMD_OGF_TEST,HCI_CMD_OCF_ENABLE_AMP_RECEIVER_REPORTS)
#define HCI_CMDCODE_AMP_TEST_END                            HCI_COMBINED_OPCODE(HCI_CMD_OGF_TEST,HCI_CMD_OCF_AMP_TEST_END)
#define HCI_CMDCODE_AMP_TEST                                HCI_COMBINED_OPCODE(HCI_CMD_OGF_TEST,HCI_CMD_OCF_AMP_TEST)

/* HCI LC Controller Command OpCode */
#define HCI_CMDCODE_LE_SET_EVENT_MASK                       HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_SET_EVENT_MASK)
#define HCI_CMDCODE_LE_READ_BUFFER_SIZE                     HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_READ_BUFFER_SIZE)
#define HCI_CMDCODE_LE_READ_LOCAL_SUPPORTED_FEATURES        HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_READ_LOCAL_SUPPORTED_FEATURES)
#define HCI_CMDCODE_LE_SET_RANDOM_ADDRESS                   HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_SET_RANDOM_ADDRESS)
#define HCI_CMDCODE_LE_SET_ADVERTISING_PARAMETER            HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_SET_ADVERTISING_PARAMETER)
#define HCI_CMDCODE_LE_READ_ADVERTISING_CHANNEL_TX_POWER    HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_READ_ADVERTISING_CHANNEL_TX_POWER)
#define HCI_CMDCODE_LE_SET_ADVERTISING_DATA                 HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_ADVERTISING_DATA)
#define HCI_CMDCODE_LE_SET_SCAN_RESPONSE_DATA               HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_SET_SCAN_RESPONSE_DATA)
#define HCI_CMDCODE_LE_SET_ADVERTISING_ENABLE               HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_SET_ADVERTISING_ENABLE)
#define HCI_CMDCODE_LE_SET_SCAN_PARAMETERS                  HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_SET_SCAN_PARAMETERS)
#define HCI_CMDCODE_LE_SET_SCAN_ENABLE                      HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_SET_SCAN_ENABLE)
#define HCI_CMDCODE_LE_CREATE_CONNECTION                    HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_CREATE_CONNECTION)
#define HCI_CMDCODE_LE_CREATE_CONNECTION_CANCEL             HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_CREATE_CONNECTION_CANCEL)
#define HCI_CMDCODE_LE_READ_WHITE_LIST_SIZE                 HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_READ_WHITE_LIST_SIZE)
#define HCI_CMDCODE_LE_CLEAR_WHITE_LIST                     HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_CLEAR_WHITE_LIST)
#define HCI_CMDCODE_LE_ADD_DEVICE_TO_WHITE_LIST             HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_ADD_DEVICE_TO_WHITE_LIST)
#define HCI_CMDCODE_LE_REMOVE_DEVICE_FROM_WHITE_LIST        HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_REMOVE_DEVICE_FROM_WHITE_LIST)
#define HCI_CMDCODE_LE_CONNECTION_UPDATE                    HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_CONNECTION_UPDATE)
#define HCI_CMDCODE_LE_SET_HOST_CHANNEL_CLASSIFICATION      HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_SET_HOST_CHANNEL_CLASSIFICATION)
#define HCI_CMDCODE_LE_READ_CHANNEL_MAP                     HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_READ_CHANNEL_MAP)
#define HCI_CMDCODE_LE_READ_REMOTE_USED_FEATURES            HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_READ_REMOTE_USED_FEATURES)
#define HCI_CMDCODE_LE_ENCRYPT                              HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_ENCRYPT)
#define HCI_CMDCODE_LE_RAND                                 HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_RAND)
#define HCI_CMDCODE_LE_START_ENCRYPTION                     HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_START_ENCRYPTION)
#define HCI_CMDCODE_LE_LONG_TERM_KEY_REQUEST_REPLY          HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_LONG_TERM_KEY_REQUEST_REPLY)
#define HCI_CMDCODE_LE_LONG_TERM_KEY_REQUEST_NEGATIVE_REPLY HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_LONG_TERM_KEY_REQUEST_NEGATIVE_REPLY)
#define HCI_CMDCODE_LE_READ_SUPPORTED_STATES                HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_READ_SUPPORTED_STATES)
#define HCI_CMDCODE_LE_RECEIVER_TEST                        HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_RECEIVER_TEST)
#define HCI_CMDCODE_LE_TRANSMITTER_TEST                     HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_TRANSMITTER_TEST)
#define HCI_CMDCODE_LE_TEST_END                             HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_TEST_END)

#define HCI_CMDCODE_LE_SET_DATA_LENGTH                      HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_SET_DATA_LENGTH)
#define HCI_CMDCODE_LE_READ_SUGGESTED_DEFAULT_DATA_LENGTH   HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_READ_SUGGESTED_DEFAULT_DATA_LENGTH)
#define HCI_CMDCODE_LE_WRITE_SUGGESTED_DEFAULT_DATA_LENGTH  HCI_COMBINED_OPCODE(HCI_CMD_OGF_LE_CTLR,HCI_CMD_OCF_LE_WRITE_SUGGESTED_DEFAULT_DATA_LENGTH)

/* The follow Command OpCodes are AIROHA proprietory */
/* HCI_CMD_OGF_AIROHA_VENDOR */
#define HCI_CMDCODE_VENDOR                                  HCI_COMBINED_OPCODE(HCI_CMD_OGF_AIROHA_VENDOR,HCI_CMD_OCF_AIROHA_VENDOR)
#define HCI_CMDCODE_MMI_SEND_TO_UART                        HCI_COMBINED_OPCODE(HCI_CMD_OGF_AIROHA_VENDOR,HCI_CMD_OCF_MMI_SEND_TO_UART)

/*
 * HCI Command Prototype
 */
typedef struct stru_hci_cmd_opcode
{
    U16 OCF : 10;
    U16 OGF :  6;

} HCI_CMD_OPCODE_STRU;

typedef union union_hci_cmd_opcode
{
    U16 value;
    HCI_CMD_OPCODE_STRU field;

} HCI_CMD_OPCODE_UNION;

typedef struct stru_hci_cmd_hdr
{
    HCI_CMD_OPCODE_UNION OpCode;
    U8 Len;

} HCI_CMD_HDR_STRU;

typedef struct stru_hci_cmd
{
    HCI_CMD_HDR_STRU Hdr;
    U8 Para[1];

} HCI_CMD_STRU, OS_PTR HCI_CMD_STRU_PTR;

/*
 * 1.01 HCI Inquiry Command
 */
typedef struct stru_hci_cmd_para_inq
{
    U8 Lap[3];
    U8 InquiryLength;
    U8 NumResponses;

} HCI_CMD_PARA_INQ_STRU;

typedef struct stru_hci_cmd_inq
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_INQ_STRU Para;

} HCI_CMD_INQ_STRU;

/*
 * 1.02 HCI Inquiry Cancel Command
 */
typedef struct stru_hci_cmd_rtn_para_inq_cancel
{
    U8 Status;

} HCI_CMD_RTN_PARA_INQ_CANCEL_STRU;

/*
 * 1.05 HCI Create Connection Command
 */
typedef struct stru_hci_cmd_para_create_conn
{
    U8 BdAddr[6];
    U8 PacketTypeB0;
    U8 PacketTypeB1;
    U8 PageScanRepetMode;
    U8 Reserved;
    U8 ClkOffsetB0;
    U8 ClkOffsetB1;
    U8 AllowRoleSwitch;

} HCI_CMD_PARA_CREATE_CONN_STRU;

typedef struct stru_hci_cmd_create_conn
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_CREATE_CONN_STRU Para;

} HCI_CMD_CREATE_CONN_STRU;

/*
 * 1.06 HCI Disconnect Command
 */
typedef struct stru_hci_cmd_para_disconn
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 Reason;

} HCI_CMD_PARA_DISCONNECT_STRU;

typedef struct stru_hci_cmd_disconn
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_DISCONNECT_STRU Para;

} HCI_CMD_DISCONNECT_STRU, OS_PTR HCI_CMD_DISCONNECT_STRU_PTR;

/*
 * 1.07 HCI Add SCO Connection Command (Deprecated)
 */
typedef struct stru_hci_cmd_para_add_sco_conn
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 PacketTypeB0;
    U8 PacketTypeB1;

} HCI_CMD_PARA_ADD_SCO_CONN_STRU;

typedef struct stru_hci_cmd_add_sco_conn
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_ADD_SCO_CONN_STRU Para;

} HCI_CMD_ADD_SCO_CONN_STRU;

/*
 * 1.08 HCI Create Connection Cancel Command
 */
typedef struct stru_hci_cmd_para_create_conn_cancel
{
    U8 BdAddr[6];

} HCI_CMD_PARA_CREATE_CONN_CANCEL_STRU;

typedef struct stru_hci_cmd_create_conn_cancel
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_CREATE_CONN_CANCEL_STRU Para;

} HCI_CMD_CREATE_CONN_CANCEL_STRU;

typedef struct stru_hci_cmd_rtn_para_create_conn_cancel
{
    U8 Status;
    U8 BdAddr[6];

} HCI_CMD_RTN_PARA_CREATE_CONN_CANCEL_STRU;

/*
 * 1.09 HCI Accept Connection Request Command
 */
 
enum enum_hci_cmd_accept_conn_req_role
{
    HCI_CMD_ACCEPT_CONN_REQ_ROLE_IS_MASTER    = (U8)0,
    HCI_CMD_ACCEPT_CONN_REQ_ROLE_IS_SLAVE     = (U8)1,
};

typedef struct stru_hci_cmd_para_accept_conn_req
{
    U8 BdAddr[6];
    U8 Role;

} HCI_CMD_PARA_ACCEPT_CONN_REQ_STRU;

typedef struct stru_hci_cmd_accept_conn_req
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_ACCEPT_CONN_REQ_STRU Para;

} HCI_CMD_ACCEPT_CONN_REQ_STRU;

/*
 * 1.0A HCI Reject Connection Request Command
 */
typedef struct stru_hci_cmd_para_rej_conn_req
{
    U8 BdAddr[6];
    U8 Reason;

} HCI_CMD_PARA_REJ_CONN_REQ_STRU;

typedef struct stru_hci_cmd_rej_conn_req
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_REJ_CONN_REQ_STRU Para;

} HCI_CMD_REJ_CONN_REQ_STRU;

/*
 * 1.0B HCI Link Key Request Reply Command
 */
typedef struct stru_hci_cmd_para_link_key_req_reply
{
    U8 BdAddr[6];
    U8 LinkKey[16];

} HCI_CMD_PARA_LINK_KEY_REQ_REPLY_STRU;

typedef struct stru_hci_cmd_link_key_req_reply
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LINK_KEY_REQ_REPLY_STRU Para;

} HCI_CMD_LINK_KEY_REQ_REPLY_STRU;

typedef struct stru_hci_cmd_rtn_para_link_key_req_reply
{
    U8 Status;
    U8 BdAddr[6];

} HCI_CMD_RTN_PARA_LINK_KEY_REQ_REPLY_STRU;

/*
 * 1.0C HCI Link Key Request Negative Reply Command
 */
typedef struct stru_hci_cmd_para_link_key_req_neg_reply
{
    U8 BdAddr[6];

} HCI_CMD_PARA_LINK_KEY_REQ_NEG_REPLY_STRU;

typedef struct stru_hci_cmd_link_key_req_neg_reply
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LINK_KEY_REQ_NEG_REPLY_STRU Para;

} HCI_CMD_LINK_KEY_REQ_NEG_REPLY_STRU;

typedef struct stru_hci_cmd_rtn_para_link_key_req_neg_reply
{
    U8 Status;
    U8 BdAddr[6];

} HCI_CMD_RTN_PARA_LINK_KEY_REQ_NEG_REPLY_STRU;

/*
 * 1.0D HCI PIN Code Request Reply Command
 */
typedef struct stru_hci_cmd_para_pin_code_req_reply
{
    U8 BdAddr[6];
    U8 PinCodeLen;
    U8 PinCode[16];

} HCI_CMD_PARA_PIN_CODE_REQ_REPLY_STRU;

typedef struct stru_hci_cmd_pin_code_req_reply
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_PIN_CODE_REQ_REPLY_STRU Para;

} HCI_CMD_PIN_CODE_REQ_REPLY_STRU;

typedef struct stru_hci_cmd_rtn_para_pin_code_req_reply
{
    U8 Status;
    U8 BdAddr[6];

} HCI_CMD_RTN_PARA_PIN_CODE_REQ_REPLY_STRU;

/*
 * 1.0E HCI PIN Code Request Negative Reply Command
 */
typedef struct stru_hci_cmd_para_pin_code_req_neg_reply
{
    U8 BdAddr[6];

} HCI_CMD_PARA_PIN_CODE_REQ_NEG_REPLY_STRU;

typedef struct stru_hci_cmd_pin_code_req_neg_reply
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_PIN_CODE_REQ_NEG_REPLY_STRU Para;

} HCI_CMD_PIN_CODE_REQ_NEG_REPLY_STRU;

typedef struct stru_hci_cmd_rtn_para_pin_code_req_neg_reply
{
    U8 Status;
    U8 BdAddr[6];

} HCI_CMD_RTN_PARA_PIN_CODE_REQ_NEG_REPLY_STRU;

/*
 * 1.0F HCI Change Connection Packet Type Command
 */
typedef struct stru_hci_cmd_para_change_conn_pkt_type
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 PacketTypeB0;
    U8 PacketTypeB1;

} HCI_CMD_PARA_CHANGE_CONN_PKT_TYPE_STRU;

typedef struct stru_hci_cmd_change_conn_pkt_type
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_CHANGE_CONN_PKT_TYPE_STRU Para;

} HCI_CMD_CHANGE_CONN_PKT_TYPE_STRU;

/*
 * 1.11 Authentication Requested Command
 */
 typedef struct stru_hci_cmd_para_authentication_requested
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_PARA_AUTHENTICATION_REQUESTED_STRU;

typedef struct stru_hci_cmd_authentication_requested
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_AUTHENTICATION_REQUESTED_STRU Para;

} HCI_CMD_AUTHENTICATION_REQUESTED_STRU;

/*
 * 1.13 Set Connection Encryption Command
 */
 typedef struct stru_hci_cmd_para_set_conn_encryption
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 EncryptionEnable;

} HCI_CMD_PARA_SET_CONN_ENCRYPTION_STRU;

typedef struct stru_hci_cmd_set_conn_encryption
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_SET_CONN_ENCRYPTION_STRU Para;

} HCI_CMD_SET_CONN_ENCRYPTION_STRU;

/*
 * 1.19 HCI Remote Name Request Command
 */
typedef struct stru_hci_cmd_para_remote_name_req
{
    U8 BdAddr[6];
    U8 PageScanRepetMode;
    U8 Reserved;
    U8 ClkOffset[2];

} HCI_CMD_PARA_REMOTE_NAME_REQ_STRU;

typedef struct stru_hci_cmd_remote_name_req
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_REMOTE_NAME_REQ_STRU Para;

} HCI_CMD_REMOTE_NAME_REQ_STRU;

/*
 * 1.1A HCI Remote Name Request Cancel Command
 */
typedef struct stru_hci_cmd_para_remote_name_req_cancel
{
    U8 BdAddr[6];

} HCI_CMD_PARA_REMOTE_NAME_REQ_CANCEL_STRU;

typedef struct stru_hci_cmd_remote_name_req_cancel
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_REMOTE_NAME_REQ_CANCEL_STRU Para;

} HCI_CMD_REMOTE_NAME_REQ_CANCEL_STRU;

typedef struct stru_hci_cmd_rtn_para_remote_name_req_cancel
{
    U8 Status;
    U8 BdAddr[6];

} HCI_CMD_RTN_PARA_REMOTE_NAME_REQ_CANCEL_STRU;

/*
 * 1.1C HCI Read Remote Extended Features Command
 */
typedef struct stru_hci_cmd_para_rd_remote_extend_fea
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 PageNum;

} HCI_CMD_PARA_RD_REMOTE_EXTEND_FEA_STRU;

typedef struct stru_hci_cmd_rd_remote_extend_fea
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RD_REMOTE_EXTEND_FEA_STRU Para;

} HCI_CMD_RD_REMOTE_EXTEND_FEA_STRU;

/*
 * 1.1D HCI Read Remote Version Information Command
 */
typedef struct stru_hci_cmd_para_rd_remote_ver_info
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_PARA_RD_REMOTE_VER_INFO_STRU;

typedef struct stru_hci_cmd_rd_remote_ver_info
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RD_REMOTE_VER_INFO_STRU Para;

} HCI_CMD_RD_REMOTE_VER_INFO_STRU, OS_PTR HCI_CMD_RD_REMOTE_VER_INFO_STRU_PTR;

/*
 * 1.20 HCI Read LMP Handle Command
 */
typedef struct stru_hci_cmd_para_rd_lmp_hdl
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_PARA_RD_LMP_HDL_STRU;

typedef struct stru_hci_cmd_rd_lmp_hdl
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RD_LMP_HDL_STRU Para;

} HCI_CMD_RD_LMP_HDL_STRU;

typedef struct stru_hci_cmd_rtn_para_rd_lmp_hdl
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 LmpHdl;
    U8 RSVD;

} HCI_CMD_RTN_PARA_RD_LMP_HDL_STRU;

/*
 * 1.28 HCI Setup Synchronous Connection Command
 */
typedef struct stru_hci_cmd_para_setup_sco_conn
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 TxBandwidth[4];
    U8 RxBandwidth[4];
    U8 MaxLatencyB0;
    U8 MaxLatencyB1;
    U8 VoiceSettingB0;
    U8 VoiceSettingB1;
    U8 ReTxEffort;
    U8 PacketTypeB0;
    U8 PacketTypeB1;

} HCI_CMD_PARA_SETUP_SCO_CONN_STRU;

typedef struct stru_hci_cmd_setup_sco_conn
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_SETUP_SCO_CONN_STRU Para;

} HCI_CMD_SETUP_SCO_CONN_STRU;

/*
 * 1.29 HCI Accept Synchronous Connection Request Command
 */
typedef struct stru_hci_cmd_para_acp_sco_conn_req
{
    U8 BdAddr[6];
    U8 TxBandwidth[4];
    U8 RxBandwidth[4];
    U8 MaxLatencyB0;
    U8 MaxLatencyB1;
	U8 ContentFormatB0;
	U8 ContentFormatB1;
    U8 ReTxEffort;
    U8 PacketTypeB0;
    U8 PacketTypeB1;
} HCI_CMD_PARA_ACP_SCO_CONN_REQ_STRU;

/*
 * 1.2A HCI Reject Synchronous Connection Request Command
 */
typedef struct stru_hci_cmd_para_rej_sco_conn_req
{
    U8 BdAddr[6];
    U8 Reason;

} HCI_CMD_PARA_REJ_SCO_CONN_REQ_STRU;

typedef struct stru_hci_cmd_rej_sco_conn_req
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_REJ_SCO_CONN_REQ_STRU Para;

} HCI_CMD_REJ_SCO_CONN_REQ_STRU;

/*
 * 1.2B HCI IO Capability Request Reply Command
 */
typedef struct stru_hci_cmd_para_io_capability_req_reply
{
    U8 BdAddr[6];
    U8 IoCapability;
    U8 OobDataPresent;
    U8 AuthRequire;

} HCI_CMD_PARA_IO_CAPABILITY_REQ_REPLY_STRU;

typedef struct stru_hci_cmd_io_capability_req_reply
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_IO_CAPABILITY_REQ_REPLY_STRU Para;

} HCI_CMD_IO_CAPABILITY_REQ_REPLY_STRU;

/*
 * 1.2C HCI User Confirmation Request Reply Command
 */
typedef struct stru_hci_cmd_para_user_confirm_req_reply
{
    U8 BdAddr[6];

} HCI_CMD_PARA_USER_CONFIRM_REQ_REPLY_STRU;

typedef struct stru_hci_cmd_user_confirm_req_reply
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_USER_CONFIRM_REQ_REPLY_STRU Para;

} HCI_CMD_USER_CONFIRM_REQ_REPLY_STRU;

typedef struct stru_hci_cmd_rtn_para_user_confirm_req_reply
{
    U8 Status;
    U8 BdAddr[6];

} HCI_CMD_RTN_PARA_USER_CONFIRM_REQ_REPLY_STRU;

/*
 * 1.2D HCI User Confirmation Request Negative Reply Command
 */
typedef struct stru_hci_cmd_para_user_confirm_req_neg_reply
{
    U8 BdAddr[6];

} HCI_CMD_PARA_USER_CONFIRM_REQ_NEG_REPLY_STRU;

typedef struct stru_hci_cmd_user_confirm_req_neg_reply
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_USER_CONFIRM_REQ_NEG_REPLY_STRU Para;

} HCI_CMD_USER_CONFIRM_REQ_NEG_REPLY_STRU;

typedef struct stru_hci_cmd_rtn_para_user_confirm_req_neg_reply
{
    U8 Status;
    U8 BdAddr[6];

} HCI_CMD_RTN_PARA_USER_CONFIRM_REQ_NEG_REPLY_STRU;

/*
 * 1.2E HCI User Passkey Request Reply Command
 */
typedef struct stru_hci_cmd_para_user_passkey_req_reply
{
    U8 BdAddr[6];
    U8 NumericValue[4];

} HCI_CMD_PARA_USER_PASSKEY_REQ_REPLY_STRU;

typedef struct stru_hci_cmd_user_passkey_req_reply
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_USER_PASSKEY_REQ_REPLY_STRU Para;

} HCI_CMD_USER_PASSKEY_REQ_REPLY_STRU;

typedef struct stru_hci_cmd_rtn_para_user_passkey_req_reply
{
    U8 Status;
    U8 BdAddr[6];

} HCI_CMD_RTN_PARA_USER_PASSKEY_REQ_REPLY_STRU;

/*
 * 1.2F HCI User Passkey Request Negative Reply Command
 */
typedef struct stru_hci_cmd_para_user_passkey_req_neg_reply
{
    U8 BdAddr[6];

} HCI_CMD_PARA_USER_PASSKEY_REQ_NEG_REPLY_STRU;

typedef struct stru_hci_cmd_user_passkey_req_neg_reply
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_USER_PASSKEY_REQ_NEG_REPLY_STRU Para;

} HCI_CMD_USER_PASSKEY_REQ_NEG_REPLY_STRU;

typedef struct stru_hci_cmd_rtn_para_user_passkey_req_neg_reply
{
    U8 Status;
    U8 BdAddr[6];

} HCI_CMD_RTN_PARA_USER_PASSKEY_REQ_NEG_REPLY_STRU;

/*
 * 1.30 HCI Remote OOB Data Request Reply Command
 */
typedef struct stru_hci_cmd_para_remote_oob_data_req_reply
{
    U8 BdAddr[6];
    U8 C[16];
    U8 R[16];

} HCI_CMD_PARA_REMOTE_OOB_DATA_REQ_REPLY_STRU;

typedef struct stru_hci_cmd_remote_oob_data_req_reply
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_REMOTE_OOB_DATA_REQ_REPLY_STRU Para;

} HCI_CMD_REMOTE_OOB_DATA_REQ_REPLY_STRU;

typedef struct stru_hci_cmd_rtn_para_remote_oob_data_req_reply
{
    U8 Status;
    U8 BdAddr[6];

} HCI_CMD_RTN_PARA_REMOTE_OOB_DATA_REQ_REPLY_STRU;

/*
 * 1.34 HCI IO Capability Request Negative Reply Command
 */
typedef struct stru_hci_cmd_para_io_capability_req_neg_reply
{
    U8 BdAddr[6];
    U8 Reason;

} HCI_CMD_PARA_IO_CAPABILITY_REQ_NEG_REPLY_STRU;

typedef struct stru_hci_cmd_io_capability_req_neg_reply
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_IO_CAPABILITY_REQ_NEG_REPLY_STRU Para;

} HCI_CMD_IO_CAPABILITY_REQ_NEG_REPLY_STRU;

/*
 * 2.01 HCI Hold Mode Command
 */
typedef struct stru_hci_cmd_para_hold_mode
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 HoldModeMaxIntervalB0;
    U8 HoldModeMaxIntervalB1;
    U8 HoldModeMinIntervalB0;
    U8 HoldModeMinIntervalB1;

} HCI_CMD_PARA_HOLD_MODE_STRU;

typedef struct stru_hci_cmd_hold_mode
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_HOLD_MODE_STRU Para;

} HCI_CMD_HOLD_MODE_STRU;

/*
 * 2.03 HCI Sniff Mode Command
 */
typedef struct stru_hci_cmd_para_sniff_mode
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 SniffMaxIntervalB0;
    U8 SniffMaxIntervalB1;
    U8 SniffMinIntervalB0;
    U8 SniffMinIntervalB1;
	U8 SniffAttemptB0;
	U8 SniffAttemptB1;
	U8 SniffTimeOutB0;
	U8 SniffTimeOutB1;
} HCI_CMD_PARA_SNIFF_MODE_STRU;

typedef struct stru_hci_cmd_sniff_mode
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_SNIFF_MODE_STRU Para;

} HCI_CMD_SNIFF_MODE_STRU;

/*
 * 2.04 HCI Exit Sniff Mode Command
 */
typedef struct stru_hci_cmd_para_exit_sniff_mode
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
} HCI_CMD_PARA_EXIT_SNIFF_MODE_STRU;

typedef struct stru_hci_cmd_exit_sniff_mode
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_EXIT_SNIFF_MODE_STRU Para;

} HCI_CMD_EXIT_SNIFF_MODE_STRU;

/*
 * 2.07 HCI QoS Setup Command
 */
enum
{
	SERVICE_TYPE_NO_TRAFFIC = 0x00,
	SERVICE_TYPE_BEST_EFFORT = 0x01,
	SERVICE_TYPE_GUARANTEED = 0x02
};

typedef struct stru_hci_cmd_para_qos_setup
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 Flag;
    U8 ServiceType;
    U8 TokenRate[4];
    U8 PeakBandwidth[4];
    U8 Latency[4];
    U8 DelayVariation[4];

} HCI_CMD_PARA_QOS_SETUP_STRU;

typedef struct stru_hci_cmd_qos_setup
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_QOS_SETUP_STRU Para;

} HCI_CMD_QOS_SETUP_STRU;

/*
 * 2.09 HCI Role Discovery Command
 */
typedef struct stru_hci_cmd_para_role_discovery
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_PARA_ROLE_DISCOVERY_STRU;

typedef struct stru_hci_cmd_role_discovery
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_ROLE_DISCOVERY_STRU Para;

} HCI_CMD_ROLE_DISCOVERY_STRU;

typedef struct stru_hci_cmd_rtn_para_role_discovery
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 CurrRole;

} HCI_CMD_RTN_PARA_ROLE_DISCOVERY_STRU;

enum enum_hci_evt_curr_role
{
    HCI_EVT_CURRENT_ROLE_IS_MASTER    = (U8)0,
    HCI_EVT_CURRENT_ROLE_IS_SLAVE     = (U8)1,
};

/*
 * 2.0B HCI Switch Role Command
 */
 
 enum enum_hci_cmd_switch_role
{
    HCI_CMD_SWITCH_ROLE_IS_MASTER    = (U8)0,
    HCI_CMD_SWITCH_ROLE_IS_SLAVE     = (U8)1,
};

typedef struct stru_hci_cmd_para_switch_role
{
    U8 BdAddr[6];
    U8 Role;

} HCI_CMD_PARA_SWITCH_ROLE_STRU;

typedef struct stru_hci_cmd_switch_role
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_SWITCH_ROLE_STRU Para;

} HCI_CMD_SWITCH_ROLE_STRU;

/*
 * 2.0C HCI Read Link Policy Settings Command
 */
typedef struct stru_hci_cmd_para_rd_link_policy_setting
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_PARA_RD_LINK_POLICY_SETTING_STRU;

typedef struct stru_hci_cmd_rd_link_policy_setting
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RD_LINK_POLICY_SETTING_STRU Para;

} HCI_CMD_RD_LINK_POLICY_SETTING_STRU;

typedef struct stru_hci_cmd_rtn_para_rd_link_policy_setting
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 LinkPolicySettingB0;
    U8 LinkPolicySettingB1;

} HCI_CMD_RTN_PARA_RD_LINK_POLICY_SETTING_STRU;

/*
 * 2.0D HCI Write Link Policy Settings Command
 */
typedef struct stru_hci_cmd_para_wr_policy_setting
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 LinkPolicySettingB0;
    U8 LinkPolicySettingB1;

} HCI_CMD_PARA_WR_LINK_POLICY_SETTING_STRU;

typedef struct stru_hci_cmd_wr_link_policy_setting
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_LINK_POLICY_SETTING_STRU Para;

} HCI_CMD_WR_LINK_POLICY_SETTING_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_link_policy_setting
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_RTN_PARA_WR_LINK_POLICY_SETTING_STRU;

/*
 * 2.0E HCI Read Default Link Policy Settings Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_dflt_policy_setting
{
    U8 Status;
    U8 DfltLinkPolicySettingB0;
    U8 DfltLinkPolicySettingB1;

} HCI_CMD_RTN_PARA_RD_DFLT_LINK_POLICY_SETTING_STRU;

/*
 * 2.0F HCI Write Default Link Policy Settings Command
 */
typedef struct stru_hci_cmd_para_wr_dflt_link_policy_setting
{
    U8 DfltLinkPolicySettingB0;
    U8 DfltLinkPolicySettingB1;

} HCI_CMD_PARA_WR_DFLT_LINK_POLICY_SETTING_STRU;

typedef struct stru_hci_cmd_wr_dflt_link_policy_setting
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_DFLT_LINK_POLICY_SETTING_STRU Para;

} HCI_CMD_WR_DFLT_LINK_POLICY_SETTING_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_dflt_link_policy_setting
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_DFLT_LINK_POLICY_SETTING_STRU;

/*
 * 2.11 HCI Sniff Subrating Command
 */
typedef struct stru_hci_cmd_para_sniff_subrating
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
	U8 MaxLatencyB0;
	U8 MaxLatencyB1;
	U8 MinRemoteTimeOutB0;
	U8 MinRemoteTimeOutB1;
	U8 MinLocalTimeOutB0;
	U8 MinLocalTimeOutB1;

} HCI_CMD_PARA_SNIFF_SUBRATING_STRU;

typedef struct stru_hci_cmd_sniff_subrating
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_SNIFF_SUBRATING_STRU Para;

} HCI_CMD_SNIFF_SUBRATING_STRU;

/*
 * 3.01 HCI Set Event Mask Command
 */
typedef struct stru_hci_cmd_para_set_evt_mask
{
    U8 EvtMask[8];

} HCI_CMD_PARA_SET_EVT_MASK;

typedef struct stru_hci_cmd_set_evt_mask
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_SET_EVT_MASK Para;

} HCI_CMD_SET_EVT_MASK_STRU, OS_PTR HCI_CMD_SET_EVT_MASK_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_set_evt_mask
{
    U8 Status;

} HCI_CMD_RTN_PARA_SET_EVT_MASK_STRU;

/*
 * 3.03 HCI Reset Command
 */
typedef struct stru_hci_cmd_rtn_para_rst
{
    U8 Status;

} HCI_CMD_RTN_PARA_RST_STRU;

/*
 * 3.05 HCI Set Event Filter Command
 */
#define HCI_CMD_SET_EVENT_FILTER__FILTER_TYPE(param_ptr)                    (*(param_ptr))
#define HCI_CMD_SET_EVENT_FILTER__FILTER_CONDITION_TYPE(param_ptr)          (*(param_ptr + 1))
#define HCI_CMD_SET_EVENT_FILTER__FILTER_CONDITION_TYPE_PTR(param_ptr)      ((param_ptr + 1))
#define HCI_CMD_SET_EVENT_FILTER__CONDITION_PTR(param_ptr)                  ((param_ptr + 2))
#define HCI_CMD_SET_EVENT_FILTER__CONDITION(param_ptr)  (*(param_ptr + 2))
#define GET_EVENT_FILTER_ARRAY_IDX(filterType) (filterType-1) //filterType must be larger than 1, e.g., inquiry = 0, connection = 1
#define HCI_FILTER_TYPE__CLEAR_ALL_FILTER                                   0
#define HCI_FILTER_TYPE__INQUIRY_RESULT                                     1
#define HCI_FILTER_TYPE__CONNECTION_SETUP                                   2
#define HCI_FILTER_CONDITION_TYPE__CLEAR_FILTER                             0
#define HCI_FILTER_CONDITION_TYPE__ACCEPT_ALL                               0
#define HCI_FILTER_CONDITION_TYPE__SPECIFIC_COD                             1
#define HCI_FILTER_CONDITION_TYPE__SPECIFIC_BD_ADDR                         2
#define HCI_CONNECTION_SETUP_FILTER_CONDITION_TYPE__ALL_DEVICE              0x00
typedef union union_hci_filter_condition
{
    struct
    {
        U8 CoD[3];
        U8 CoDMask[3];
    } InquiryRstFilterType1;

    struct
    {
        U8 BdAddr[6];
    } InquiryRstFilterType2;

    struct
    {
        U8 AutoAcceptFlag;
    } ConnSetupFilterType0;

    struct
    {
        U8 CoD[3];
        U8 CoDMask[3];
        U8 AutoAcceptFlag;
    } ConnSetupFilterType1;

} HCI_FILTER_COND_UNION;

enum enum_hci_evt_filter_type
{
    HCI_EVT_FILTER_TYPE_CLEAR_ALL_FILTER    = (U8)0,
    HCI_EVT_FILTER_TYPE_INQUIRY_RST         = (U8)1,
    HCI_EVT_FILTER_TYPE_CONNECTION_SETUP    = (U8)2,
};

enum enum_hci_evt_filter_condition_type
{
    HCI_EVT_FILTER_CONDITION_TYPE_ALLOW_ALL         = (U8)0,
    HCI_EVT_FILTER_CONDITION_TYPE_SPECIFIC_COD      = (U8)1,
    HCI_EVT_FILTER_CONDITION_TYPE_SPECIFIC_BDADDR   = (U8)2,
};

typedef struct stru_hci_cmd_para_set_evt_filter
{
    U8 FilterType;
    U8 FilterConditionType;
    HCI_FILTER_COND_UNION Condition;

} HCI_CMD_PARA_SET_EVT_FILTER_STRU;

typedef struct stru_hci_cmd_set_evt_filter
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_SET_EVT_FILTER_STRU Para;

} HCI_CMD_SET_EVT_FILTER_STRU;

typedef struct stru_hci_cmd_rtn_para_set_evt_filter
{
    U8 Status;

} HCI_CMD_RTN_PARA_SET_EVT_FILTER_STRU;

/*
 * 3.08 HCI Flush Command
 */
typedef struct stru_hci_cmd_para_flush
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    BTCLK_UNION TimeStamp;

} HCI_CMD_PARA_FLUSH_STRU;

typedef struct stru_hci_cmd_flush
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_FLUSH_STRU Para;

} HCI_CMD_FLUSH_STRU;

typedef struct stru_hci_cmd_rtn_para_flush
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_RTN_PARA_FLUSH_STRU;

/*
 * 3.09 HCI Read PIN Type Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_pin_type
{
    U8 Status;
    U8 PinType;

} HCI_CMD_RTN_PARA_RD_PIN_TYPE_STRU;

/*
 * 3.0A HCI Write PIN Type Command
 */
typedef struct stru_hci_cmd_para_wr_pin_type
{
    U8 PinType;

} HCI_CMD_PARA_WR_PIN_TYPE_STRU;

typedef struct stru_hci_cmd_wr_pin_type
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_PIN_TYPE_STRU Para;

} HCI_CMD_WR_PIN_TYPE_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_pin_type
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_PIN_TYPE_STRU;

/*
 * 3.0B HCI Create New Unit Key Command
 */
typedef struct stru_hci_cmd_rtn_para_create_new_unit_key
{
    U8 Status;

} HCI_CMD_RTN_PARA_CREATE_NEW_UNIT_KEY_STRU;

/*
 * 3.0D HCI Read Stored Link Key Command
 */
typedef struct stru_hci_cmd_para_rd_stored_link_key
{
    U8 BdAddr[6];
    U8 RdAllFlag;

} HCI_CMD_PARA_RD_STORED_LINK_KEY_STRU;

typedef struct stru_hci_cmd_rd_stored_link_key
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RD_STORED_LINK_KEY_STRU Para;

} HCI_CMD_RD_STORED_LINK_KEY_STRU;

typedef struct stru_hci_cmd_rtn_para_rd_stored_link_key
{
    U8 Status;
    U8 MaxNumKeysB0;
    U8 MaxNumKeysB1;
    U8 NumKeysRdB0;
    U8 NumKeysRdB1;

} HCI_CMD_RTN_PARA_RD_STORED_LINK_KEY_STRU;

/*
 * 3.11 HCI Write Stored Link Key Command
 */
typedef struct stru_hci_cmd_para_wr_stored_link_key
{
    U8 NumKeysToWr;
    LINK_KEY_INFO_STRU KeyInfo[1];

} HCI_CMD_PARA_WR_STORED_LINK_KEY_STRU;

typedef struct stru_hci_cmd_wr_stored_link_key
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_STORED_LINK_KEY_STRU Para;

} HCI_CMD_WR_STORED_LINK_KEY_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_stored_link_key
{
    U8 Status;
    U8 NumKeysWr;

} HCI_CMD_RTN_PARA_WR_STORED_LINK_KEY_STRU;

/*
 * 3.12 HCI Delete Stored Link Key Command
 */
typedef struct stru_hci_cmd_para_del_stored_link_key
{
    U8 BdAddr[6];
    U8 DelAllFlag;

} HCI_CMD_PARA_DEL_STORED_LINK_KEY_STRU;

typedef struct stru_hci_cmd_del_stored_link_key
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_DEL_STORED_LINK_KEY_STRU Para;

} HCI_CMD_DEL_STORED_LINK_KEY_STRU;

typedef struct stru_hci_cmd_rtn_para_del_stored_link_key
{
    U8 Status;
    U8 NumKeysDelB0;
    U8 NumKeysDelB1;

} HCI_CMD_RTN_PARA_DEL_STORED_LINK_KEY_STRU;

/*
 * 3.13 HCI Write Local Name Command
 */
#ifndef HCI_LOCAL_NAME_LEN
#define HCI_LOCAL_NAME_LEN 248
#else
#error "HCI_LOCAL_NAME_LEN has been defined"
#endif

typedef struct stru_hci_cmd_para_wr_local_name
{
    U8 LocalName[HCI_LOCAL_NAME_LEN];

} HCI_CMD_PARA_WR_LOCAL_NAME_STRU;

typedef struct stru_hci_cmd_wr_local_name
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_LOCAL_NAME_STRU Para;

} HCI_CMD_WR_LOCAL_NAME_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_local_name
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_LOCAL_NAME_STRU;

/*
 * 3.14 Read Local Name Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_local_name
{
    U8 Status;
    U8 LocalName[HCI_LOCAL_NAME_LEN];

} HCI_CMD_RTN_PARA_RD_LOCAL_NAME_STRU;

/*
 * 3.15 Read Connection Accept Timeout Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_conn_accept_to
{
    U8 Status;
    U8 ConnAcceptToB0;
    U8 ConnAcceptToB1;

} HCI_CMD_RTN_PARA_RD_CONN_ACCEPT_TO_STRU;

/*
 * 3.16 Write Connection Accept Timeout Command
 */
typedef struct stru_hci_cmd_para_wr_conn_accept_to
{
    U8 ConnAcceptToB0;
    U8 ConnAcceptToB1;

} HCI_CMD_PARA_WR_CONN_ACCEPT_TO_STRU;

typedef struct stru_hci_cmd_wr_conn_accept_to
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_CONN_ACCEPT_TO_STRU Para;

} HCI_CMD_WR_CONN_ACCEPT_TO_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_conn_accept_to
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_CONN_ACCEPT_TO_STRU;

/*
 * 3.17 HCI Read Page Timeout Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_page_to
{
    U8 Status;
    U8 PageToB0;
    U8 PageToB1;

} HCI_CMD_RTN_PARA_RD_PAGE_TO_STRU;

/*
 * 3.18 HCI Write Page Timeout Command
 */
typedef struct stru_hci_cmd_para_wr_page_to
{
    U8 PageToB0;
    U8 PageToB1;

} HCI_CMD_PARA_WR_PAGE_TO_STRU;

typedef struct stru_hci_cmd_wr_page_to
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_PAGE_TO_STRU Para;

} HCI_CMD_WR_PAGE_TO_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_page_to
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_PAGE_TO_STRU;

/*
 * 3.19 HCI Read Scan Enable
 */
typedef struct stru_hci_cmd_rtn_para_rd_scan_enable
{
    U8 Status;
    U8 ScanEnable;

} HCI_CMD_RTN_PARA_RD_SCAN_ENABLE_STRU;

/*
 * 3.1A HCI Write Scan Enable
 */
typedef struct stru_hci_cmd_para_wr_scan_enable
{
    U8 ScanEnable;

} HCI_CMD_PARA_WR_SCAN_ENABLE_STRU;

typedef struct stru_hci_cmd_wr_scan_enable
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_SCAN_ENABLE_STRU Para;

} HCI_CMD_WR_SCAN_ENABLE_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_scan_enable
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_SCAN_ENABLE;

/*
 * 3.1B HCI Read Page Scan Activity
 */
typedef struct stru_hci_cmd_rtn_para_rd_page_scan_activity
{
    U8 Status;
    U8 PageScanIntervalB0;
    U8 PageScanIntervalB1;
    U8 PageScanWindowB0;
    U8 PageScanWindowB1;

} HCI_CMD_RTN_PARA_RD_PAGE_SCAN_ACTIVITY_STRU;

/*
 * 3.1C HCI Write Page Scan Activity
 */
#define HC_R0_MODE                          0
#define HC_R1_MODE                          1
#define HC_R2_MODE                          2

typedef struct stru_hci_cmd_para_wr_page_scan_activity
{
    U8 PageScanIntervalB0;
    U8 PageScanIntervalB1;
    U8 PageScanWindowB0;
    U8 PageScanWindowB1;

} HCI_CMD_PARA_WR_PAGE_SCAN_ACTIVITY_STRU;

typedef struct stru_hci_cmd_wr_page_scan_activity
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_PAGE_SCAN_ACTIVITY_STRU Para;

} HCI_CMD_WR_PAGE_SCAN_ACTIVITY_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_page_scan_activity
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_PAGE_SCAN_ACTIVTITY_STRU;

/*
 * 3.1D HCI Read Inquiry Scan Activity Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_inq_scan_activity
{
    U8 Status;
    U8 InqScanIntervalB0;
    U8 InqScanIntervalB1;
    U8 InqScanWindowB0;
    U8 InqScanWindowB1;

} HCI_CMD_RTN_PARA_RD_INQ_SCAN_ACTIVITY_STRU;

/*
 * 3.1E HCI Write Inquiry Scan Activity Command
 */
typedef struct stru_hci_cmd_para_wr_inq_scan_activity
{
    U8 InqScanIntervalB0;
    U8 InqScanIntervalB1;
    U8 InqScanWindowB0;
    U8 InqScanWindowB1;

} HCI_CMD_PARA_WR_INQ_SCAN_ACTIVITY_STRU;

typedef struct stru_hci_cmd_wr_inq_scan_activity
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_INQ_SCAN_ACTIVITY_STRU Para;

} HCI_CMD_WR_INQ_SCAN_ACTIVITY_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_inq_scan_activity
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_INQ_SCAN_ACTIVTITY_STRU;

/*
 * 3.1F HCI Read Authentication Enable Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_auth_enable
{
    U8 Status;
    U8 AuthEnable;

} HCI_CMD_RTN_PARA_RD_AUTH_ENABLE_STRU;

/*
 * 3.20 HCI Write Authentication Enable Command
 */
typedef struct stru_hci_cmd_para_wr_auth_enable
{
    U8 AuthEnable;

} HCI_CMD_PARA_WR_AUTH_ENABLE_STRU;

typedef struct stru_hci_cmd_wr_auth_enable
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_AUTH_ENABLE_STRU Para;

} HCI_CMD_WR_AUTH_ENABLE_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_auth_enable
{
    U8 Status;

} HCI_CMD_RTN_PARA_AUTH_ENABLE_STRU;

/*
 * 3.22 HCI Write Encryption Mode Command
 */
typedef struct stru_hci_cmd_para_wr_encrypt_mode
{
    U8 EncryptMode;

} HCI_CMD_PARA_WR_ENCRYPT_MODE_STRU;

typedef struct stru_hci_cmd_wr_encrypt_mode
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_ENCRYPT_MODE_STRU Para;

} HCI_CMD_WR_ENCRYPT_MODE_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_encrypt_mode
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_ENCRYPT_MODE_STRU;

/*
 * 3.23 HCI Read Class of Device Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_cod
{
    U8 Status;
    U8 ClassOfDevice[3];

} HCI_CMD_RTN_PARA_RD_COD_STRU;

/*
 * 3.24 HCI Write Class of Device Command
 */
typedef struct stru_hci_cmd_para_wr_cod
{
    U8 ClassOfDevice[3];

} HCI_CMD_PARA_WR_COD_STRU;

typedef struct stru_hci_cmd_wr_cod
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_COD_STRU Para;

} HCI_CMD_WR_COD_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_cod
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_COD_STRU;

/*
 * 3.25 HCI Read Voice Setting Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_voice_setting
{
    U8 Status;
    U8 VoiceSettingB0;
    U8 VoiceSettingB1;

} HCI_CMD_RTN_PARA_RD_VOICE_SETTING_STRU;

/*
 * 3.26 HCI Write Voice Setting Command
 */
typedef struct stru_hci_cmd_para_wr_voice_setting
{
    U8 VoiceSettingB0;
    U8 VoiceSettingB1;

} HCI_CMD_PRAR_WR_VOICE_SETTING_STRU;

typedef struct stru_hci_cmd_wr_voice_setting
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PRAR_WR_VOICE_SETTING_STRU Para;

} HCI_CMD_WR_VOICE_SETTING_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_voice_setting
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_VOICE_SETTING_STRU;

/*
 * 3.27 HCI Read Automatic Flush Timeout Command
 */
typedef struct stru_hci_cmd_para_rd_auto_flush_to
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_PARA_RD_AUTO_FLUSH_TO_STRU;

typedef struct stru_hci_cmd_rd_auto_flush_to
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RD_AUTO_FLUSH_TO_STRU Para;

} HCI_CMD_RD_AUTO_FLUSH_TO_STRU;

typedef struct stru_hci_cmd_rtn_para_rd_auto_flush_to
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 FlushToB0;
    U8 FlushToB1;

} HCI_CMD_RTN_PARA_RD_AUTO_FLUSH_TO_STRU;

/*
 * 3.28 HCI Write Automatic Flush Timeout Command
 */
typedef struct stru_hci_cmd_para_wr_auto_flush_to
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 FlushToB0;
    U8 FlushToB1;

} HCI_CMD_PARA_WR_AUTO_FLUSH_TO_STRU;

typedef struct stru_hci_cmd_wr_auto_flush_to
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_AUTO_FLUSH_TO_STRU Para;

} HCI_CMD_WR_AUTO_FLUSH_TO_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_auto_flush_to
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_RTN_PARA_WR_AUTO_FLUSH_TO_STRU;

/*
 * 3.29 HCI Read Num Broadcast Retransmissions Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_num_bc_rtx
{
    U8 Status;
    U8 NumBcRtx;

} HCI_CMD_RTN_PARA_RD_NUM_BC_RTX_STRU;

/*
 * 3.2A HCI Write Num Broadcast Retransmissions Command
 */
typedef struct stru_hci_cmd_para_wr_num_bc_rtx
{
    U8 NumBcRtx;

} HCI_CMD_PARA_WR_NUM_BC_RTX_STRU;

typedef struct stru_hci_cmd_wr_num_bc_rtx
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_NUM_BC_RTX_STRU Para;

} HCI_CMD_WR_NUM_BC_RTX_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_num_bc_rtx
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_NUM_BC_RTX_STRU;

/*
 * 3.2B HCI Read Hold Mode Activity Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_hold_mode_activity
{
    U8 Status;
    U8 HoldModeAcitivty;

} HCI_CMD_RTN_PARA_RD_HOLD_MODE_ACTIVITY_STRU;

/*
 * 3.2C HCI Write Hold Mode Activity Command
 */
typedef struct stru_hci_cmd_para_wr_hold_mode_activity
{
    U8 HoldModeActivity;

} HCI_CMD_PARA_WR_HOLD_MODE_ACTIVITY_STRU;

typedef struct stru_hci_cmd_wr_hold_mode_activity
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_HOLD_MODE_ACTIVITY_STRU Para;

} HCI_CMD_WR_HOLD_MODE_ACTIVITY_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_hold_mode_activity
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_HOLD_MODE_ACTIVITY_STRU;

/*
 * 3.2D HCI Read Transmit Power Level Command
 */
typedef struct stru_hci_cmd_para_rd_tx_pwr_lv
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 Type;

} HCI_CMD_PARA_RD_TX_PWR_LV_STRU;

typedef struct stru_hci_cmd_rd_tx_pwr_lv
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RD_TX_PWR_LV_STRU Para;

} HCI_CMD_RD_TX_PWR_LV_STRU;

typedef struct stru_hci_cmd_rtn_para_rd_tx_pwr_lv
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 TxPwrLv;

} HCI_CMD_RTN_PARA_RD_TX_PWR_LV_STRU;

enum enum_tx_pw_lv_type
{
    HCI_CURR_TX_PW_LV   = (U8)0,
    HCI_MAX_TX_PW_LV    = (U8)1,
};

/*
 * 3.33 HCI Host Buffer Size Command
 */
typedef struct stru_hci_cmd_para_host_buf_size
{
    U8 HostAclDataPktLenB0;
    U8 HostAclDataPktLenB1;
    U8 HostSyncDataPktLen;
    U8 HostTotalNumAclDataPktB0;
    U8 HostTotalNumAclDataPktB1;
    U8 HostTotalNumSyncDataPktB0;
    U8 HostTotalNumSyncDataPktB1;

} HCI_CMD_PARA_HOST_BUF_SIZE_STRU;

typedef struct stru_hci_cmd_host_buf_size
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_HOST_BUF_SIZE_STRU Para;

} HCI_CMD_HOST_BUF_SIZE_STRU;

typedef struct stru_hci_cmd_rtn_para_host_buf_size
{
    U8 Status;

} HCI_CMD_RTN_PARA_HOST_BUF_SIZE_STRU;

/*
 * 3.36 HCI Read Link Supervision Timeout Command
 */
typedef struct stru_hci_cmd_para_rd_link_supervision_to
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_PARA_RD_LINK_SUPERVISION_TO_STRU;

typedef struct stru_hci_cmd_rd_link_supervision_to
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RD_LINK_SUPERVISION_TO_STRU Para;

} HCI_CMD_RD_LINK_SUPERVISION_TO_STRU;

typedef struct stru_hci_cmd_rtn_para_rd_link_supervision_to
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 LinkSupervisionToB0;
    U8 LinkSupervisionToB1;

} HCI_CMD_RTN_PARA_RD_LINK_SUPERVISION_TO_STRU;

/*
 * 3.37 HCI Write Link Supervision Timeout Command
 */
typedef struct stru_hci_cmd_para_wr_link_supervision_to
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 LinkSupervisionToB0;
    U8 LinkSupervisionToB1;

} HCI_CMD_PARA_WR_LINK_SUPERVISION_TO_STRU;

typedef struct stru_hci_cmd_wr_link_supervision_to
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_LINK_SUPERVISION_TO_STRU Para;

} HCI_CMD_WR_LINK_SUPERVISION_TO_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_link_supervision_to
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_RTN_PARA_WR_LINK_SUPERVISION_TO_STRU;

/*
 * 3.38 HCI Read Number Of Supported IAC Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_num_of_supp_iac
{
    U8 Status;
    U8 NumSuppIac;

} HCI_CMD_RTN_PARA_RD_NUM_OF_SUPP_IAC_STRU;

/*
 * 3.39 HCI Read Current IAC LAP Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_curr_iac_lap
{
    U8 Status;
    U8 NumCurrIac;
    LAP_ARR Lap[1];

} HCI_CMD_RTN_PARA_RD_CURR_IAC_LAP_STRU;

/*
 * 3.3A HCI Write Current IAC LAP Commnad
 */
typedef struct stru_hci_cmd_para_wr_curr_iac_lap
{
    U8 NumCurrIAC;
    LAP_ARR Lap[1];

} HCI_CMD_PARA_WR_CURR_IAC_LAP_STRU;

typedef struct stru_hci_cmd_wr_curr_iac_lap
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_CURR_IAC_LAP_STRU Para;

} HCI_CMD_WR_CURR_IAC_LAP_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_curr_iac_lap
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_CURR_IAC_LAP_STRU;

/*
 * 3.3F HCI Set AFH Host Channel Classification Command
 */
typedef struct stru_hci_cmd_para_set_afh_host_ch_classification
{
    BT_CH_MAP_ARR ChClassification;

} HCI_CMD_PARA_SET_AFH_HOST_CH_CLASSIFICATION_STRU;

typedef struct stru_hci_cmd_set_afh_host_ch_classification
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_SET_AFH_HOST_CH_CLASSIFICATION_STRU Para;

} HCI_CMD_SET_AFH_HOST_CH_CLASSIFICATION_STRU;

typedef struct stru_hci_cmd_rtn_para_set_afh_host_ch_classification
{
    U8 Status;

} HCI_CMD_RTN_PARA_SET_AFH_HOST_CH_CLASSIFICATION_STRU;

/*
 * 3.42 HCI Read Inquiry Scan Type Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_inq_scan_type
{
    U8 Status;
    U8 InqScanType;

} HCI_CMD_RTN_PARA_RD_INQ_SCAN_TYPE_STRU;

/*
 * 3.43 HCI Write Inquiry Scan Type Command
 */
typedef struct stru_hci_cmd_para_wr_inq_scan_type
{
    U8 ScanType;

} HCI_CMD_PARA_WR_INQ_SCAN_TYPE_STRU;

typedef struct stru_hci_cmd_wr_inq_scan_type
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_INQ_SCAN_TYPE_STRU Para;

} HCI_CMD_WR_INQ_SCAN_TYPE_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_inq_scan_type
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_INQ_SCAN_TYPE_STRU;

/*
 * 3.44 HCI Read Inquiry Mode Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_inq_mode
{
	U8 Status;
    U8 InqMode;

} HCI_CMD_RTN_PARA_RD_INQ_MODE_STRU;

/*
 * 3.45 HCI Write Inquiry Mode Command
 */
typedef struct stru_hci_cmd_para_wr_inq_mode
{
    U8 InqMode;

} HCI_CMD_PARA_WR_INQ_MODE_STRU;

typedef struct stru_hci_cmd_wr_inq_mode
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_INQ_MODE_STRU Para;

} HCI_CMD_WR_INQ_MODE_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_inq_mode
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_INQ_MODE_STRU;

enum enum_inq_mode
{
	HCI_INQ_MODE_STANDARD 	    = (U8)0,
	HCI_INQ_MODE_RSSI 	        = (U8)1,
	HCI_INQ_MODE_RSSI_OR_EXTEND = (U8)2,
};

/*
 * 3.46 HCI Write Page Scan Type Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_page_scan_type
{
    U8 Status;
    U8 PageScanType;

} HCI_CMD_RTN_PARA_RD_PAGE_SCAN_TYPE_STRU;

/*
 * 3.47 HCI Write Page Scan Type Command
 */
typedef struct stru_hci_cmd_para_wr_page_scan_type
{
    U8 PageScanType;

} HCI_CMD_PARA_WR_PAGE_SCAN_TYPE_STRU;

typedef struct stru_hci_cmd_wr_page_scan_type
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_PAGE_SCAN_TYPE_STRU Para;

} HCI_CMD_WR_PAGE_SCAN_TYPE_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_page_scan_type
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_PAGE_SCAN_TYPE_STRU;

/*
 * 3.48 HCI Read AFH Channel Assessment Mode
 */
typedef struct stru_hci_cmd_rtn_para_rd_afh_ch_assess_mode
{
    U8 Status;
    U8 AfhChAssessMode;

} HCI_CMD_RTN_PARA_RD_AFH_CH_ASSESS_MODE_STRU;

/*
 * 3.49 HCI Write AFH Channel Assessment Mode
 */
typedef struct stru_hci_cmd_para_wr_afh_ch_assess_mode
{
    U8 AfhChAssessMode;

} HCI_CMD_PARA_WR_AFH_CH_ASSESS_MODE_STRU;

typedef struct stru_hci_cmd_wr_afh_ch_assess_mode
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_AFH_CH_ASSESS_MODE_STRU Para;

} HCI_CMD_WR_AFH_CH_ASSESS_MODE_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_afh_ch_assess_mode
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_AFH_CH_ASSESS_MODE_STRU;

/*
 * 3.51 HCI Read Extended Inquiry Response Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_eir
{
    U8 Status;
    U8 FecReq;
    U8 Eir[240];

} HCI_CMD_RTN_PARA_RD_EIR_STRU;

/*
 * 3.52 HCI Write Extended Inquiry Response Command
 */
typedef struct stru_hci_cmd_para_wr_eir
{
    U8 FecReq;
    U8 Eir[240];

} HCI_CMD_PARA_WR_EIR_STRU;

typedef struct stru_hci_cmd_wr_eir
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_EIR_STRU Para;

} HCI_CMD_WR_EIR_STRU, OS_PTR HCI_CMD_WR_EIR_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_wr_eir
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_EIR_STRU;

/*
 * 3.53 HCI Refresh Encryption Key Command
 */
typedef struct stru_hci_cmd_para_refresh_enc_key
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_PARA_REFRESH_ENC_KEY_STRU;

typedef struct stru_hci_cmd_refresh_enc_key
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_REFRESH_ENC_KEY_STRU Para;

} HCI_CMD_REFRESH_ENC_KEY_STRU;

/*
 * 3.55 HCI Read Simple Pairing Mode Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_simple_pairing_mode
{
    U8 Status;
    U8 SimplePairingMode;

} HCI_CMD_RTN_PARA_RD_SIMPLE_PAIRING_MODE_STRU;

/*
 * 3.56 HCI Write Simple Pairing Mode Command
 */
typedef struct stru_hci_cmd_para_wr_simple_pairing_mode
{
    U8 SimplePairingMode;

} HCI_CMD_PARA_WR_SIMPLE_PAIRING_MODE_STRU;

typedef struct stru_hci_cmd_wr_simple_pairing_mode
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_SIMPLE_PAIRING_MODE_STRU Para;

} HCI_CMD_WR_SIMPLE_PAIRING_MODE_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_simple_pairing_mode
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_SIMPLE_PAIRING_MODE_STRU;

/*
 * 3.57 HCI Read Local OOB Data Command
 */
typedef struct stru_hci_cmd_trn_para_rd_local_oob_data
{
    U8 Status;
    U8 C[16];
    U8 R[16];

} HCI_CMD_RTN_PARA_RD_LOCAL_OOB_DATA_STRU;

/*
 * 3.58 HCI Read Inquiry Response Transmit Power Level Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_inq_rsp_tx_pwr_lv
{
    U8 Status;
    U8 TxPwrLv;

} HCI_CMD_RTN_PARA_RD_INQ_RSP_TX_PWR_LV_STRU;

/*
 * 3.59 HCI Write Inquiry Transmit Power Level Command
 */
typedef struct stru_hci_cmd_para_wr_inq_tx_pwr_lv
{
    U8 TxPwrLv;

} HCI_CMD_PARA_WR_INQ_TX_PWR_LV_STRU;

typedef struct stru_hci_cmd_wr_inq_tx_pwr_lv
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_INQ_TX_PWR_LV_STRU Para;

} HCI_CMD_WR_INQ_TX_PWR_LV_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_inq_tx_pwr_lv
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_INQ_TX_PWR_LV_STRU;

/*
 * 3.5F HCI Enhanced Flush Command
 */
typedef struct stru_hci_cmd_para_enhanced_flush
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 PktType;
    BTCLK_UNION TimeStamp;
} HCI_CMD_PARA_ENHANCED_FLUSH_STRU;

typedef struct stru_hci_cmd_enhanced_flush
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_ENHANCED_FLUSH_STRU Para;

} HCI_CMD_ENHANCED_FLUSH_STRU;

/*
 * 3.60 HCI Send Keypress Notification Command
 */
typedef struct stru_hci_cmd_para_sd_keypress_notify
{
    U8 BdAddr[6];
    U8 NotificationType;

} HCI_CMD_PARA_SD_KEYPRESS_NOTIFY_STRU;

typedef struct stru_hci_cmd_sd_keypress_notify
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_SD_KEYPRESS_NOTIFY_STRU Para;

} HCI_CMD_SD_KEYPRESS_NOTIFY_STRU;

typedef struct stru_hci_cmd_rtn_para_sd_keypress_notify
{
    U8 Status;
    U8 BdAddr[6];

} HCI_CMD_RTN_PARA_SD_KEYPRESS_NOTIFY_STRU;

/*
 * 3.68 HCI Read Enhanced Transmit Power Level Command
 */
typedef struct stru_hci_cmd_para_rd_enhanced_tx_pwr_lv
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 Type;

} HCI_CMD_PARA_RD_ENHANCED_TX_PWR_LV_STRU;

typedef struct stru_hci_cmd_rd_enhanced_tx_pwr_lv
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RD_ENHANCED_TX_PWR_LV_STRU Para;

} HCI_CMD_RD_ENHANCED_TX_PWR_LV_STRU;

typedef struct stru_hci_cmd_rtn_para_rd_enhanced_tx_pwr_lv
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 TxPwrLvGFSK;
    U8 TxPwrLvDQPSK;
    U8 TxPwrLv8DPSK;

} HCI_CMD_RTN_PARA_RD_ENHANCED_TX_PWR_LV_STRU;

/*
 * 3.6C HCI Read LE Host Supported Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_le_host_supp
{
    U8 Status;
    U8 LeSuppHost;
    U8 SimuLeHost;

} HCI_CMD_RTN_PARA_RD_LE_HOST_SUPP_STRU;

/*
 * 3.6D HCI Write LE Host Supported Command
 */
typedef struct stru_hci_cmd_para_wr_le_host_supp
{
    U8 LeSuppHost;
    U8 SimuLeHost;

} HCI_CMD_PARA_WR_LE_HOST_SUPP_STRU;

typedef struct stru_hci_cmd_wr_le_host_supp
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_LE_HOST_SUPP_STRU Para;

} HCI_CMD_WR_LE_HOST_SUPP_STRU, OS_PTR HCI_CMD_WR_LE_HOST_SUPP_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_wr_le_host_supp
{
    U8 Status;

} HCI_CMD_RTN_PARA_LE_HOST_SUPP_STRU;

/*
 * 4.01 HCI Read Local Version Information Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_local_ver_info
{
    U8 Status;
    U8 HciVersion;
    U8 HciRevisionB0;
    U8 HciRevisionB1;
    U8 LmpVersion;
    U8 CompIdB0;
    U8 CompIdB1;
    U8 LmpSubVersNrB0;
    U8 LmpSubVersNrB1;

} HCI_CMD_RTN_PARA_RD_LOCAL_VER_INFO_STRU;

/*
 * 4.02 HCI Read Local Supported Commands Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_local_supp_cmd
{
    U8 Status;
    U8 SuppCmd[64];

} HCI_CMD_RTN_PARA_RD_LOCAL_SUPP_CMD_STRU;

/*
 * 4.03 HCI Read Local Supported Features Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_local_supp_fea
{
    U8 Status;
    U8 LmpFeature[8];

} HCI_CMD_RTN_PARA_RD_LOCAL_SUPP_FEA_STRU;

/*
 * 4.04 HCI Read Local Extended Features Command
 */
typedef struct stru_hci_cmd_para_rd_local_ext_fea
{
    U8 PageNum;

} HCI_CMD_PARA_RD_LOCAL_EXT_FEA_STRU;

typedef struct stru_hci_cmd_rd_local_ext_fea
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RD_LOCAL_EXT_FEA_STRU Para;

} HCI_CMD_RD_LOCAL_EXT_FEA_STRU, OS_PTR HCI_CMD_RD_LOCAL_EXT_FEA_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_rd_local_ext_fea
{
    U8 Status;
    U8 PageNum;
    U8 MaxPageNum;
    U8 ExtLmpFeature[8];

} HCI_CMD_RTN_PARA_RD_LOCAL_EXT_FEA_STRU;

/*
 * 4.05 HCI Read Buffer Size Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_buf_size
{
    U8 Status;
    U8 HcAclDataPktLenB0;
    U8 HcAclDataPktLenB1;
    U8 HcSyncDataPktLen;
    U8 HcTotalNumAclDataPktB0;
    U8 HcTotalNumAclDataPktB1;
    U8 HcTotalNumSyncDataPktB0;
    U8 HcTotalNumSyncDataPktB1;

} HCI_CMD_RTN_PARA_RD_BUF_SIZE_STRU;

/*
 * 4.09 HCI Read BD ADDR Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_bd_addr
{
    U8 Status;
    U8 BdAddr[6];

} HCI_CMD_RTN_PARA_RD_BD_ADDR_STRU;

/*
 * 4.0A HCI Read Data Block Size Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_data_blk_size
{
    U8 Status;
    U8 MaxAclDataPktLenB0;
    U8 MaxAclDataPktLenB1;
    U8 DataBlkLenB0;
    U8 DataBlkLenB1;
    U8 TotalNumDataBlkB0;
    U8 TotalNumDataBlkB1;

} HCI_CMD_RTN_PARA_RD_DATA_BLK_SIZE_STRU;

/*
 * 5.01 HCI Read Failed Contact Counter Command
 */
typedef struct stru_hci_cmd_para_rd_fail_contact_cnt
{
    U8 HandleB0;
    U8 HandleB1;

} HCI_CMD_PARA_RD_FAIL_CONTACT_CNT_STRU;

typedef struct stru_hci_cmd_rd_fail_contact_cnt
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RD_FAIL_CONTACT_CNT_STRU Para;

} HCI_CMD_RD_FAIL_CONTACT_CNT_STRU;

typedef struct stru_hci_cmd_rtn_para_rd_fail_contact_cnt
{
    U8 Status;
    U8 HandleB0;
    U8 HandleB1;
    U8 FailContactCntB0;
    U8 FailContactCntB1;

} HCI_CMD_RTN_PARA_RD_FAIL_CONTACT_CNT_STRU;

/*
 * 5.02 HCI Reset Failed Contact Counter Command
 */
typedef struct stru_hci_cmd_para_rst_fail_contact_cnt
{
    U8 HandleB0;
    U8 HandleB1;

} HCI_CMD_PARA_RST_FAIL_CONTACT_CNT_STRU;

typedef struct stru_hci_cmd_rst_fail_contact_cnt
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RST_FAIL_CONTACT_CNT_STRU Para;

} HCI_CMD_RST_FAIL_CONTACT_CNT_STRU;

typedef struct stru_hci_cmd_rtn_para_rst_fail_contact_cnt
{
    U8 Status;
    U8 HandleB0;
    U8 HandleB1;

} HCI_CMD_RTN_PARA_RST_FAIL_CONTACT_CNT_STRU;

/*
 * 5.03 HCI Read Link Quality Command
 */
typedef struct stru_hci_cmd_para_rd_link_qlty
{
    U8 HandleB0;
    U8 HandleB1;

} HCI_CMD_PARA_RD_LINK_QLTY_STRU;

typedef struct stru_hci_cmd_rd_link_qlty
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RD_LINK_QLTY_STRU Para;

} HCI_CMD_RD_LINK_QLTY_STRU;

typedef struct stru_hci_cmd_rtn_para_rd_link_qlty
{
    U8 Status;
    U8 HandleB0;
    U8 HandleB1;
    U8 LinkQlty;

} HCI_CMD_RTN_PARA_RD_LINK_QLTY_STRU;

/*
 * 5.05 HCI Read RSSI Command
 */
typedef struct stru_hci_cmd_para_rd_rssi
{
    U8 HandleB0;
    U8 HandleB1;

} HCI_CMD_PARA_RD_RSSI_STRU;

typedef struct stru_hci_cmd_rd_rssi
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RD_RSSI_STRU Para;

} HCI_CMD_RD_RSSI_STRU;

typedef struct stru_hci_cmd_rtn_para_rd_rssi
{
    U8 Status;
    U8 HandleB0;
    U8 HandleB1;
    U8 RSSI;

} HCI_CMD_RTN_PARA_RD_RSSI_STRU;

/*
 * 5.06 HCI Read AFH Channel Map Command
 */
typedef struct stru_hci_cmd_para_rd_afh_ch_map
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_PARA_RD_AFH_CH_MAP_STRU;

typedef struct stru_hci_cmd_rd_afh_ch_map
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RD_AFH_CH_MAP_STRU Para;

} HCI_CMD_RD_AFH_CH_MAP_STRU;

typedef struct stru_hci_cmd_rtn_para_rd_afh_ch_map
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 AfhMode;
    U8 AfhChMap[10];

} HCI_CMD_RTN_PARA_RD_AFH_CH_MAP_STRU;

/*
 * 5.07 HCI Read Clock Command
 */
typedef struct stru_hci_cmd_para_rd_clk
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 WhichClk;

} HCI_CMD_PARA_RD_CLK_STRU;

typedef struct stru_hci_cmd_rd_clk
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RD_CLK_STRU Para;

} HCI_CMD_RD_CLK_STRU;

typedef struct stru_hci_cmd_rtn_para_rd_clk
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 Clock[4];
    U8 AccuracyB0;
    U8 AccuracyB1;

} HCI_CMD_RTN_PARA_RD_CLK_STRU;

enum enum_which_clk
{
	HCI_WHICH_CLK_LOCAL_CLK 	= (U8)0,
	HCI_WHICH_CLK_PICONET_CLK 	= (U8)1,
};

/*
 * 5.08 HCI Read Ecryption Key Size Command
 */
typedef struct stru_hci_cmd_para_rd_encrypt_key_size
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_PARA_RD_ENCRYPT_KEY_SIZE_STRU;

typedef struct stru_hci_cmd_rd_encrypt_key_size
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_RD_ENCRYPT_KEY_SIZE_STRU Para;

} HCI_CMD_RD_ENCRYPT_KEY_SIZE_STRU;

typedef struct stru_hci_cmd_rtn_para_rd_encrypt_key_size
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 KeySize;

} HCI_CMD_RTN_PARA_RD_ENCRYPT_KEY_SIZE_STRU;

/*
 * 6.01 HCI Read Loopback Mode Command
 */
typedef struct stru_hci_cmd_rtn_para_rd_lb_mode
{
    U8 Status;
    U8 LbMode;

} HCI_CMD_RTN_PARA_RD_LB_MODE_STRU;

enum enum_lb_mode
{
	HCI_LB_MODE_NO_LB_MODE_ENABLED	= (U8)0,
	HCI_LB_MODE_ENABLE_LOCAL_LB		= (U8)1,
	HCI_LB_MODE_ENABLE_REMOTE_LB	= (U8)2,
};

/*
 * 6.02 HCI Write Loopback Mode Command
 */
typedef struct stru_hci_cmd_para_wr_lb_mode
{
    U8 LbMode;

} HCI_CMD_PARA_WR_LB_MODE_STRU;

typedef struct stru_hci_cmd_wr_lb_mode
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_LB_MODE_STRU Para;

} HCI_CMD_WR_LB_MODE_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_lb_mode
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_LB_MODE_STRU;

/*
 * 6.03 HCI Write Loopback Mode Command
 */
typedef struct stru_hci_cmd_rtn_para_enable_device_under_test_mode
{
    U8 Status;

} HCI_CMD_RTN_PARA_ENABLE_DEVICE_UNDER_TEST_MODE_STRU;

/*
 * 6.04 HCI Write Simple Pairing Debug Mode Command
 */
typedef struct stru_hci_cmd_para_wr_simple_pairing_dbg_mode
{
    U8 SimplePairingDbgMode;

} HCI_CMD_PARA_WR_SIMPLE_PAIRING_DBG_MODE_STRU;

typedef struct stru_hci_cmd_wr_simple_pairing_dbg_mode
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_WR_SIMPLE_PAIRING_DBG_MODE_STRU Para;

} HCI_CMD_WR_SIMPLE_PAIRING_DBG_MODE_STRU;

typedef struct stru_hci_cmd_rtn_para_wr_simple_pairing_dbg_mode
{
    U8 Status;

} HCI_CMD_RTN_PARA_WR_SIMPLE_PAIRING_DBG_MODE_STRU;

/*
 * 08.01 HCI LE Set Event Mask Command
 */
typedef struct stru_hci_cmd_para_le_set_evt_mask
{
    U8 LeEvtMask[8];

} HCI_CMD_PARA_LE_SET_EVT_MASK_STRU;

typedef struct stru_hci_cmd_le_set_evt_mask
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_SET_EVT_MASK_STRU Para;

} HCI_CMD_LE_SET_EVT_MASK_STRU, OS_PTR HCI_CMD_LE_SET_EVT_MASK_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_le_set_evt_mask
{
    U8 Status;

} HCI_CMD_RTN_PARA_LE_SET_EVT_MASK_STRU;

/*
 * 08.02 HCI LE Read Buffer Size Command
 */
typedef struct stru_hci_cmd_rtn_para_le_rd_buf_size
{
    U8 Status;
    U8 HcLeAclDataPktLenB0;
    U8 HcLeAclDataPktLenB1;
    U8 HcLeTotalNumAclDataPkt;

} HCI_CMD_RTN_PARA_LE_RD_BUF_SIZE_STRU;

/*
 * 08.03 HCI LE Read Local Supported Features Command
 */
typedef struct stru_hci_cmd_rtn_para_le_rd_local_supp_fea
{
    U8 Status;
    U8 LeFeature[8];

} HCI_CMD_RTN_PARA_LE_RD_LOCAL_SUPP_FEA_STRU;

/*
 * 08.05 HCI LE Set Random Address Command
 */
typedef struct stru_hci_cmd_para_le_set_rand_addr
{
    U8 RandAddr[6];

} HCI_CMD_PARA_LE_SET_RAND_ADDR_STRU;

typedef struct stru_hci_cmd_le_set_rand_addr
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_SET_RAND_ADDR_STRU Para;

} HCI_CMD_LE_SET_RAND_ADDR_STRU, OS_PTR HCI_CMD_LE_SET_RAND_ADDR_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_le_set_rand_addr
{
    U8 Status;

} HCI_CMD_RTN_PARA_LE_SET_RAND_ADDR_STRU;

/*
 * 08.06 HCI LE Set Advertising Parameters Command
 */
typedef struct stru_hci_cmd_para_le_set_adv_para
{
    U8 AdvIntervalMinB0;
    U8 AdvIntervalMinB1;
    U8 AdvIntervalMaxB0;
    U8 AdvIntervalMaxB1;
    U8 AdvType;
    U8 OwnAddrType;
    U8 DirectAddrType;
    U8 DirectAddr[6];
    U8 AdvChMap;
    U8 AdvFilterPolicy;

} HCI_CMD_PARA_LE_SET_ADV_PARA_STRU;

typedef struct stru_hci_cmd_le_set_adv_para
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_SET_ADV_PARA_STRU Para;

} HCI_CMD_LE_SET_ADV_PARA_STRU;

typedef struct stru_hci_cmd_rtn_para_le_set_adv_para
{
    U8 Status;

} HCI_CMD_RTN_PARA_LE_SET_ADV_PARA_STRU;

/*
 * 08.07 HCI LE Read Advertising Channel Tx Power Command
 */
typedef struct stru_hci_cmd_rtn_para_le_rd_adv_ch_tx_pwr
{
    U8 Status;
    U8 TxPwrLv;

} HCI_CMD_RTN_PARA_LE_RD_ADV_CH_TX_PWR_STRU;

/*
 * 08.08 HCI LE Set Advertising Data Command
 */
typedef struct stru_hci_cmd_para_le_set_adv_data
{
    U8 AdvDataLen;
    U8 AdvData[31];

} HCI_CMD_PARA_LE_SET_ADV_DATA_STRU;

typedef struct stru_hci_cmd_le_set_adv_data
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_SET_ADV_DATA_STRU Para;

} HCI_CMD_LE_SET_ADV_DATA_STRU, OS_PTR HCI_CMD_LE_SET_ADV_DATA_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_le_set_adv_data
{
    U8 Status;

} HCI_CMD_RTN_PARA_LE_SET_ADV_DATA_STRU;

/*
 * 08.09 HCI LE Set Scan Response Data
 */
typedef struct stru_hci_cmd_para_le_set_scan_rsp_data
{
    U8 ScanRspDataLen;
    U8 ScanRspData[31];

} HCI_CMD_PARA_LE_SET_SCAN_RSP_DATA_STRU;

typedef struct stru_hci_cmd_le_set_scan_rsp_data
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_SET_SCAN_RSP_DATA_STRU Para;

} HCI_CMD_LE_SET_SCAN_RSP_DATA_STRU, OS_PTR HCI_CMD_LE_SET_SCAN_RSP_DATA_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_le_set_scan_rsp_data
{
    U8 Status;

} HCI_CMD_RTN_PARA_LE_SET_SCAN_RSP_DATA_STRU;

/*
 * 08.0A HCI LE Set Advertise Enable Command
 */
typedef struct stru_hci_cmd_para_le_set_adv_enable
{
    U8 AdvEnable;

} HCI_CMD_PARA_LE_SET_ADV_ENABLE_STRU;

typedef struct stru_hci_cmd_le_set_adv_enable
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_SET_ADV_ENABLE_STRU Para;

} HCI_CMD_LE_SET_ADV_ENABLE_STRU, OS_PTR HCI_CMD_LE_SET_ADV_ENABLE_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_le_set_adv_enable
{
    U8 Status;

} HCI_CMD_RTN_PARA_LE_SET_ADV_ENABLE_STRU;

/*
 * 08.0B HCI LE Set Scan Parameters Command
 */
typedef struct stru_hci_cmd_para_le_set_scan_para
{
    U8 LeScanType;
    U8 LeScanIntervalB0;
    U8 LeScanIntervalB1;
    U8 LeScanWindowB0;
    U8 LeScanWindowB1;
    U8 OwnAddrType;
    U8 ScanFilterPolicy;

} HCI_CMD_PARA_LE_SET_SCAN_PARA_STRU;

typedef struct stru_hci_cmd_le_set_scan_para
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_SET_SCAN_PARA_STRU Para;

} HCI_CMD_LE_SET_SCAN_PARA_STRU, OS_PTR HCI_CMD_LE_SET_SCAN_PARA_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_le_set_scan_para
{
    U8 Status;

} HCI_CMD_RTN_PARA_LE_SET_SCAN_PARA_STRU;

/*
 * 08.0C HCI LE Set Scan Enable Command
 */
typedef struct stru_hci_cmd_para_le_set_scan_enable
{
    U8 LeScanEnable;
    U8 FilterDuplicates;

} HCI_CMD_PARA_LE_SET_SCAN_EANBLE_STRU;

typedef struct stru_hci_cmd_le_set_scan_enable
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_SET_SCAN_EANBLE_STRU Para;

} HCI_CMD_LE_SET_SCAN_ENABLE_STRU, OS_PTR HCI_CMD_LE_SET_SCAN_ENABLE_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_le_set_scan_enable
{
    U8 Status;

} HCI_CMD_RTN_PARA_LE_SET_SCAN_ENABLE_STRU;

/*
 * 08.0D HCI LE Create Connection Command
 */
typedef struct stru_hci_cmd_para_le_create_conn
{
    U8 LeScanIntervalB0;
    U8 LeScanIntervalB1;
    U8 LeScanWindowB0;
    U8 LeScanWindowB1;
    U8 InitiatorFilterPolicy;
    U8 PeerAddrType;
    U8 PeerAddr[6];
    U8 OwnAddrType;
    U8 ConnIntervalMinB0;
    U8 ConnIntervalMinB1;
    U8 ConnIntervalMaxB0;
    U8 ConnIntervalMaxB1;
    U8 ConnLatencyB0;
    U8 ConnLatencyB1;
    U8 SupervisionToB0;
    U8 SupervisionToB1;
    U8 MinCeLen;
    U8 MaxCeLen;

} HCI_CMD_PARA_LE_CREATE_CONN_STRU, OS_PTR HCI_CMD_PARA_LE_CREATE_CONN_STRU_PTR;

typedef struct stru_hci_cmd_le_create_conn
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_CREATE_CONN_STRU Para;

} HCI_CMD_LE_CREATE_CONN_STRU, OS_PTR HCI_CMD_LE_CREATE_CONN_STRU_PTR;



/*
 * 08.0E HCI LE Create Connection Cancel Command
 */
typedef struct stru_hci_cmd_rtn_para_le_create_conn_cancel
{
    U8 Status;

} HCI_CMD_RTN_PARA_LE_CREATE_CONN_CANCEL_STRU;

/*
 * 08.0F HCI LE Read White List Size Command
 */
typedef struct stru_hci_cmd_rtn_para_le_rd_white_list_size
{
    U8 Status;
    U8 WhiteListSize;

} HCI_CMD_RTN_PARA_LE_RD_WHITE_LIST_SIZE_STRU;

/*
 * 08.10 HCI Clear White List Command
 */
typedef struct stru_hci_cmd_rtn_para_le_clr_white_list
{
    U8 Status;

} HCI_CMD_RTN_PARA_LE_CLR_WHITE_LIST_STRU;

/*
 * 08.11 HCI LE Add Device To White List Command
 */
typedef struct stru_hci_cmd_para_le_add_device_to_white_list
{
    U8 AddrType;
    U8 Addr[6];

} HCI_CMD_PARA_LE_ADD_DEVICE_TO_WHITE_LIST_STRU;

typedef struct stru_hci_cmd_le_add_device_to_white_list
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_ADD_DEVICE_TO_WHITE_LIST_STRU Para;

} HCI_CMD_LE_ADD_DEVICE_TO_WHITE_LIST_STRU, OS_PTR HCI_CMD_LE_ADD_DEVICE_TO_WHITE_LIST_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_le_add_device_to_white_list
{
    U8 Status;

} HCI_CMD_RTN_PARA_LE_ADD_DEVICE_TO_WHITE_LIST_STRU;

/*
 * 08.12 HCI LE Remove Device From White List Command
 */
typedef struct stru_hci_cmd_para_le_rm_device_from_white_list
{
    U8 AddrType;
    U8 Addr[6];

} HCI_CMD_PARA_LE_RM_DEVICE_FROM_WHITE_LIST_STRU;

typedef struct stru_hci_cmd_le_rm_device_from_white_list
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_ADD_DEVICE_TO_WHITE_LIST_STRU Para;

} HCI_CMD_LE_RM_DEVICE_FROM_WHITE_LIST_STRU, OS_PTR HCI_CMD_LE_RM_DEVICE_FROM_WHITE_LIST_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_le_rm_device_from_white_list
{
    U8 Status;

} HCI_CMD_RTN_PARA_LE_RM_DEVICE_FROM_WHITE_LIST_STRU;

/*
 * 08.13 HCI LE Connection Update Command
 */
typedef struct stru_hci_cmd_para_le_conn_update
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 ConnIntervalMinB0;
    U8 ConnIntervalMinB1;
    U8 ConnIntervalMaxB0;
    U8 ConnIntervalMaxB1;
    U8 ConnLatencyB0;
    U8 ConnLatencyB1;
    U8 SupervisionToB0;
    U8 SupervisionToB1;
    U8 MinCeLen;
    U8 MaxCeLen;

} HCI_CMD_PARA_LE_CONN_UPDATE_STRU;

typedef struct stru_hci_cmd_le_conn_update
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_CONN_UPDATE_STRU Para;

} HCI_CMD_LE_CONN_UPDATE_STRU, OS_PTR HCI_CMD_LE_CONN_UPDATE_STRU_PTR;

/*
 * 08.14 HCI LE Set Host Channel Classification Command
 */
typedef struct stru_hci_cmd_para_le_set_host_ch_classification
{
    U8 ChMap[5];

} HCI_CMD_PARA_LE_SET_HOST_CH_CLASSIFICATION_STRU;

typedef struct stru_hci_cmd_le_set_host_ch_classification
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_SET_HOST_CH_CLASSIFICATION_STRU Para;

} HCI_CMD_LE_SET_HOST_CH_CLASSIFICATION_STRU, OS_PTR HCI_CMD_LE_SET_HOST_CH_CLASSIFICATION_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_le_set_host_ch_classification
{
    U8 Status;

} HCI_CMD_RTN_PARA_LE_SET_HOST_CH_CLASSIFICATION_STRU;

/*
 * 08.15 HCI LE Read Channel Map Command
 */
typedef struct stru_hci_cmd_para_le_rd_ch_map
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_PARA_LE_RD_CH_MAP_STRU;

typedef struct stru_hci_cmd_le_rd_ch_map
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_RD_CH_MAP_STRU Para;

} HCI_CMD_LE_RD_CH_MAP_STRU;

typedef struct stru_hci_cmd_rtn_para_le_rd_ch_map
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 ChMap[5];

} HCI_CMD_RTN_PARA_LE_RD_CH_MAP_STRU;

/*
 * 08.16 HCI Read Remote Used Features Command
 */
typedef struct stru_hci_cmd_para_le_rd_remote_used_fea
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_PARA_LE_RD_REMOTE_USED_FEA_STRU;

typedef struct stru_hci_cmd_le_rd_remote_used_fea
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_RD_REMOTE_USED_FEA_STRU Para;

} HCI_CMD_LE_RD_REMOTE_USED_FEA_STRU;

/*
 * 08.17 HCI LE Encrypt Command
 */
typedef struct stru_hci_cmd_para_le_encrypt
{
    U8 Key[16];
    U8 PlaintextData[16];

} HCI_CMD_PARA_LE_ENCRYPT_STRU;

typedef struct stru_hci_cmd_le_encrypt
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_ENCRYPT_STRU Para;

} HCI_CMD_LE_ENCRYPT_STRU;

typedef struct stru_hci_cmd_rtn_para_le_encrypt
{
    U8 Status;
    U8 EncData[16];

} HCI_CMD_RTN_PARA_LE_ENCRYPT_STRU, OS_PTR HCI_CMD_RTN_PARA_LE_ENCRYPT_STRU_PTR;

/*
 * 08.18 HCI LE Rand Command
 */
typedef struct stru_hci_cmd_rtn_para_le_rand
{
    U8 Status;
    U8 RandNum[8];

} HCI_CMD_RTN_PARA_LE_RAND_STRU;

/*
 * 08.19 HCI LE Start Encryption Command
 */
typedef struct stru_hci_cmd_para_le_start_encrypt
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 RandNum[8];
    U8 EncDiversifierB0;
    U8 EncDiversifierB1;
    U8 LongTermKey[16];

} HCI_CMD_PARA_LE_START_ENCRYPT_STRU;

typedef struct stru_hci_cmd_le_start_encrypt
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_START_ENCRYPT_STRU Para;

} HCI_CMD_LE_START_ENCRYPT_STRU;

/*
 * 08.1A HCI LE Long Team Key Request Reply Command
 */
typedef struct stru_hci_cmd_para_le_ltk_req_reply
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 LongTermKey[16];

} HCI_CMD_PARA_LE_LTK_REQ_REPLY_STRU;

typedef struct stru_hci_cmd_le_ltk_req_reply
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_LTK_REQ_REPLY_STRU Para;

} HCI_CMD_LE_LTK_REQ_REPLY_STRU, OS_PTR HCI_CMD_LE_LTK_REQ_REPLY_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_le_ltk_req_reply
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_RTN_PARA_LE_LTK_REQ_REPLY_STRU, OS_PTR HCI_CMD_RTN_PARA_LE_LTK_REQ_REPLY_STRU_PTR;

/*
 * 08.1B HCI LE Long Team Key Request Negative Reply Command
 */
typedef struct stru_hci_cmd_para_le_ltk_req_neg_reply
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_PARA_LE_LTK_REQ_NEG_REPLY_STRU;

typedef struct stru_hci_cmd_le_ltk_req_neg_reply
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_LTK_REQ_REPLY_STRU Para;

} HCI_CMD_LE_LTK_REQ_NEG_REPLY_STRU;

typedef struct stru_hci_cmd_rtn_para_le_ltk_req_neg_reply
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_CMD_RTN_PARA_LE_LTK_REQ_NEG_REPLY_STRU;

/*
 * 08.1C HCI LE Read Supported States Command
 */
typedef struct stru_hci_cmd_rtn_para_le_rd_supp_state
{
    U8 Status;
    U8 LeStates[8];

} HCI_CMD_RTN_PARA_LE_RD_SUPP_STATE_STRU;

/*
 * 08.1D HCI LE Receiver Test Command
 */
typedef struct stru_hci_cmd_para_le_rx_test
{
    U8 RxFreq;

} HCI_CMD_PARA_LE_RX_TEST_STRU;

typedef struct stru_hci_cmd_le_rx_test
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_RX_TEST_STRU Para;

} HCI_CMD_LE_RX_TEST_STRU, OS_PTR HCI_CMD_LE_RX_TEST_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_le_rx_test
{
    U8 Status;

} HCI_CMD_RTN_PARA_LE_RX_TSET_STRU;

/*
 * 08.1E HCI LE Transmitter Test Command
 */
typedef struct stru_hci_cmd_para_le_tx_test
{
    U8 TxFreq;
    U8 LenOfTestData;
    U8 PktPayload;

} HCI_CMD_PARA_LE_TX_TEST_STRU;

typedef struct stru_hci_cmd_le_tx_test
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_TX_TEST_STRU Para;

} HCI_CMD_LE_TX_TEST_STRU, OS_PTR HCI_CMD_LE_TX_TEST_STRU_PTR;

typedef struct stru_hci_cmd_rtn_para_le_tx_test
{
    U8 Status;

} HCI_CMD_RTN_PARA_LE_TX_TSET_STRU;

/*
 * 08.1F HCI LE Test End Command
 */
typedef struct stru_hci_cmd_rtn_para_le_test_end
{
    U8 Status;
    U8 NumOfPktB0;
    U8 NumOfPktB1;

} HCI_CMD_RTN_PARA_LE_TEST_END_STRU;


/*
 * 08.22 HCI LE Set Data Length Command
 */
typedef struct stru_hci_cmd_para_le_set_data_length
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 TxOctetsB0;
    U8 TxOctetsB1;
    U8 TxTimeB0;
    U8 TxTimeB1;    
} HCI_CMD_PARA_LE_SET_DATA_LENGTH_STRU;

typedef struct stru_hci_cmd_rtn_para_le_set_data_length
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
} HCI_CMD_RTN_PARA_LE_SET_DATA_LENGTH_STRU,OS_PTR HCI_CMD_RTN_PARA_LE_SET_DATA_LENGTH_STRU_PTR;

typedef struct stru_hci_cmd_le_set_data_length
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_SET_DATA_LENGTH_STRU Para;

} HCI_CMD_LE_SET_DATA_LENGTH_STRU, OS_PTR HCI_CMD_LE_SET_DATA_LENGTH_STRU_PTR;

/*
 * 08.23 HCI LE Read Suggested Default Data Length Command
 */
typedef struct stru_hci_cmd_rtn_para_le_read_suggested_default_data_length
{
    U8 Status;
    U8 SuggestedMaxTxOctetsB0;
    U8 SuggestedMaxTxOctetsB1;    
    U8 SuggestedMaxTxTimeB0;
    U8 SuggestedMaxTxTimeB1;    
} HCI_CMD_RTN_PARA_LE_READ_SUGGESTED_DEFAULT_DATA_LENGTH_STRU,OS_PTR HCI_CMD_RTN_PARA_LE_READ_SUGGESTED_DEFAULT_DATA_LENGTH_STRU_PTR;

/*
 * 08.24 HCI LE Write Suggested Default Data Length Command
 */
typedef struct stru_hci_cmd_para_le_write_suggested_default_data_length
{
    U8 SuggestedMaxTxOctetsB0;
    U8 SuggestedMaxTxOctetsB1;    
    U8 SuggestedMaxTxTimeB0;
    U8 SuggestedMaxTxTimeB1;       
} HCI_CMD_PARA_LE_WRITE_SUGGESTED_DEFAULT_DATA_LENGTH_STRU;

typedef struct stru_hci_cmd_rtn_para_le_write_suggested_default_data_length
{
    U8 Status;
} HCI_CMD_RTN_PARA_LE_WRITE_SUGGESTED_DEFAULT_DATA_LENGTH_STRU,OS_PTR HCI_CMD_RTN_PARA_LE_WRITE_SUGGESTED_DEFAULT_DATA_LENGTH_STRU_PTR;

typedef struct stru_hci_cmd_le_write_suggested_default_data_length
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_CMD_PARA_LE_WRITE_SUGGESTED_DEFAULT_DATA_LENGTH_STRU Para;
} HCI_CMD_LE_WRITE_SUGGESTED_DEFAULT_DATA_LENGTH_STRU, OS_PTR HCI_CMD_LE_WRITE_SUGGESTED_DEFAULT_DATA_LENGTH_STRU_PTR;


typedef union
{
	/* Link Control Command */
	HCI_CMD_PARA_INQ_STRU							inquiryCmd;				//0x0001
	HCI_CMD_PARA_CREATE_CONN_STRU					createConnCmd;			//0x0005
	HCI_CMD_PARA_DISCONNECT_STRU					disconnectCmd;			//0x0006
	HCI_CMD_PARA_CREATE_CONN_CANCEL_STRU			createConnCancelCmd;	//0x0008
	HCI_CMD_PARA_ACCEPT_CONN_REQ_STRU				acceptConnReqCmd;		//0x0009
	HCI_CMD_PARA_REJ_CONN_REQ_STRU					rejectConnReqCmd;		//0x000A
	HCI_CMD_PARA_LINK_KEY_REQ_REPLY_STRU			linkKeyReqReplyCmd;		//0x000B
	HCI_CMD_PARA_PIN_CODE_REQ_REPLY_STRU			pinCodeReqReplyCmd;		//0x000D
	HCI_CMD_PARA_CHANGE_CONN_PKT_TYPE_STRU			changeConnPktTypeCmd;	//0x000F
	HCI_CMD_PARA_AUTHENTICATION_REQUESTED_STRU		authenRequestedCmd;		//0x0011
	HCI_CMD_PARA_SET_CONN_ENCRYPTION_STRU			setConnEncryptionCmd;	//0x0013
	HCI_CMD_PARA_REMOTE_NAME_REQ_STRU				remoteNameReqCmd;		//0x0019
	HCI_CMD_PARA_SETUP_SCO_CONN_STRU				setupSCOConnCmd;		//0x0028
	HCI_CMD_PARA_ACP_SCO_CONN_REQ_STRU				acceptSCOConnReqCmd;	//0x0029
	HCI_CMD_PARA_REJ_SCO_CONN_REQ_STRU				rejectSCOConnReqCmd;	//0x002A
	HCI_CMD_PARA_IO_CAPABILITY_REQ_REPLY_STRU		ioCapReqReplyCmd;		//0x002B
	HCI_CMD_PARA_USER_CONFIRM_REQ_REPLY_STRU		userConfirmReplyCmd;	//0x002C
	HCI_CMD_PARA_USER_CONFIRM_REQ_NEG_REPLY_STRU	userConfirmNegReplyCmd;	//0x002D
	HCI_CMD_PARA_USER_PASSKEY_REQ_REPLY_STRU		userPasskeyReqReplyCmd;	//0x002E
	HCI_CMD_PARA_IO_CAPABILITY_REQ_NEG_REPLY_STRU	ioCapReqNegReplyCmd;	//0x0034
	
	/* Link Policy Command */
	HCI_CMD_PARA_HOLD_MODE_STRU						holdModeCmd;			//0x0001
	HCI_CMD_PARA_SNIFF_MODE_STRU					sniffModeCmd;			//0x0003
	HCI_CMD_PARA_EXIT_SNIFF_MODE_STRU				exitSniffModeCmd;		//0x0004
	HCI_CMD_PARA_QOS_SETUP_STRU						QosSetupCmd;			//0x0007
	HCI_CMD_PARA_SWITCH_ROLE_STRU					switchRoleCmd;			//0x000B
	HCI_CMD_PARA_WR_LINK_POLICY_SETTING_STRU		writeLinkPolicySetting;	//0x000D	
	HCI_CMD_PARA_SNIFF_SUBRATING_STRU				sniffSubratingCmd;		//0x0011
	
	/* Controller & Baseband Command */
	HCI_CMD_PARA_WR_PAGE_TO_STRU					writePageTOCmd;				//0x0018
	HCI_CMD_PARA_WR_PAGE_SCAN_ACTIVITY_STRU			writePageScanActCmd;		//0x001C
	HCI_CMD_PARA_WR_LINK_SUPERVISION_TO_STRU		writeLinkSpervisionTOCmd;	//0x0037
	HCI_CMD_PARA_WR_INQ_MODE_STRU					writeInquiryModeCmd;		//0x0045
	HCI_CMD_PARA_REFRESH_ENC_KEY_STRU				refreshEncrypKeyCmd;		//0x0053
	
	/* Status Parameter Command */
	HCI_CMD_PARA_RD_RSSI_STRU						readRSSICmd;			//0x0005
	
	/* Testing Command */
	HCI_CMD_PARA_WR_SIMPLE_PAIRING_DBG_MODE_STRU	writeSSPDebugModeCmd; 	//0x0004
}HCICmdParaType;

/*
 * HCI Data PBF
 */
#define HCI_PBF_AUTO_FLUSH_START    (U8)0
#define HCI_PBF_CONTINUING          (U8)1
#define HCI_PBF_NON_FLSHU_START     (U8)2
#define HCI_PBF_AUTO_FLUSH_COMPLETE (U8)3

/*
 * HCI Data BCF
 */
/* Host-to-Controller */
#define HCI_H2C_BCF_NO_BC           (U8)0
#define HCI_H2C_BCF_ACTIVE_SLAVE_BC (U8)1
#define HCI_H2C_BCF_PARKED_SLAVE_BC (U8)2

/* Controller-to-Host */
#define HCI_C2H_BCF_P2P             (U8)0
#define HCI_C2H_BCF_RX_WITHOUT_PARK (U8)1
#define HCI_C2H_BCF_RX_WITHIN_PARK  (U8)2

/*
 * HCI Data Format
 */
typedef struct stru_hci_data_hdl_flags
{
    U16 Handle  : 12;
    U16 PBF     :  2;
    U16 BCF     :  2;

} HCI_DATA_HDL_FLAGS_STRU;

typedef union union_hci_data_hdl_flags
{
    U16 value;
    HCI_DATA_HDL_FLAGS_STRU field;

} HCI_DATA_HDL_FLAGS_UNION;

typedef struct stru_hci_data_hdr
{
    HCI_DATA_HDL_FLAGS_UNION HdlFlags;
    U16 Len;

} HCI_DATA_HDR_STRU;

typedef struct stru_hci_data
{
    HCI_DATA_HDR_STRU Hdr;
    U8 Payload[1];

} HCI_DATA_STRU;

/*
 * HCI Event Code
 */
//- HCI Event OP code;
typedef U8 HCI_EVTCODE;
#define HCI_EVENT_INQUIRY_COMPLETE                                  ((HCI_EVTCODE)0x01)
#define HCI_EVENT_INQUIRY_RESULT                                    ((HCI_EVTCODE)0x02)
#define HCI_EVENT_CONNECTION_COMPLETE                               ((HCI_EVTCODE)0x03)
#define HCI_EVENT_CONNECTION_REQUEST                                ((HCI_EVTCODE)0x04)
#define HCI_EVENT_DISCONNECTION_COMPLETE                            ((HCI_EVTCODE)0x05)
#define HCI_EVENT_AUTHENTICATION_COMPLETE                           ((HCI_EVTCODE)0x06)
#define HCI_EVENT_REMOTE_NAME_REQUEST_COMPLETE                      ((HCI_EVTCODE)0x07)
#define HCI_EVENT_ENCRYPTION_CHANGE                                 ((HCI_EVTCODE)0x08)
#define HCI_EVENT_CHANGE_CONNECTION_LINK_KEY_COMPLETE               ((HCI_EVTCODE)0x09)
#define HCI_EVENT_MASTER_LINK_KEY_COMPLETE                          ((HCI_EVTCODE)0x0A)
#define HCI_EVENT_READ_REMOTE_SUPPORTED_FEATURES_COMPLETE           ((HCI_EVTCODE)0x0B)
#define HCI_EVENT_READ_REMOTE_VERSION_INFORMATION_COMPLETE          ((HCI_EVTCODE)0x0C)
#define HCI_EVENT_QOS_SETUP_COMPLETE                                ((HCI_EVTCODE)0x0D)
#define HCI_EVENT_COMMAND_COMPLETE                                  ((HCI_EVTCODE)0x0E)
#define HCI_EVENT_COMMAND_STATUS                                    ((HCI_EVTCODE)0x0F)
#define HCI_EVENT_HARDWARE_ERROR                                    ((HCI_EVTCODE)0x10)
#define HCI_EVENT_FLUSH_OCCURRED                                    ((HCI_EVTCODE)0x11)
#define HCI_EVENT_ROLE_CHANGE                                       ((HCI_EVTCODE)0x12)
#define HCI_EVENT_NUMBER_OF_COMPLETED_PACKETS                       ((HCI_EVTCODE)0x13)
#define HCI_EVENT_MODE_CHANGE                                       ((HCI_EVTCODE)0x14)
#define HCI_EVENT_RETURN_LINK_KEYS                                  ((HCI_EVTCODE)0x15)
#define HCI_EVENT_PIN_CODE_REQUEST                                  ((HCI_EVTCODE)0x16)
#define HCI_EVENT_LINK_KEY_REQUEST                                  ((HCI_EVTCODE)0x17)
#define HCI_EVENT_LINK_KEY_NOTIFICATION                             ((HCI_EVTCODE)0x18)
#define HCI_EVENT_LOOPBACK_COMMAND                                  ((HCI_EVTCODE)0x19)
#define HCI_EVENT_DATA_BUFFER_OVERFLOW                              ((HCI_EVTCODE)0x1A)
#define HCI_EVENT_MAX_SLOTS_CHANGE                                  ((HCI_EVTCODE)0x1B)
#define HCI_EVENT_READ_CLOCK_OFFSET_COMPLETE                        ((HCI_EVTCODE)0x1C)
#define HCI_EVENT_CONNECTION_PACKET_TYPE_CHANGED                    ((HCI_EVTCODE)0x1D)
#define HCI_EVENT_QOS_VIOLATION                                     ((HCI_EVTCODE)0x1E)
#define HCI_EVENT_ACL_U_GO_STOP_REQUEST                             ((HCI_EVTCODE)0x1F) //airoha defined
#define HCI_EVENT_PAGE_SCAN_REPETITION_MODE_CHANGE                  ((HCI_EVTCODE)0x20)
#define HCI_EVENT_HCI_FLOW_SPECIFICATION_COMPLETE                   ((HCI_EVTCODE)0x21)
#define HCI_EVENT_INQUIRY_RESULT_WITH_RSSI                          ((HCI_EVTCODE)0x22)
#define HCI_EVENT_READ_REMOTE_EXTENDED_FEATURES_COMPLETE            ((HCI_EVTCODE)0x23)
#define HCI_EVENT_SYNCHRONOUS_CONNECTION_COMPLETE                   ((HCI_EVTCODE)0x2C)
#define HCI_EVENT_SYNCHRONOUS_CONNECTION_CHANGED                    ((HCI_EVTCODE)0x2D)
#define HCI_EVENT_SNIFF_SUBRATING                                   ((HCI_EVTCODE)0x2E)
#define HCI_EVENT_EXTENDED_INQUIRY_RESULT                           ((HCI_EVTCODE)0x2F)
#define HCI_EVENT_ENCRYPTION_KEY_REFRESH_COMPLETE                   ((HCI_EVTCODE)0x30)
#define HCI_EVENT_IO_CAPABILITY_REQUEST                             ((HCI_EVTCODE)0x31)
#define HCI_EVENT_IO_CAPABILITY_RESPONSE                            ((HCI_EVTCODE)0x32)
#define HCI_EVENT_USER_CONFIRMATION_REQUEST                         ((HCI_EVTCODE)0x33)
#define HCI_EVENT_PASSKEY_REQUEST                                   ((HCI_EVTCODE)0x34)
#define HCI_EVENT_REMOTE_OOB_DATA_REQUEST                           ((HCI_EVTCODE)0x35)
#define HCI_EVENT_SIMPLE_PAIRING_COMPLETE                           ((HCI_EVTCODE)0x36)
#define HCI_EVENT_LINK_SUPERVISION_TIMEOUT_CHANGED                  ((HCI_EVTCODE)0x38)
#define HCI_EVENT_ENHANCED_FLUSH_COMPLETE                           ((HCI_EVTCODE)0x39)
#define HCI_EVENT_USER_PASSKEY_NOTIFICATION                         ((HCI_EVTCODE)0x3B)
#define HCI_EVENT_KEYPRESS_NOTIFICATION                             ((HCI_EVTCODE)0x3C)
#define HCI_EVENT_REMOTE_HOST_SUPPORTED_FEATURES_NOTI               ((HCI_EVTCODE)0x3D)
#define HCI_EVENT_LE_META                                           ((HCI_EVTCODE)0x3E)
#define HCI_EVENT_SCO_PACKET_TYPE                                   ((HCI_EVTCODE)0xE7)//airoha defined
#define HCI_EVENT_BIST_CMD				                            ((HCI_EVTCODE)0xE8)//airoha defined
#define HCI_EVENT_UART_LE_CMD                                       ((HCI_EVTCODE)0xE9)//airoha defined
#define HCI_EVENT_AIROHA_VENDOR										((HCI_EVTCODE)0xFF)//airoha defined


//- LE Meta Event (HCI_EVENT_LE_META subEvent)
#define HCI_EVENT_LE_CONNECTION_COMPLETE                            ((HCI_EVTCODE)0x01)
#define HCI_EVENT_LE_ADVERTISING_REPORT                             ((HCI_EVTCODE)0x02)
#define HCI_EVENT_LE_CONNECTION_UPDATE_COMPLETE                     ((HCI_EVTCODE)0x03)
#define HCI_EVENT_LE_READ_REMOTE_USED_FEATURES_COMPLETE             ((HCI_EVTCODE)0x04)
#define HCI_EVENT_LE_LONG_TERM_KEY_REQUEST                          ((HCI_EVTCODE)0x05)
#define HCI_EVENT_LE_REMOTE_CONNECTION_PARAM_REQUEST                ((HCI_EVTCODE)0x06)
#define HCI_EVENT_LE_DATA_LENGTH_CHANGE                             ((HCI_EVTCODE)0x07)

/*
 * HCI Event Format
 */
typedef struct stru_hci_event_hdr
{
    U8 EvtCode;
    U8 Len;

} HCI_EVT_HDR_STRU;

typedef struct stru_hci_event
{
    HCI_EVT_HDR_STRU Hdr;
    U8 Para[1];

} HCI_EVT_STRU, OS_PTR HCI_EVT_STRU_PTR;

/*
 * HCI Error Code
 */
typedef U8 HCI_ERRCODE;

/* HCI Error Code */
#define HCI_ERRCODE_SUCCESS                                                     (HCI_ERRCODE)0x00
#define HCI_ERRCODE_UNKNOWN_HCI_COMMAND                                         (HCI_ERRCODE)0x01
#define HCI_ERRCODE_UNKNOWN_CONNECTION_IDENTIFIER                               (HCI_ERRCODE)0x02
#define HCI_ERRCODE_HARDWARE_FAILURE                                            (HCI_ERRCODE)0x03
#define HCI_ERRCODE_PAGE_TIMEOUT                                                (HCI_ERRCODE)0x04
#define HCI_ERRCODE_AUTHENTICATION_FAILURE                                      (HCI_ERRCODE)0x05
#define HCI_ERRCODE_PIN_OR_KEY_MISSING                                          (HCI_ERRCODE)0x06
#define HCI_ERRCODE_MEMORY_CAPACITY_EXCEEDED                                    (HCI_ERRCODE)0x07
#define HCI_ERRCODE_CONNECTION_TIMEOUT                                          (HCI_ERRCODE)0x08
#define HCI_ERRCODE_CONNECTION_LIMIT_EXCEEDED                                   (HCI_ERRCODE)0x09
#define HCI_ERRCODE_SYNCHRONOUS_CONNECTION_LIMIT_TO_A_DEVICE_EXCEEDED           (HCI_ERRCODE)0x0A
#define HCI_ERRCODE_ACL_CONNECTION_ALREADY_EXISTS                               (HCI_ERRCODE)0x0B
#define HCI_ERRCODE_COMMAND_DISALLOWED                                          (HCI_ERRCODE)0x0C
#define HCI_ERRCODE_CONNECTION_REJECTED_DUE_TO_LIMITED_RESOURCES                (HCI_ERRCODE)0x0D
#define HCI_ERRCODE_CONNECTION_REJECTED_DUE_TO_SECURITY_REASONS                 (HCI_ERRCODE)0x0E
#define HCI_ERRCODE_CONNECTION_REJECTED_DUE_TO_UNACCEPTABLE_BD_ADDR             (HCI_ERRCODE)0x0F
#define HCI_ERRCODE_CONNECTION_ACCEPT_TIMEOUT_EXCEEDED                          (HCI_ERRCODE)0x10
#define HCI_ERRCODE_UNSUPPORTED_FEATURE_OR_PARAMETER_VALUE                      (HCI_ERRCODE)0x11
#define HCI_ERRCODE_INVALID_HCI_COMMAND_PARAMETERS                              (HCI_ERRCODE)0x12
#define HCI_ERRCODE_REMOTE_USER_TERMINATED_CONNECTION                           (HCI_ERRCODE)0x13
#define HCI_ERRCODE_REMOTE_DEVICE_TERMINATED_CONNECTION_DUE_TO_LOW_RESOURCES    (HCI_ERRCODE)0x14
#define HCI_ERRCODE_REMOTE_DEVICE_TERMINATED_CONNECTION_DUE_TO_POWER_OFF        (HCI_ERRCODE)0x15
#define HCI_ERRCODE_CONNECTION_TERMINATED_BY_LOCAL_HOST                         (HCI_ERRCODE)0x16
#define HCI_ERRCODE_REPEATED_ATTEMPTS                                           (HCI_ERRCODE)0x17
#define HCI_ERRCODE_PAIRING_NOT_ALLOWED                                         (HCI_ERRCODE)0x18
#define HCI_ERRCODE_UNKNOWN_LMP_PDU                                             (HCI_ERRCODE)0x19
#define HCI_ERRCODE_UNSUPPORTED_REMOTE_FEATURE_UNSUPPORTED_LMP_FEATURE          (HCI_ERRCODE)0x1A
#define HCI_ERRCODE_SCO_OFFSET_REJECTED                                         (HCI_ERRCODE)0x1B
#define HCI_ERRCODE_SCO_INTERVAL_REJECTED                                       (HCI_ERRCODE)0x1C
#define HCI_ERRCODE_SCO_AIR_MODE_REJECTED                                       (HCI_ERRCODE)0x1D
#define HCI_ERRCODE_INVALID_LMP_PARAMETERS                                      (HCI_ERRCODE)0x1E
#define HCI_ERRCODE_UNSPECIFIED_ERROR                                           (HCI_ERRCODE)0x1F
#define HCI_ERRCODE_UNSUPPORTED_LMP_PARAMETER_VALUE                             (HCI_ERRCODE)0x20
#define HCI_ERRCODE_ROLE_CHANGE_NOT_ALLOWED                                     (HCI_ERRCODE)0x21
#define HCI_ERRCODE_LMP_RESPONSE_TIMEOUT                                        (HCI_ERRCODE)0x22
#define HCI_ERRCODE_LMP_ERROR_TRANSACTION_COLLISION                             (HCI_ERRCODE)0x23
#define HCI_ERRCODE_LMP_PDU_NOT_ALLOWED                                         (HCI_ERRCODE)0x24
#define HCI_ERRCODE_ENCRYPTION_MODE_NOT_ACCEPTABLE                              (HCI_ERRCODE)0x25
#define HCI_ERRCODE_LINK_KEY_CAN_NOT_BE_CHANGED                                 (HCI_ERRCODE)0x26
#define HCI_ERRCODE_REQUESTED_QOS_NOT_SUPPORTED                                 (HCI_ERRCODE)0x27
#define HCI_ERRCODE_INSTANT_PASSED                                              (HCI_ERRCODE)0x28
#define HCI_ERRCODE_PAIRING_WITH_UNIT_KEY_NOT_SUPPORTED                         (HCI_ERRCODE)0x29
#define HCI_ERRCODE_DIFFERENT_TRANSACTION_COLLISION                             (HCI_ERRCODE)0x2A
#define HCI_ERRCODE_QOS_UNACCEPTABLE_PARAMETER                                  (HCI_ERRCODE)0x2C
#define HCI_ERRCODE_QOS_REJECTED                                                (HCI_ERRCODE)0x2D
#define HCI_ERRCODE_CHANNEL_CLASSIFICATION_NOT_SUPPORTED                        (HCI_ERRCODE)0x2E
#define HCI_ERRCODE_INSUFFICIENT_SECURITY                                       (HCI_ERRCODE)0x2F
#define HCI_ERRCODE_PARAMETER_OUT_OF_MANDATORY_RANGE                            (HCI_ERRCODE)0x30
#define HCI_ERRCODE_ROLE_SWITCH_PENDING                                         (HCI_ERRCODE)0x32
#define HCI_ERRCODE_RESERVED_SLOT_VIOLATION                                     (HCI_ERRCODE)0x34
#define HCI_ERRCODE_ROLE_SWITCH_FAILED                                          (HCI_ERRCODE)0x35
#define HCI_ERRCODE_EXTENDED_INQUIRY_RESPONSE_TOOL_LARGE                        (HCI_ERRCODE)0x36
#define HCI_ERRCODE_SIMPLE_PAIRING_NOT_SUPPORTED_BY_HOST                        (HCI_ERRCODE)0x37
#define HCI_ERRCODE_HOST_BUSY_PAIRING                                           (HCI_ERRCODE)0x38
#define HCI_ERRCODE_CONTROLLER_BUSY                                             (HCI_ERRCODE)0x3A
#define HCI_ERRCODE_DIRECTED_ADVERTISING_TIMEOUT                                (HCI_ERRCODE)0x3C
#define HCI_ERRCODE_CONN_TERMINATED_DUE_TO_MIC_FAILURE                          (HCI_ERRCODE)0x3D
#define HCI_ERRCODE_CONNECTION_FAILED_TO_BE_ESTABLISHED                         (HCI_ERRCODE)0x3E


/*
 * HCI Event Parameters
 */

/*
 * 0x01 HCI Inquiry Complete Event
 */
typedef struct stru_hci_inq_cpl_para
{
    U8 Status;

} HCI_EVT_PARA_INQ_CPL_STRU;

typedef struct stru_hci_evt_inq_cpl
{
    HCI_EVT_HDR_STRU Hdr;
    HCI_EVT_PARA_INQ_CPL_STRU Para;

} HCI_EVT_INQ_CPL_STRU;

/*
 * 0x02 HCI Inquiry Result Event
 */
typedef struct stru_hci_inq_rst_para
{
    U8 NumRsp;
    U8 BdAddr[6];
    U8 PageScanRepetitionMode;
    U8 Reserved0;
    U8 Reserved1;
    U8 ClassOfDevice[3];
    U8 ClockOffset[2];

} HCI_EVT_PARA_INQ_RST_STRU;

typedef struct stru_hci_evt_inq_rst
{
    HCI_EVT_HDR_STRU Hdr;
    HCI_EVT_PARA_INQ_RST_STRU Para;

} HCI_EVT_INQ_RST_STRU;

/*
 * 0x03 HCI Connection Complete Event
 */
typedef struct stru_hci_conn_cpl_para
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
	U8 BdAddr[6];
	U8 LinkType;
	////////////////// below are customized
	U8 txInterval; //transmission interval in spec it should be U8 EncryptionEnabled;
	U8 retxWindow; //retransmission window
	U16 rxPacketLen;
	U16 txPacketLen;
	U8 airMode;
} HCI_EVT_PARA_CONN_CPL_STRU;

/*
 * 0x04 HCI Connection Request Event
 */
#define LINK_TYPE_SCO_CONNECTION_REQUEST    (0x00)
#define LINK_TYPE_ACL_CONNECTION_REQUEST    (0x01)
#define LINK_TYPE_eSCO_CONNECTION_REQUEST   (0x02)

typedef struct stru_hci_conn_req_para
{
	U8 BdAddr[6];
	U8 ClassOfDevice[3];	
	U8 LinkType;
} HCI_EVT_PARA_CONN_REQ_STRU;

/*
 * 0x05 HCI Disconnection Complete Event
 */

typedef struct stru_hci_disc_cpl_para
{
	U8 Status;
	U8 ConnHdlB0;
	U8 ConnHdlB1;
	U8 Reason;
} HCI_EVT_PARA_DISC_CPL_STRU;

/*
 * 0x06 HCI Authentication Complete Event
 */

typedef struct stru_hci_auth_cpl_para
{
	U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
} HCI_EVT_PARA_AUTH_CPL_STRU;

/*
 * 0x07 HCI Remote Name Request Complete Event
 */

typedef struct stru_hci_remote_name_req_para
{
	U8 Status;
	U8 BdAddr[6];
	U8 RemoteName[1];
} HCI_EVT_PARA_REMOTE_NAME_REQ_STRU;

/*
 * 0x08 HCI Encryption Change Event
 */
typedef struct stru_hci_encryp_change_para
{
	U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
	U8 EncryptionEnabled;
} HCI_EVT_PARA_ENCRYP_CHANGE_STRU;

/*
 * 0x0C HCI Read Remote Version Information Complete Event
 */
typedef struct stru_hci_evt_para_rd_remote_ver_info_cpl
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 Version;
    U8 CompIdB0;
    U8 CompIdB1;
    U8 SubversionB0;
    U8 SubversionB1;

} HCI_EVT_PARA_RD_REMOTE_VER_INFO_CPL_STRU, OS_PTR HCI_EVT_PARA_RD_REMOTE_VER_INFO_CPL_STRU_PTR;

typedef struct stru_hci_evt_rd_remote_ver_info_cpl
{
    HCI_EVT_HDR_STRU Hdr;
    HCI_EVT_PARA_RD_REMOTE_VER_INFO_CPL_STRU Para;

} HCI_EVT_RD_REMOTE_VER_INFO_CPL_STRU;

/*
 * 0x0D HCI QoS Setup Complete Event
 */
typedef struct stru_hci_evt_para_qos_setup_cpl
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 Flags;
    U8 ServiceType;
    U8 TokenRate[4];
    U8 PeakBandwidth[4];
    U8 Latency[4];
    U8 DelayVariation[4];

} HCI_EVT_PARA_QOS_SETUP_CPL_STRU, OS_PTR HCI_EVT_PARA_QOS_SETUP_CPL_STRU_PTR;

typedef struct stru_hci_evt_qos_setup_cpl
{
    HCI_EVT_HDR_STRU Hdr;
    HCI_EVT_PARA_QOS_SETUP_CPL_STRU Para;

} HCI_EVT_QOS_SETUP_CPL_STRU;

/*
 * 0x0E HCI Command Complete Event
 */
typedef struct stru_hci_evt_para_cmd_cpl
{
    U8 NumCmdPkts;
    U8 OpCodeB0;
    U8 OpCodeB1;
    U8 RtnPara[1];

} HCI_EVT_PARA_CMD_CPL_STRU;

typedef struct stru_hci_evt_cmd_cpl
{
    HCI_EVT_HDR_STRU Hdr;
    HCI_EVT_PARA_CMD_CPL_STRU Para;

} HCI_EVT_CMD_CPL_STRU, OS_PTR HCI_EVT_CMD_CPL_STRU_PTR;

/*
 * 0x0F HCI Command Status Event
 */
typedef struct stru_hci_evt_para_cmd_status
{
    U8 Status;
    U8 NumCmdPkts;
    U8 OpCodeB0;
    U8 OpCodeB1;

} HCI_EVT_PARA_CMD_STATUS_STRU;

typedef struct stru_hci_evt_cmd_status
{
    HCI_EVT_HDR_STRU Hdr;
    HCI_EVT_PARA_CMD_STATUS_STRU Para;

} HCI_EVT_CMD_STATUS_STRU;

/*
 * 0x11 HCI Flush Occurred Event
 */
typedef struct stru_hci_evt_para_flush_occurred
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_EVT_PARA_FLUSH_OCCURRED_STRU;

typedef struct stru_hci_evt_flush_occurred
{
    HCI_EVT_HDR_STRU Hdr;
    HCI_EVT_PARA_FLUSH_OCCURRED_STRU Para;

} HCI_EVT_FLUSH_OCCURRED_STRU;

/*
 * 0x12 HCI Role Change Event
 */
 
enum enum_hci_evt_role_change
{
    HCI_EVT_ROLE_CHANGE_IS_MASTER    = (U8)0,
    HCI_EVT_ROLE_CHANGE_IS_SLAVE     = (U8)1,
};

typedef struct stru_hci_evt_para_role_change
{
	U8 Status;
    U8 BdAddr[6];
	U8 NewRole;

} HCI_EVT_PARA_ROLE_CHANGE_STRU;

/*
 * 0x13 HCI Number Of Completed Packets Event
 */
typedef struct stru_hci_evt_para_num_of_cpl_pkt
{
    U8 NumOfHdl;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 NocpB0;
    U8 NocpB1;

} HCI_EVT_PARA_NUM_OF_CPL_PKT_STRU;

typedef struct stru_hci_evt_num_of_cpl_pkt
{
    HCI_EVT_HDR_STRU Hdr;
    HCI_EVT_PARA_NUM_OF_CPL_PKT_STRU Para;

} HCI_EVT_NUM_OF_CPL_PKT_STRU;

/*
 * 0x14 HCI Mode Change Event
 */
typedef struct stru_hci_evt_para_mode_change
{
	U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 CurrentMode;
	U16 Interval;
} HCI_EVT_PARA_MODE_CHANGE_STRU;

/*
 * 0x15 HCI Return Link Keys Event
 */
typedef struct stru_hci_evt_para_rtn_link_keys
{
    U8 NumKeys;
    LINK_KEY_INFO_STRU KeyInfo[1];

} HCI_EVT_PARA_RTN_LINK_KEYS_STRU;

typedef struct stru_hci_evt_rtn_link_keys
{
    HCI_EVT_HDR_STRU Hdr;
    HCI_EVT_PARA_RTN_LINK_KEYS_STRU Para;

} HCI_EVT_RTN_LINK_KEYS_STRU;

/*
 * 0x17 HCI Link Key Request Event
 */
typedef struct stru_hci_evt_para_link_key_req
{
    U8 BdAddr[6];
} HCI_EVT_PARA_LINK_KEY_REQ_STRU;

/*
 * 0x18 HCI Link Key Notification Event
 */
typedef struct stru_hci_evt_para_link_key_notify
{
    U8 BdAddr[6];
	U8 LinkKey[16];
	U8 KeyType;
} HCI_EVT_PARA_LINK_KEY_NOTIFY_STRU;

/*
 * 0x22 HCI Inquiry Result With RSSI Event
 */
typedef struct stru_hci_inq_rst_with_rssi_para
{
    U8 NumRsp;
    U8 BdAddr[6];
    U8 PageScanRepetitionMode;
    U8 Reserved;
    U8 ClassOfDevice[3];
    U8 ClockOffset[2];
    U8 Rssi;

} HCI_EVT_PARA_INQ_RST_WITH_RSSI_STRU;

typedef struct stru_hci_evt_inq_rst_with_rssi
{
    HCI_EVT_HDR_STRU Hdr;
    HCI_EVT_PARA_INQ_RST_WITH_RSSI_STRU Para;

} HCI_EVT_INQ_RST_WITH_RSSI_STRU;

/*
 * 0x2D HCI Synchronous Connection Changed event
 */
typedef struct stru_hci_sco_change_para
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
	U8 txInterval; //transmission interval in spec it should be U8 EncryptionEnabled;
	U8 retxWindow; //retransmission window
	U16 rxPacketLen;
	U16 txPacketLen;
} HCI_EVT_PARA_SCO_CHANGE_STRU;

typedef struct stru_hci_evt_sco_change
{
    HCI_EVT_HDR_STRU Hdr;
    HCI_EVT_PARA_SCO_CHANGE_STRU Para;

} HCI_EVT_SCO_CHANGE_STRU;

/*
 * 0x2F HCI Extended Inquiry Result Event
 */
typedef struct stru_hci_ext_inq_rst_para
{
    U8 NumRsp;
    U8 BdAddr[6];
    U8 PageScanRepetitionMode;
    U8 Reserved;
    U8 ClassOfDevice[3];
    U8 ClockOffset[2];
    U8 Rssi;
    U8 Eir[240]; 
} HCI_EVT_PARA_EXT_INQ_RST_STRU;

typedef struct stru_hci_evt_ext_inq_rst_
{
    HCI_EVT_HDR_STRU Hdr;
    HCI_EVT_PARA_EXT_INQ_RST_STRU Para;

} HCI_EVT_EXT_INQ_RST_STRU;

/*
 * 0x31 HCI IO Capability Request Event
 */
typedef struct stru_hci_evt_para_io_cap_req
{
    U8 BdAddr[6];
} HCI_EVT_PARA_IO_CAP_REQ_STRU;

/*
 * 0x32 HCI IO Capability Response Event
 */
 
enum
{
	IO_CAP_PARA_DISPLAY_ONLY 	= 0,
	IO_CAP_PARA_DISPLAY_YES_NO	= 1,
	IO_CAP_PARA_KEYBOARD_ONLY	= 2,
	IO_CAP_PARA_NO_INPUT_NO_OUTPUT = 3,
};

enum
{
	OOB_AUTH_DATA_PARA_NOT_PRESENT 	= 0,
	OOB_AUTH_DATA_PARA_FROM_REMOTE_DEVICE_PRESENT	= 1,
};

enum
{
	AUTH_REQUIRE_PARA_NO_BOND_NUMERIC 		= 0,
	AUTH_REQUIRE_PARA_NO_BOND_IO_CAP		= 1,
	AUTH_REQUIRE_PARA_DEDICATE_BOND_NUMERIC	= 2,
	AUTH_REQUIRE_PARA_DEDICATE_BOND_IO_CAP 	= 3,
	AUTH_REQUIRE_PARA_GENERAL_BOND_NUMERIC	= 4,
	AUTH_REQUIRE_PARA_GENERAL_BOND_IO_CAP 	= 5,
};


typedef struct stru_hci_evt_para_io_cap_resp
{
    U8 BdAddr[6];
	U8 IOCapability;
	U8 OOBDataPresent;
	U8 AuthRequirements;
} HCI_EVT_PARA_IO_CAP_RESP_STRU;

/*
 * 0x33 HCI User Confirmation Request Event
 */
typedef struct stru_hci_evt_para_user_conf_req
{
    U8 BdAddr[6];
	U32 NumericValue;
} HCI_EVT_PARA_USER_CONF_REQ_STRU;

/*
 * 0x34 HCI User Passkey Request Event
 */
typedef struct stru_hci_evt_para_user_passkey_req
{
    U8 BdAddr[6];
} HCI_EVT_PARA_USER_PASSKEY_REQ_STRU;

/*
 * 0x38 HCI Link Supervision Timeout Changed
 */
typedef struct stru_hci_evt_para_link_supervision_timeout_changed
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 LinkSupervisionTimeoutB0;
    U8 LinkSupervisionTimeoutB1;

} HCI_EVT_PARA_SUPERVISION_TO_CHG_STRU;

typedef struct stru_hci_evt_link_supervision_timeout_changed
{
    HCI_EVT_HDR_STRU Hdr;
    HCI_EVT_PARA_SUPERVISION_TO_CHG_STRU Para;

} HCI_EVT_SUPERVISION_TO_CHG_STRU;

/*
 * 0x39 HCI Enhance Flush Complete Event
 */
typedef struct stru_hci_evt_para_enhance_flush_complete
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_EVT_PARA_ENHANCE_FLUSH_CPL_STRU;

typedef struct stru_hci_evt_enhance_flush_complete
{
    HCI_EVT_HDR_STRU Hdr;
    HCI_EVT_PARA_ENHANCE_FLUSH_CPL_STRU Para;

} HCI_EVT_ENHANCE_FLUSH_CPL_STRU;



/*
 * 0xE7 HCI SCO Packet Type Event [Airoha defined]
 */
typedef struct stru_hci_evt_para_sco_pkt_type
{
    U8 BdAddr[6];
	U8 PacketType;
} HCI_EVT_PARA_SCO_PKT_TYPE_STRU;


typedef union
{
	HCI_EVT_PARA_INQ_CPL_STRU						inqCompleteEvt;			//0x0001
	HCI_EVT_PARA_INQ_RST_STRU						inqResultEvt;			//0x0002
	HCI_EVT_PARA_CONN_CPL_STRU						connCompleteEvt;		//0x0003
	HCI_EVT_PARA_CONN_REQ_STRU						connRequestEvt;			//0x0004
	HCI_EVT_PARA_DISC_CPL_STRU						discCompleteEvt;		//0x0005
	HCI_EVT_PARA_AUTH_CPL_STRU						authCompleteEvt;		//0x0006
	HCI_EVT_PARA_REMOTE_NAME_REQ_STRU				remoteNameRequestEvt;	//0x0007
	HCI_EVT_PARA_ENCRYP_CHANGE_STRU					encryptChangeEvt;		//0x0008
	HCI_EVT_PARA_QOS_SETUP_CPL_STRU					QoSSetupCompleteEvt;	//0x000D
	HCI_EVT_PARA_CMD_CPL_STRU						cmdCompleteEvt;			//0x000E
	HCI_EVT_PARA_CMD_STATUS_STRU					cmdStatusEvt;			//0x000F
	HCI_EVT_PARA_ROLE_CHANGE_STRU					roleChangeEvt;			//0x0012
	HCI_EVT_PARA_MODE_CHANGE_STRU					modeChangeEvt;			//0x0014
	HCI_EVT_PARA_LINK_KEY_REQ_STRU					linkKeyReqEvt;			//0x0017
	HCI_EVT_PARA_LINK_KEY_NOTIFY_STRU				linkKeyNotifyEvt;		//0x0018
	HCI_EVT_PARA_INQ_RST_WITH_RSSI_STRU				inqResultWithRSSIEvt;	//0x0022
	HCI_EVT_PARA_SCO_CHANGE_STRU					scoChangeEvt;			//0x002D
	HCI_EVT_PARA_EXT_INQ_RST_STRU					extInquiryResultEvt;	//0x002F
	HCI_EVT_PARA_IO_CAP_REQ_STRU					ioCapReqEvt;			//0x0031
	HCI_EVT_PARA_IO_CAP_RESP_STRU					ioCapRespEvt;			//0x0032
	HCI_EVT_PARA_USER_CONF_REQ_STRU					userConfirmReqEvt;		//0x0033
	HCI_EVT_PARA_USER_PASSKEY_REQ_STRU				userPasskeyReqEvt;		//0x0034
	
	HCI_EVT_PARA_SCO_PKT_TYPE_STRU					scoPktTypeEvt;			//0x00E7 [Airoha defined]
}HCIEvtParaType;

#endif /* _HCI_H_ */

