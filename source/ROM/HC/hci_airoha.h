#ifndef _HCI_AIROHA_H_
#define _HCI_AIROHA_H_
/*
 * AIROHA Bluetooth Device Firmware
 * COPYRIGHT (C) 2014 AIROHA TECHNOLOGY CORP. CO., LTD. ALL RIGHTS RESERVED
 *
 * HCI_airoha.h is the file defines the constants and command/event format
 * of Airoha proprietory.
 *
 * Programmer : CharlesSu@airoha.com.tw, Ext.2882
 * Programmer : DingaCheng@airoha.com.tw, Ext.2828
 * Programmer : WenChiehLo@airoha.com.tw, Ext.3374
 */
#include "rc.h"
#include "hci.h"
#include "sector_rf_misc_ctl.h"
#include "sector_mp_parameter.h"


/*
 * HCI Vendor Command/Event
 */
typedef U16 HCI_VOPCODE;
#define HCI_COMBINED_VOPCODE(vogf,vocf) (((HCI_VOPCODE)(vogf)<<8)|(HCI_VOPCODE)(vocf))
#define HCI_VOPCODE_VOGF(vogf,vocf) (((HCI_VOPCODE)(vocf)<<8)|(HCI_VOPCODE)(vogf))
#define HCI_GET_VOGF(A)		((U8)((A)>>8))
#define HCI_GET_VOCF(A)		((U8)(A))
typedef U8 HCI_VOGF;
typedef U8 HCI_VOCF;


/*
 * HCI Vendor Command/Event OGF
 */
#define HCI_VENDOR_OGF_GENERAL                              (HCI_VOGF)0x00
#define HCI_VENDOR_OGF_BTCLI_RX_AFH 						(HCI_VOGF)0x01
#define HCI_VENDOR_OGF_BTCLI_TX_AFH							(HCI_VOGF)0x02
#define HCI_VENDOR_OGF_FLASH								(HCI_VOGF)0x03
#define HCI_VENDOR_OGF_EEPROM								(HCI_VOGF)0x04
#define HCI_VENDOR_OGF_RFTEST								(HCI_VOGF)0x05
#define HCI_VENDOR_OGF_AUDIO								(HCI_VOGF)0x06
#define HCI_VENDOR_OGF_SPIFLASH								(HCI_VOGF)0x07
#define HCI_VENDOR_OGF_UART_CMD								(HCI_VOGF)0x08
#define HCI_VENDOR_OGF_UART_RESP							(HCI_VOGF)0x09
#define HCI_VENDOR_OGF_UART_IND_UNSOLICITED					(HCI_VOGF)0x0A
#define HCI_VENDOR_OGF_UART_IND_SOLICITED					(HCI_VOGF)0x0B
#define HCI_VENDOR_OGF_UART_TOOL_CMD						(HCI_VOGF)0x0C
#define HCI_VENDOR_OGF_UART_SPP								(HCI_VOGF)0x0D
#define HCI_VENDOR_OGF_UART_I2C								(HCI_VOGF)0x0E
#define HCI_VENDOR_OGF_UART_AVRCP							(HCI_VOGF)0x0F
#define HCI_VENDOR_OGF_UART_EXCEPTION						(HCI_VOGF)0x10
#define HCI_VENDOR_OGF_UART_USR_DBGPRINT					(HCI_VOGF)0x11
#define HCI_VENDOR_OGF_UART_LM_DBGPRINT						(HCI_VOGF)0x12
#define HCI_VENDOR_OGF_UART_HC_DBGPRINT						(HCI_VOGF)0x13
#define HCI_VENDOR_OGF_UART_L2CAP_DBGPRINT					(HCI_VOGF)0x14
#define HCI_VENDOR_OGF_UART_SDAP_DBGPRINT					(HCI_VOGF)0x15
#define HCI_VENDOR_OGF_UART_PM_DBGPRINT						(HCI_VOGF)0x16
#define HCI_VENDOR_OGF_UART_RFCOMM_DBGPRINT					(HCI_VOGF)0x17
#define HCI_VENDOR_OGF_UART_A2DP_DBGPRINT					(HCI_VOGF)0x18
#define HCI_VENDOR_OGF_UART_AVDTP_DBGPRINT					(HCI_VOGF)0x19
#define HCI_VENDOR_OGF_UART_AVRCP_DBGPRINT					(HCI_VOGF)0x1A
#define HCI_VENDOR_OGF_UART_MMI_DBGPRINT					(HCI_VOGF)0x1B
#define HCI_VENDOR_OGF_UART_DRIVER_DBGPRINT					(HCI_VOGF)0x1C
#define HCI_VENDOR_OGF_UART_HFP_DBGPRINT					(HCI_VOGF)0x1D
#define HCI_VENDOR_OGF_UART_SYS_DBGPRINT					(HCI_VOGF)0x1E
#define HCI_VENDOR_OGF_UART_MMI_LE_DBGPRINT					(HCI_VOGF)0x1F
#define HCI_VENDOR_OGF_UART_GAP_DBGPRINT					(HCI_VOGF)0x20
#define HCI_VENDOR_OGF_UART_LL_DBGPRINT					    (HCI_VOGF)0x21
#define HCI_VENDOR_OGF_UART_RSV07_DBGPRINT					(HCI_VOGF)0x22
#define HCI_VENDOR_OGF_UART_RSV08_DBGPRINT					(HCI_VOGF)0x23
#define HCI_VENDOR_OGF_UART_RSV09_DBGPRINT					(HCI_VOGF)0x24
#define HCI_VENDOR_OGF_UART_RSV0A_DBGPRINT					(HCI_VOGF)0x25
#define HCI_VENDOR_OGF_UART_RSV0B_DBGPRINT					(HCI_VOGF)0x26
#define HCI_VENDOR_OGF_UART_RSV0C_DBGPRINT					(HCI_VOGF)0x27
#define HCI_VENDOR_OGF_UART_RSV0D_DBGPRINT					(HCI_VOGF)0x28
#define HCI_VENDOR_OGF_UART_RSV0E_DBGPRINT					(HCI_VOGF)0x29
#define HCI_VENDOR_OGF_UART_RSV0F_DBGPRINT					(HCI_VOGF)0x2A
#define HCI_VENDOR_OGF_UART_RSV10_DBGPRINT					(HCI_VOGF)0x2B
#define HCI_VENDOR_OGF_UART_RSV11_DBGPRINT					(HCI_VOGF)0x2C
#define HCI_VENDOR_OGF_UART_RSV12_DBGPRINT					(HCI_VOGF)0x2D
#define HCI_VENDOR_OGF_UART_RSV13_DBGPRINT					(HCI_VOGF)0x2E
#define HCI_VENDOR_OGF_UART_RSV14_DBGPRINT					(HCI_VOGF)0x2F
#define HCI_VENDOR_OGF_GENERAL_V2							(HCI_VOGF)0x30
#define HCI_VENDOR_OGF_LABTEST								(HCI_VOGF)0x31
#define HCI_VENDOR_OGF_UART_OPP								(HCI_VOGF)0x32
#define HCI_VENDOR_OGF_BIST									(HCI_VOGF)0x33
#define HCI_VENDOR_OGF_UART_FCD								(HCI_VOGF)0x34
#define HCI_VENDOR_OGF_DRIVER								(HCI_VOGF)0x35
#define HCI_VENDOR_OGF_UART_LE_CMD							(HCI_VOGF)0x36
#define HCI_VENDOR_OGF_UART_LE_RESP							(HCI_VOGF)0x37
#define HCI_VENDOR_OGF_UART_LE_DATA_RESP					(HCI_VOGF)0x38
#define HCI_VENDOR_OGF_UART_HID								(HCI_VOGF)0x40

#define HCI_VENDOR_OGF_AIRAPP_FOLLOWER_CMD					(HCI_VOGF)0x44
#define HCI_VENDOR_OGF_AIRAPP_FOLLOWER_RESP					(HCI_VOGF)0x45
#define HCI_VENDOR_OGF_AIRAPP_FOLLOWER_IND_UNSOLICITED		(HCI_VOGF)0x46
#define HCI_VENDOR_OGF_AIRAPP_FOLLOWER_IND_SOLICITED		(HCI_VOGF)0x47

#define HCI_VENDOR_OGF_AIRAPP_CMD							(HCI_VOGF)0x48
#define HCI_VENDOR_OGF_AIRAPP_RESP							(HCI_VOGF)0x49
#define HCI_VENDOR_OGF_AIRAPP_IND_UNSOLICITED				(HCI_VOGF)0x4A
#define HCI_VENDOR_OGF_AIRAPP_IND_SOLICITED					(HCI_VOGF)0x4B

#define HCI_VENDOR_OGF_ANCS_CMD								(HCI_VOGF)0x4C
#define HCI_VENDOR_OGF_ANCS_RESP							(HCI_VOGF)0x4D

#define HCI_VENDOR_OGF_AIRAPP_CMD_EX						(HCI_VOGF)0x4E
#define HCI_VENDOR_OGF_AIRAPP_RESP_EX						(HCI_VOGF)0x4F
#define HCI_VENDOR_OGF_AIRAPP_IND_UNSOLICITED_EX			(HCI_VOGF)0x50
#define HCI_VENDOR_OGF_AIRAPP_IND_SOLICITED_EX				(HCI_VOGF)0x51

#define HCI_VENDOR_OGF_AIRAPP_PASSTHROUGH_TRANSFER_CMD		(HCI_VOGF)0x52
#define HCI_VENDOR_OGF_AIRAPP_PASSTHROUGH_TRANSFER_RSP		(HCI_VOGF)0x53

#define HCI_VENDOR_OGF_AIRAPP_FOLLOWER_CMD_EX				(HCI_VOGF)0x54
#define HCI_VENDOR_OGF_AIRAPP_FOLLOWER_RESP_EX				(HCI_VOGF)0x55
#define HCI_VENDOR_OGF_AIRAPP_FOLLOWER_IND_UNSOLICITED_EX	(HCI_VOGF)0x56
#define HCI_VENDOR_OGF_AIRAPP_FOLLOWER_IND_SOLICITED_EX		(HCI_VOGF)0x57

#define HCI_VENDOR_OGF_CUSTOMER_CMD							(HCI_VOGF)0x58
#define HCI_VENDOR_OGF_CUSTOMER_RESP						(HCI_VOGF)0x59
#define HCI_VENDOR_OGF_CUSTOMER_IND_UNSOLICITED				(HCI_VOGF)0x5A
#define HCI_VENDOR_OGF_CUSTOMER_IND_SOLICITED				(HCI_VOGF)0x5B

#define HCI_VENDOR_OGF_EXTENDED_TWO_BYTE_OCF_CMD			(HCI_VOGF)0x5C
#define HCI_VENDOR_OGF_EXTENDED_TWO_BYTE_OCF_RESP			(HCI_VOGF)0x5D

#define HCI_VENDOR_OGF_AIRAPP_CUSTOMER_CMD					(HCI_VOGF)0x60
#define HCI_VENDOR_OGF_AIRAPP_CUSTOMER_RSP					(HCI_VOGF)0x61
#define HCI_VENDOR_OGF_AIRAPP_PARSING_SECTOR_INFO			(HCI_VOGF)0x62


/* HCI VENDOR OCF EXTENDED TWO BYTE REQUEST
	HCI_VENDOR_OGF_EXTENDED_TWO_BYTE_OCF_CMD
*/

#define HCI_VENDOR_OCF_SECOND_KEY_EVENT_CMD		(HCI_VOCF)0x00

/*
 * HCI Vendor Command/Event OCF
 */
/* HCI Vendor OGF General Group: HCI_VENDOR_OGF_GENERAL */
//------------------VCMD_OCF------------------
#define HCI_VCMD_OCF_RESET_TARGET_DEVICE                    (HCI_VOCF)0x50
#define HCI_VCMD_OCF_DISABLE_PWR_SAVING                     (HCI_VOCF)0x51
#define HCI_VCMD_OCF_ENABLE_PWR_SAVING                      (HCI_VOCF)0x52
#define HCI_VCMD_OCF_SET_TXGC_TEMP_COMP_INTERVAL            (HCI_VOCF)0x53
#define HCI_VCMD_OCF_READ_STATUS                            (HCI_VOCF)0x60
#define HCI_VCMD_OCF_READ_ROMVERSION                        (HCI_VOCF)0x61
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_COMMAND_COMPLETE                     	(HCI_VOCF)0x00
#define HCI_VEVT_OCF_READ_STATUS                            (HCI_VOCF)0x01
#define HCI_VEVT_OCF_READ_ROMVERSION                        (HCI_VOCF)0x02


/* HCI Vendor OGF BTCLI Rx Group: HCI_VENDOR_OGF_BTCLI_RX_AFH */
//------------------VCMD_OCF------------------

//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_AFH_ENABLE_CHANGE                    (HCI_VCMD_SET_AFH)


/* HCI Vendor OGF BTCLI Tx Group: HCI_VENDOR_OGF_BTCLI_TX_AFH */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------


/* HCI Vendor OGF Flash Group: HCI_VENDOR_OGF_FLASH */
//------------------VCMD_OCF------------------
#define HCI_VCMD_OCF_FLASH_ERASE                            (HCI_VOCF)0x20
#define HCI_VCMD_OCF_FLASH_READ                             (HCI_VOCF)0x21
#define HCI_VCMD_OCF_FLASH_WRITE                            (HCI_VOCF)0x22
#define HCI_VCMD_OCF_FLASH_WRITE_DATA                       (HCI_VOCF)0x23
/////for 1520
#define HCI_VCMD_OCF_FLASH_READ_MANUFACTURER_AND_MEMORYTYPE (HCI_VOCF)0x24  //manufacturer and memory type
#define HCI_VCMD_OCF_FLASH_INIT                             (HCI_VOCF)0x25
#define HCI_VCMD_OCF_FLASH_SET_PROTECT_BIT                  (HCI_VOCF)0x26
//read
#define HCI_VCMD_OCF_FLASH_BYTE_READ                        (HCI_VOCF)0x27
#define HCI_VCMD_OCF_FLASH_PAGE_READ                        (HCI_VOCF)0x28
//erase
#define HCI_VCMD_OCF_FLASH_SECTOR_ERASE                     (HCI_VOCF)0x29
#define HCI_VCMD_OCF_FLASH_BLOCK_ERASE_32K                  (HCI_VOCF)0x2A
#define HCI_VCMD_OCF_FLASH_BLOCK_ERASE_64K                  (HCI_VOCF)0x2B
#define HCI_VCMD_OCF_FLASH_CHIP_ERASE                       (HCI_VOCF)0x2C
//write
#define HCI_VCMD_OCF_FLASH_BYTE_PROGRAM                     (HCI_VOCF)0x2D
#define HCI_VCMD_OCF_FLASH_PAGE_PROGRAM                     (HCI_VOCF)0x2E
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_SEGMENT_FLASH_WRITE_COMPLETE         	(HCI_VOCF)0x01
#define HCI_VEVT_OCF_SEGMENT_FLASH_READ_COMPLETE          	(HCI_VOCF)0x02
#define HCI_VEVT_OCF_READ_MANUFACTURER_AND_MEMORYTYPE     	(HCI_VOCF)0x03
#define HCI_VEVT_OCF_RETURN_PAGE_PROGRAM_STATUS           	(HCI_VOCF)0x04



/* HCI Vendor Command OCF EEPROM Group: HCI_VENDOR_OGF_EEPROM */

/* HCI Vendor OGF BTCLI RF Test Group: HCI_VENDOR_OGF_RFTEST */
//------------------VCMD_OCF------------------
//-----------------HCI_VENDOR_OGF_RFTEST---------------
#define HCI_VCMD_OCF_LABTEST_START                          (HCI_VOCF)0x01
#define HCI_VCMD_OCF_LABTEST_PAUSE                          (HCI_VOCF)0x02
#define HCI_VCMD_OCF_LABTEST_READVERSION                    (HCI_VOCF)0x03
#define HCI_VCMD_OCF_RFTEST_ENTERTESTMODE                   (HCI_VOCF)0x04
#define HCI_VCMD_OCF_RFTEST_RXREPORTRATE                    (HCI_VOCF)0x05
#define HCI_VCMD_OCF_TCB_DUT_INIT                           (HCI_VOCF)0x06
#define HCI_VCMD_OCF_BANDGAP_CALIBRATION                    (HCI_VOCF)0x07
#define HCI_VCMD_OCF_RFTEST_TX1                             (HCI_VOCF)0x10
#define HCI_VCMD_OCF_RFTEST_CTXDATA                         (HCI_VOCF)0x11
#define HCI_VCMD_OCF_RFTEST_BTXPACKET                       (HCI_VOCF)0x12
#define HCI_VCMD_OCF_LABTEST_AUTOCOMPENSATION               (HCI_VOCF)0x13
#define HCI_VCMD_OCF_RFTEST_CRX_START                       (HCI_VOCF)0x20
#define HCI_VCMD_OCF_RFTEST_BRX_Packet                      (HCI_VOCF)0x21
#define HCI_VCMD_OCF_RFTEST_BER                             (HCI_VOCF)0x22
#define HCI_VCMD_OCF_RFTEST_LOOPBACK                        (HCI_VOCF)0x30
#define HCI_VCMD_OCF_RFTEST_BERLOOPBACK                     (HCI_VOCF)0x31
#define HCI_VCMD_OCF_RFTEST_CFGUAPLAP                       (HCI_VOCF)0x40
#define HCI_VCMD_OCF_RFTEST_CFGACSYNC                       (HCI_VOCF)0x41
#define HCI_VCMD_OCF_RFTEST_CFGLTADDR                       (HCI_VOCF)0x42
#define HCI_VCMD_OCF_RFTEST_CFGTXIQFREQ                     (HCI_VOCF)0x43
#define HCI_VCMD_OCF_LABTEST_CFGPROBE                       (HCI_VOCF)0x44
#define HCI_VCMD_OCF_LABTEST_CFGREGISTER                    (HCI_VOCF)0x45
#define HCI_VCMD_OCF_LABTEST_CFGSFR                         (HCI_VOCF)0x46
#define HCI_VCMD_OCF_LABTEST_CFGREADSFR                     (HCI_VOCF)0x47
#define HCI_VCMD_OCF_LABTEST_CFGWRITEXDATA                  (HCI_VOCF)0x48
#define HCI_VCMD_OCF_LABTEST_CFGREADXDATA                   (HCI_VOCF)0x49
#define HCI_VCMD_OCF_LABTEST_SLEEPTEST                      (HCI_VOCF)0x50
#define HCI_VCMD_OCF_LABTEST_DEEPSLEEPTEST                  (HCI_VOCF)0x51
#define HCI_VCMD_OCF_LABTEST_WBYTHREEWIRED                  (HCI_VOCF)0x52
#define HCI_VCMD_OCF_LABTEST_CRYSTALTEST                    (HCI_VOCF)0x53
#define HCI_VCMD_OCF_LABTEST_SIDEBANDCALIBRATION            (HCI_VOCF)0x54
#define HCI_VCMD_OCF_LABTEST_BUCKTEST                       (HCI_VOCF)0x55
#define HCI_VCMD_OCF_LABTEST_BOOSTTEST                      (HCI_VOCF)0x56
#define HCI_VCMD_OCF_LABTEST_GPIOTEST                       (HCI_VOCF)0x57
#define HCI_VCMD_OCF_LABTEST_TRIM26MHZTEST                  (HCI_VOCF)0x58
#define HCI_VCMD_OCF_LABTEST_CARGER_CCMODEFORSFR            (HCI_VOCF)0x60
#define HCI_VCMD_OCF_LABTEST_CARGER_CCMODEFTMCU             (HCI_VOCF)0x61
#define HCI_VCMD_OCF_LABTEST_CARGER_CVMODEFTMCU             (HCI_VOCF)0x62
#define HCI_VCMD_OCF_LABTEST_CARGER_CCMODEFORPMU            (HCI_VOCF)0x63
#define HCI_VCMD_OCF_LABTEST_CARGER_SENSORTEST              (HCI_VOCF)0x64
#define HCI_VCMD_OCF_LABTEST_CARGER_CAL4V2ADTEST            (HCI_VOCF)0x65
#define HCI_VCMD_OCF_LABTEST_CARGER_CAL4V2INCVMODE          (HCI_VOCF)0x66
#define HCI_VCMD_OCF_LABTEST_CARGER_CAL4V2DATEST            (HCI_VOCF)0x67
#define HCI_VCMD_OCF_LABTEST_CARGER_CAL4V2DANEWTEST         (HCI_VOCF)0x68
#define HCI_VCMD_OCF_LABTEST_CARGER_AIOSENSORTEST           (HCI_VOCF)0x69
#define HCI_VCMD_OCF_LABTEST_BACKUP_01                      (HCI_VOCF)0x70
#define HCI_VCMD_OCF_LABTEST_BACKUP_02                      (HCI_VOCF)0x71
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_READ_SHORT                           	(HCI_VOCF)0x01
#define HCI_VEVT_OCF_READ_LONG                            	(HCI_VOCF)0x02
#define HCI_VEVT_OCF_CRX_RETURN                           	(HCI_VOCF)0x10
#define HCI_VEVT_OCF_BRX_RETURN                           	(HCI_VOCF)0x11
#define HCI_VEVT_OCF_BER_RETURN                           	(HCI_VOCF)0x12
#define HCI_VEVT_OCF_BG_CALIBRATION                       	(HCI_VOCF)0x13

/* HCI Vendor OGF Audio Group: HCI_VENDOR_OGF_AUDIO */
//------------------VCMD_OCF------------------
#define HCI_VCMD_OCF_AUDIO_SWITCH                           (HCI_VOCF)0x01
#define HCI_VCMD_OCF_ENHANCE_ESCO_LATENCY                   (HCI_VOCF)0x04
#define HCI_VCMD_OCF_ESCO_NULL_PACKET						(HCI_VOCF)0x05
#define HCI_VCMD_OCF_SETUP_QOS                              (HCI_VOCF)0x06

#define HCI_VCMDCODE_AUDIO_SWITCH                           HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_AUDIO,HCI_VCMD_OCF_AUDIO_SWITCH)
#define HCI_VCMDCODE_ENHANCE_ESCO_LATENCY                   HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_AUDIO,HCI_VCMD_OCF_ENHANCE_ESCO_LATENCY)
#define HCI_VCMDCODE_ESCO_NULL_PACKET                       HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_AUDIO,HCI_VCMD_OCF_ESCO_NULL_PACKET)
#define HCI_VCMDCODE_SETUP_QOS                              HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_AUDIO,HCI_VCMD_OCF_SETUP_QOS)
//------------------VEVT_OCF------------------


/* HCI Vendor OGF SPI Flash Group: HCI_VENDOR_OGF_SPIFLASH */
//------------------VCMD_OCF------------------
#define HCI_VCMD_OCF_SPI_FLASH_WRITE_INFO                   (HCI_VOCF)0x01
#define HCI_VCMD_OCF_SPI_FLASH_WRITE_SEC                    (HCI_VOCF)0x02
#define HCI_VCMD_OCF_SPI_FLASH_WRITE                        (HCI_VOCF)0x03
#define HCI_VCMD_OCF_SPI_FLASH_WRITE_BY_OFFSET              (HCI_VOCF)0x04
#define HCI_VCMD_OCF_SPI_FLASH_READ_INFO                    (HCI_VOCF)0x11
#define HCI_VCMD_OCF_SPI_FLASH_READ_SEC                     (HCI_VOCF)0x12
#define HCI_VCMD_OCF_SPI_FLASH_READ_ADD                     (HCI_VOCF)0x13
#define HCI_VCMD_OCF_SPI_FLASH_READ_ACK                     (HCI_VOCF)0x14
#define HCI_VCMD_OCF_SPI_FLASH_READ_BY_OFFSET               (HCI_VOCF)0x15
#define HCI_VCMD_OCF_SPI_FLASH_ERASE_SECTOR                 (HCI_VOCF)0x30
#define HCI_VCMD_OCF_SPI_FLASH_READ                         (HCI_VOCF)0x31
//#define HCI_VCMD_OCF_SPI_FLASH_WRITE                      (HCI_VOCF)0x32
#define HCI_VCMD_OCF_SPI_FLASH_WRITE_DATA                   (HCI_VOCF)0x33
#define HCI_VCMD_OCF_SPI_FLASH_ERASE_CHIP                   (HCI_VOCF)0x34
#define HCI_VCMD_OCF_SPI_FLASH_INIT                         (HCI_VOCF)0x35
#define HCI_VCMD_OCF_SPI_FLASH_READID                       (HCI_VOCF)0x36
#define HCI_VCMD_OCF_SPI_FLASH_READ_REGISTER                (HCI_VOCF)0x37
#define HCI_VCMD_OCF_SPI_FLASH_WRITE_REGISTER               (HCI_VOCF)0x38
//------------------VEVT_OCF------------------


/* HCI Vendor OGF UART Cmd Group: HCI_VENDOR_OGF_UART_CMD */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------

/* HCI Vendor OGF UART Response Group: HCI_VENDOR_OGF_RESP_CMD */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_RESULT_CODE_SUCCESS					(HCI_VOCF)0x00
#define HCI_VEVT_OCF_RESULT_CODE_FAIL						(HCI_VOCF)0xFF

#define HCI_VEVT_OCF_RESULT_CODE_NOT_ENOUGH_DATA			(HCI_VOCF)0x01


/* HCI Vendor OGF UART Indication Unsolicited Group: HCI_VENDOR_OGF_UART_IND_UNSOLICITED */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define MMI_UART_IND_RESERVED 								(HCI_VOCF)0xC1
#define	MMI_UART_IND_STATE_CHANGE 							(HCI_VOCF)0xC2
#define	MMI_UART_IND_CONFIRMATION_REQUEST					(HCI_VOCF)0xC3
#define	MMI_UART_IND_INSERT_STATE							(HCI_VOCF)0xC4
#define	MMI_UART_IND_REPLACE_STATE							(HCI_VOCF)0xC5
#define	MMI_UART_IND_REMOVE_STATE							(HCI_VOCF)0xC6
#define	MMI_UART_IND_MEDIA_EVENT_GENERATED					(HCI_VOCF)0xC7
#define	MMI_UART_IND_PLUS_VGS								(HCI_VOCF)0xC8
#define	MMI_UART_IND_PLUS_VGM								(HCI_VOCF)0xC9
#define	MMI_UART_IND_SET_ABSOLUTE_VOLUME					(HCI_VOCF)0xCA
#define	MMI_UART_IND_DEVICE_TYPE							(HCI_VOCF)0xCB
#define	MMI_UART_IND_PROFILE_CONNECTED						(HCI_VOCF)0xCC
#define	MMI_UART_IND_PROFILE_DISCONNECTED					(HCI_VOCF)0xCD
#define	MMI_UART_IND_ACL_LINK_STATUS						(HCI_VOCF)0xCE
#define	MMI_UART_IND_INQUIRY_RESULT_WITH_RSSI				(HCI_VOCF)0xCF
#define	MMI_UART_IND_EXTENDED_INQUIRY_RESULT				(HCI_VOCF)0xD0
#define	MMI_UART_IND_AVRCP_UP_DOWN_PASS_THROUGH				(HCI_VOCF)0xD1


/* HCI Vendor OGF UART Indication Solicited Group: HCI_VENDOR_OGF_UART_IND_SOLICITED */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
/* HCI Vendor OGF UART Tool Cmd Group: HCI_VENDOR_OGF_UART_TOOL_CMD */
//------------------VCMD_OCF------------------
#define HCI_VCMD_OCF_TOOL_STOP_VP							(HCI_VOCF)0x09
#define HCI_VCMD_OCF_TOOL_SUSPEND_DSP                		(HCI_VOCF)0x10
#define HCI_VCMD_OCF_TOOL_RESUME_DSP						(HCI_VOCF)0x11
#define HCI_VCMD_OCF_TOOL_DISABLE_LIGHT_DBG_PRINT			(HCI_VOCF)0x12
#define HCI_VCMD_OCF_TOOL_ENABLE_LIGHT_DBG_PRINT			(HCI_VOCF)0x13
#define HCI_VCMD_OCF_TOOL_GET_ADC_DATA                      (HCI_VOCF)0x14
#define HCI_VCMD_OCF_TOOL_GET_DSP_REF_GAIN                  (HCI_VOCF)0x15
#define HCI_VCMD_OCF_TOOL_ENTER_MP_STATE					(HCI_VOCF)0x16
#define HCI_VCMD_OCF_TOOL_NTC_RATIO_VALUE_REPORT			(HCI_VOCF)0x17
#define HCI_VCMD_OCF_TOOL_AUDIO_BIST						(HCI_VOCF)0x18
#define HCI_VCMD_OCF_TOOL_SET_VOL_GAIN						(HCI_VOCF)0x1B
#define HCI_VCMD_OCF_TOOL_SET_CURRENT_GAIN					(HCI_VOCF)0x1C
#define HCI_VCMD_OCF_TOOL_SET_REALTIME_PEQ_HPF				(HCI_VOCF)0x1D

//------------------VEVT_OCF------------------

/* HCI Vendor OGF UART SPP Group: HCI_VENDOR_OGF_UART_SPP */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_SPP_CONNECTED							(HCI_VOCF)0x01
#define HCI_VEVT_OCF_SPP_DISCONNECTED						(HCI_VOCF)0x02
#define HCI_VEVT_OCF_SPP_RX_DATA_FROM_REMOTE				(HCI_VOCF)0x03
#define HCI_VEVT_OCF_SPP_TX_DATA_TO_REMOTE_REQ				(HCI_VOCF)0x13
#define HCI_VEVT_OCF_SPP_TX_DATA_TO_REMOTE_RSP				(HCI_VOCF)0x14
#define HCI_VEVT_OCF_SONGPAL_ANDROID_TX_DATA_TO_REMOTE_REQ	(HCI_VOCF)0x33
#define HCI_VEVT_OCF_SONGPAL_ANDROID_TX_DATA_TO_REMOTE_RSP	(HCI_VOCF)0x34
#define HCI_VEVT_OCF_SONGPAL_IAP2_TX_DATA_TO_REMOTE_REQ		(HCI_VOCF)0x53
#define HCI_VEVT_OCF_SONGPAL_IAP2_TX_DATA_TO_REMOTE_RSP		(HCI_VOCF)0x54
#define HCI_VEVT_OCF_IAP2_TX_DATA_TO_REMOTE_REQ				(HCI_VOCF)0x73
#define HCI_VEVT_OCF_IAP2_TX_DATA_TO_REMOTE_RSP				(HCI_VOCF)0x74



/* HCI Vendor OGF UART I2C Group: HCI_VENDOR_OGF_UART_I2C */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------


/* HCI Vendor OGF UART AVRCP Group: HCI_VENDOR_OGF_UART_AVRCP */
//------------------VCMD_OCF------------------
#define HCI_VCMD_OCF_AVRCP_APPLICATION_SETTINGS		(HCI_VOCF)0x04
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_AVRCP_CHANGED_NOTIFY				(HCI_VOCF)0x01
#define HCI_VEVT_OCF_AVRCP_MEDIA_ATTRIBUTES				(HCI_VOCF)0x02
#define HCI_VEVT_OCF_AVRCP_PLAYBACK_POS					(HCI_VOCF)0x03
#define HCI_VEVT_OCF_AVRCP_APPLICATION_SETTINGS			(HCI_VOCF)0x04
#define HCI_VEVT_OCF_AVRCP_APPLICATION_SETTINGS_IND		(HCI_VOCF)0x05


/* HCI Vendor OGF UART Exception Group: HCI_VENDOR_OGF_UART_EXCEPTION */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_EXCEPTION_OCCUR						(HCI_VOCF)0x00
#define HCI_VEVT_OCF_EXCEPTION_OCCUR_AND_DUMP_STACK			(HCI_VOCF)0x01


/* HCI Vendor OGF UART User LightDbgPrint Group: HCI_VENDOR_OGF_UART_USR_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_USR_DBGPRINT_COMPATIBLE_MODE			(HCI_VOCF)0x00
#define HCI_VEVT_OCF_USR_DBGPRINT_COMPATIBLE_MODE_251		(HCI_VOCF)0x01


/* HCI Vendor OGF UART LM LightDbgPrint Group: HCI_VENDOR_OGF_UART_LM_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_LM_DBGPRINT_RX							(HCI_VOCF)0x00
#define HCI_VEVT_OCF_LM_DBGPRINT_TX							(HCI_VOCF)0x01
#define HCI_VEVT_OCF_LM_DBGPRINT_ADD_STATE					(HCI_VOCF)0x02


/* HCI Vendor OGF UART HC LightDbgPrint Group: HCI_VENDOR_OGF_UART_HC_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_HC_DBGPRINT_RX							(HCI_VOCF)0x00
#define HCI_VEVT_OCF_HC_DBGPRINT_TX							(HCI_VOCF)0x01
#define HCI_VEVT_OCF_HC_DBGPRINT_UART_RX_RAW				(HCI_VOCF)0x02


/* HCI Vendor OGF UART L2CAP LightDbgPrint Group: HCI_VENDOR_OGF_UART_L2CAP_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_L2CAP_DBGPRINT_RX_SIGNALLING_PACKET	(HCI_VOCF)0x00
#define HCI_VEVT_OCF_L2CAP_DBGPRINT_TX_SIGNALLING_PACKET	(HCI_VOCF)0x01
#define HCI_VEVT_OCF_L2CAP_DBGPRINT_ROM_INIT				(HCI_VOCF)0x02
#define HCI_VEVT_OCF_L2CAP_DBGPRINT_ROM_DROP_PACKET			(HCI_VOCF)0x03
#define HCI_VEVT_OCF_L2CAP_DBGPRINT_ROM_RECOMBINE			(HCI_VOCF)0x04
#define HCI_VEVT_OCF_L2CAP_DBGPRINT_ROM_DIFF_MEM_PTR		(HCI_VOCF)0x05
#define HCI_VEVT_OCF_L2CAP_DBGPRINT_ROM_SEG3				(HCI_VOCF)0x06
#define HCI_VEVT_OCF_L2CAP_DBGPRINT_ROM_ATT_DATA			(HCI_VOCF)0x07


/* HCI Vendor OGF UART SDAP LightDbgPrint Group: HCI_VENDOR_OGF_UART_SDAP_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------


/* HCI Vendor OGF UART PM LightDbgPrint Group: HCI_VENDOR_OGF_UART_PM_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------


/* HCI Vendor OGF UART RFCOMM LightDbgPrint Group: HCI_VENDOR_OGF_UART_RFCOMM_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------


/* HCI Vendor OGF UART A2DP LightDbgPrint Group: HCI_VENDOR_OGF_UART_A2DP_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------


/* HCI Vendor OGF UART AVDTP LightDbgPrint Group: HCI_VENDOR_OGF_UART_AVDTP_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_AVDTP_DBGPRINT_RX_SIGNALLING_PACKET	(HCI_VOCF)0x00
#define HCI_VEVT_OCF_AVDTP_DBGPRINT_TX_SIGNALLING_PACKET	(HCI_VOCF)0x01
#define HCI_VEVT_OCF_AVDTP_DBGPRINT_MEDIA_PARAMETER			(HCI_VOCF)0x02


/* HCI Vendor OGF UART AVRCP LightDbgPrint Group: HCI_VENDOR_OGF_UART_AVRCP_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_AVRCP_DBGPRINT_RX						(HCI_VOCF)0x00
#define HCI_VEVT_OCF_AVRCP_DBGPRINT_TX						(HCI_VOCF)0x01


/* HCI Vendor OGF UART MMI LightDbgPrint Group: HCI_VENDOR_OGF_UART_MMI_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_MMI_DBGPRINT_KEYCODE					(HCI_VOCF)0x00
#define HCI_VEVT_OCF_MMI_DBGPRINT_KEYCODE_251				(HCI_VOCF)0x01
#define HCI_VEVT_OCF_MMI_DBGPRINT_KEYCODE_NEW				(HCI_VOCF)0x02


/* HCI Vendor OGF UART Driver LightDbgPrint Group: HCI_VENDOR_OGF_UART_DRIVER_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_DRIVER_MAILBOX_CMD						(HCI_VOCF)0x00
#define HCI_VEVT_OCF_DRIVER_MAILBOX_EVT						(HCI_VOCF)0x01
#define HCI_VEVT_OCF_DRIVER_MAILBOX_CMD_STATE_ERROR			(HCI_VOCF)0x02
#define HCI_VEVT_OCF_DRIVER_MAILBOX_VOICE_CMD_RESULT		(HCI_VOCF)0x03


/* HCI Vendor OGF UART HFP LightDbgPrint Group: HCI_VENDOR_OGF_UART_HFP_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_HFP_DBGPRINT_RX						(HCI_VOCF)0x00
#define HCI_VEVT_OCF_HFP_DBGPRINT_TX						(HCI_VOCF)0x01
#define HCI_VEVT_OCF_HFP_DBGPRINT_PLUS_CIND_ORDER			(HCI_VOCF)0x02


/* HCI Vendor OGF UART System LightDbgPrint Group: HCI_VENDOR_OGF_UART_SYS_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_SYS_DBGPRINT_POWER_SAVING_DEVICE_MASK	(HCI_VOCF)0x00


/* HCI Vendor OGF UART MMI LE LightDbgPrint Group: HCI_VENDOR_OGF_UART_MMI_LE_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_MMI_LE_DBGPRINT_ROM_INIT				(HCI_VOCF)0x00
#define HCI_VEVT_OCF_MMI_LE_DBGPRINT_ERROR_STATE			(HCI_VOCF)0x01
#define HCI_VEVT_OCF_MMI_LE_DBGPRINT_ERROR_SUBSTATE			(HCI_VOCF)0x02
#define HCI_VEVT_OCF_MMI_LE_DBGPRINT_ENABLE_ADV				(HCI_VOCF)0x03
#define HCI_VEVT_OCF_MMI_LE_DBGPRINT_GET_META				(HCI_VOCF)0x04
#define HCI_VEVT_OCF_MMI_LE_DBGPRINT_CONN_FAIL				(HCI_VOCF)0x05
#define HCI_VEVT_OCF_MMI_LE_DBGPRINT_CONN_CPL				(HCI_VOCF)0x06
#define HCI_VEVT_OCF_MMI_LE_DBGPRINT_UNEXPECTED_EVT			(HCI_VOCF)0x07
#define HCI_VEVT_OCF_MMI_LE_DBGPRINT_GET_EVT				(HCI_VOCF)0x08
#define HCI_VEVT_OCF_MMI_LE_DBGPRINT_AUTO_OFF				(HCI_VOCF)0x09
#define HCI_VEVT_OCF_MMI_LE_DBGPRINT_KEY_PRESS				(HCI_VOCF)0x0A


/* HCI Vendor OGF UART GAP LightDbgPrint Group: HCI_VENDOR_OGF_UART_GAP_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_GAP_DBGPRINT_LE_DISC					(HCI_VOCF)0x00
#define HCI_VEVT_OCF_GAP_DBGPRINT_LE_GET_META				(HCI_VOCF)0x01
#define HCI_VEVT_OCF_GAP_DBGPRINT_LE_DISCARD_NON_LE			(HCI_VOCF)0x02
#define HCI_VEVT_OCF_GAP_DBGPRINT_LE_ADV_ENABLE				(HCI_VOCF)0x03
#define HCI_VEVT_OCF_GAP_DBGPRINT_LE_CMD_ERROR				(HCI_VOCF)0x04
#define HCI_VEVT_OCF_GAP_DBGPRINT_LE_CMD_CPL				(HCI_VOCF)0x05

/* HCI Vendor OGF UART LL LightDbgPrint Group: HCI_VENDOR_OGF_UART_LL_DBGPRINT */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_LL_DBGPRINT_LLCP_RX		    			(HCI_VOCF)0x00
#define HCI_VEVT_OCF_LL_DBGPRINT_LLCP_TX     				    (HCI_VOCF)0x01



/* HCI Vendor OGF General V2 Group: HCI_VENDOR_OGF_GENERAL_V2 */
//------------------VCMD_OCF------------------
#define HCI_VCMD_OCF_GENERAL_POWER_LEVEL_CONTROL            (HCI_VOCF)0x01
#define HCI_VCMD_OCF_GENERAL_READ_STATUS                    (HCI_VOCF)0x02
#define HCI_VCMD_OCF_GENERAL_MODE_CHANGED                   (HCI_VOCF)0x03
#define HCI_VCMD_OCF_GENERAL_SOFTWARE_RESET                 (HCI_VOCF)0x04
#define HCI_VCMD_OCF_GENERAL_READ_RSSI                      (HCI_VOCF)0x06
#define HCI_VCMD_OCF_GENERAL_WRITE_BD_ADDR                  (HCI_VOCF)0x07

#define HCI_VCMDCODE_GENERAL_POWER_LEVEL_CONTROL             HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_GENERAL_V2,HCI_VCMD_OCF_GENERAL_POWER_LEVEL_CONTROL)
#define HCI_VCMDCODE_GENERAL_READ_STATUS                     HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_GENERAL_V2,HCI_VCMD_OCF_GENERAL_READ_STATUS)
#define HCI_VCMDCODE_GENERAL_MODE_CHANGED                    HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_GENERAL_V2,HCI_VCMD_OCF_GENERAL_MODE_CHANGED)
#define HCI_VCMDCODE_GENERAL_SOFTWARE_RESET                  HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_GENERAL_V2,HCI_VCMD_OCF_GENERAL_SOFTWARE_RESET)
#define HCI_VCMDCODE_GENERAL_READ_RSSI                       HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_GENERAL_V2,HCI_VCMD_OCF_GENERAL_READ_RSSI)
#define HCI_VCMDCODE_GENERAL_WRITE_BD_ADDR                   HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_GENERAL_V2,HCI_VCMD_OCF_GENERAL_WRITE_BD_ADDR)
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_COMMAND_COMPLETE_V2                    (HCI_VOCF)0x01
#define HCI_VEVT_OCF_BOOT_STATUS                            (HCI_VOCF)0x02

#define HCI_VEVTCODE_COMMAMD_COMPLETE                        HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_GENERAL_V2,HCI_VEVT_OCF_COMMAND_COMPLETE_V2)
#define HCI_VEVTCODE_BOOT_STATUS                             HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_GENERAL_V2,HCI_VEVT_OCF_BOOT_STATUS)



/* HCI Vendor OGF Lab Test Group: HCI_VENDOR_OGF_LABTEST */
//------------------VCMD_OCF------------------
#define HCI_VCMD_OCF_LABTEST_START                          (HCI_VOCF)0x01
#define HCI_VCMD_OCF_LABTEST_PAUSE                          (HCI_VOCF)0x02
#define HCI_VCMD_OCF_LABTEST_ENTER_TEST_MODE                (HCI_VOCF)0x03
#define HCI_VCMD_OCF_LABTEST_REPORT_RATE_SETUP              (HCI_VOCF)0x04
#define HCI_VCMD_OCF_LABTEST_SINGLE_TONE_SETUP              (HCI_VOCF)0x05
#define HCI_VCMD_OCF_LABTEST_CTX_DATA                       (HCI_VOCF)0x06
#define HCI_VCMD_OCF_LABTEST_BTX_PACKET                     (HCI_VOCF)0x07
#define HCI_VCMD_OCF_LABTEST_CRX_START                      (HCI_VOCF)0x08
#define HCI_VCMD_OCF_LABTEST_BRX_PACKET                     (HCI_VOCF)0x09
#define HCI_VCMD_OCF_LABTEST_CONFIG_UAP_AND_LAP             (HCI_VOCF)0x0A
#define HCI_VCMD_OCF_LABTEST_CONFIG_TX_IQ_FREQUENCY         (HCI_VOCF)0x0B
#define HCI_VCMD_OCF_LABTEST_CONFIG_WRITE_SFR               (HCI_VOCF)0x0C
#define HCI_VCMD_OCF_LABTEST_CONFIG_READ_SFR                (HCI_VOCF)0x0D
#define HCI_VCMD_OCF_LABTEST_CONFIG_WRITE_XDATA             (HCI_VOCF)0x0E
#define HCI_VCMD_OCF_LABTEST_CONFIG_READ_XDATA              (HCI_VOCF)0x0F
#define HCI_VCMD_OCF_LABTEST_WRITE_THREE_WIRED              (HCI_VOCF)0x10
#define HCI_VCMD_OCF_LABTEST_READ_THREE_WIRED               (HCI_VOCF)0x11
#define HCI_VCMD_OCF_LABTEST_CONTINUOUS_WRITE_SFR_3WIRED    (HCI_VOCF)0x12
#define HCI_VCMD_OCF_LABTEST_READ_ADC0                      (HCI_VOCF)0x13
#define HCI_VCMD_OCF_LABTEST_CHARGER_BAND_GAP_CALIBRATION   (HCI_VOCF)0x14
#define HCI_VCMD_OCF_LABTEST_CHARGER_CAL_4V2_DAC_TEST       (HCI_VOCF)0x15
#define HCI_VCMD_OCF_LABTEST_CONFIG_WRITE_CSR               (HCI_VOCF)0x16
#define HCI_VCMD_OCF_LABTEST_CONFIG_READ_CSR                (HCI_VOCF)0x17
#define HCI_VCMD_OCF_LABTEST_CONTINUOUS_WRITE_3WIRED        (HCI_VOCF)0x18
#define HCI_VCMD_OCF_LABTEST_READ_SAR_ADC                   (HCI_VOCF)0x19
#define HCI_VCMD_OCF_LABTEST_CONFIG_WRITE_BD_ADDR           (HCI_VOCF)0x1A
#define HCI_VCMD_OCF_LABTEST_LE_RECEIVER_TEST               (HCI_VOCF)0x1B
#define HCI_VCMD_OCF_LABTEST_LE_TRANSMITTER_TEST            (HCI_VOCF)0x1C
#define HCI_VCMD_OCF_LABTEST_LE_TRX_END                     (HCI_VOCF)0x1D

#define HCI_VCMDCODE_LABTEST_START                           HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_START)
#define HCI_VCMDCODE_LABTEST_PAUSE                           HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_PAUSE)
#define HCI_VCMDCODE_LABTEST_ENTER_TEST_MODE                 HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_ENTER_TEST_MODE)
#define HCI_VCMDCODE_LABTEST_REPORT_RATE_SETUP               HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_REPORT_RATE_SETUP)
#define HCI_VCMDCODE_LABTEST_SINGLE_TONE_SETUP               HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_SINGLE_TONE_SETUP)
#define HCI_VCMDCODE_LABTEST_CTX_DATA                        HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_CTX_DATA)
#define HCI_VCMDCODE_LABTEST_BTX_PACKET                      HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_BTX_PACKET)
#define HCI_VCMDCODE_LABTEST_CRX_START                       HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_CRX_START)
#define HCI_VCMDCODE_LABTEST_BRX_PACKET                      HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_BRX_PACKET)
#define HCI_VCMDCODE_LABTEST_CONFIG_UAP_AND_LAP              HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_CONFIG_UAP_AND_LAP)
#define HCI_VCMDCODE_LABTEST_CONFIG_TX_IQ_FREQUENCY          HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_CONFIG_TX_IQ_FREQUENCY)
#define HCI_VCMDCODE_LABTEST_CONFIG_WRITE_SFR                HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_CONFIG_WRITE_SFR)
#define HCI_VCMDCODE_LABTEST_CONFIG_READ_SFR                 HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_CONFIG_READ_SFR)
#define HCI_VCMDCODE_LABTEST_CONFIG_WRITE_XDATA              HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_CONFIG_WRITE_XDATA)
#define HCI_VCMDCODE_LABTEST_CONFIG_READ_XDATA               HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_CONFIG_READ_XDATA)
#define HCI_VCMDCODE_LABTEST_WRITE_THREE_WIRED               HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_WRITE_THREE_WIRED)
#define HCI_VCMDCODE_LABTEST_READ_THREE_WIRED                HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_READ_THREE_WIRED)
#define HCI_VCMDCODE_LABTEST_CONTINUOUS_WRITE_SFR_3WIRED     HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_CONTINUOUS_WRITE_SFR_3WIRED)
#define HCI_VCMDCODE_LABTEST_READ_ADC0                       HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_READ_ADC0)
#define HCI_VCMDCODE_LABTEST_BAND_GAP_CALIBRATION            HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_CHARGER_BAND_GAP_CALIBRATION)
#define HCI_VCMDCODE_LABTEST_CAL_4V2_DAC_TEST                HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_CHARGER_CAL_4V2_DAC_TEST)
#define HCI_VCMDCODE_LABTEST_CONFIG_WRITE_CSR                HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_CONFIG_WRITE_CSR)
#define HCI_VCMDCODE_LABTEST_CONFIG_READ_CSR                 HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_CONFIG_READ_CSR)
#define HCI_VCMDCODE_LABTEST_CONTINUOUS_WRITE_3WIRED         HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_CONTINUOUS_WRITE_3WIRED)
#define HCI_VCMDCODE_LABTEST_READ_SAR_ADC                    HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_READ_SAR_ADC)
#define HCI_VCMDCODE_LABTEST_CONFIG_WRITE_BD_ADDR            HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_CONFIG_WRITE_BD_ADDR)
#define HCI_VCMDCODE_LABTEST_LE_RECEIVER_TEST                HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_LE_RECEIVER_TEST)
#define HCI_VCMDCODE_LABTEST_LE_TRANSMITTER_TEST             HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_LE_TRANSMITTER_TEST)
#define HCI_VCMDCODE_LABTEST_LE_TRX_END                      HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VCMD_OCF_LABTEST_LE_TRX_END)
//------------------VEVT_OCF------------------
#define HCI_VEVT_OCF_BTX_REPORT                              (HCI_VOCF)0x01
#define HCI_VEVT_OCF_CRX_REPORT                              (HCI_VOCF)0x02
#define HCI_VEVT_OCF_BRX_REPORT                              (HCI_VOCF)0x03
#define HCI_VEVT_OCF_BER_REPORT                              (HCI_VOCF)0x04
#define HCI_VEVT_OCF_CALIBRATION_4V2_DAC_TEST_REPORT         (HCI_VOCF)0x05
#define HCI_VEVT_OCF_LE_RX_TEST_REPORT                       (HCI_VOCF)0x06
#define HCI_VEVT_OCF_LE_TX_TEST_REPORT                       (HCI_VOCF)0x07
#define HCI_VEVT_OCF_DBG_PRINT                               (HCI_VOCF)0xFE
#define HCI_VEVTCODE_BTX_REPORT                              HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VEVT_OCF_BTX_REPORT)
#define HCI_VEVTCODE_CRX_REPORT                              HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VEVT_OCF_CRX_REPORT)
#define HCI_VEVTCODE_BRX_REPORT                              HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VEVT_OCF_BRX_REPORT)
#define HCI_VEVTCODE_BER_REPORT                              HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VEVT_OCF_BER_REPORT)
#define HCI_VEVTCODE_CALIBRATION_4V2_DAC_TEST_REPORT         HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VEVT_OCF_CALIBRATION_4V2_DAC_TEST_REPORT)
#define HCI_VEVTCODE_LE_RX_TEST_REPORT                       HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VEVT_OCF_LE_RX_TEST_REPORT)
#define HCI_VEVTCODE_LE_TX_TEST_REPORT                       HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_LABTEST,HCI_VEVT_OCF_LE_TX_TEST_REPORT)


/* HCI Vendor OGF UART Opp Group: HCI_VENDOR_OGF_UART_OPP */
//------------------VCMD_OCF------------------
#define HCI_VEVT_OCF_OPP_DATA_SINGLE	(HCI_VOCF)0x10
#define HCI_VEVT_OCF_OPP_DATA_START		(HCI_VOCF)0x11
#define HCI_VEVT_OCF_OPP_DATA_CONTINUE	(HCI_VOCF)0x12
#define HCI_VEVT_OCF_OPP_DATA_END		(HCI_VOCF)0x13
//------------------VEVT_OCF------------------


/* HCI Vendor OGF Bist Group: HCI_VENDOR_OGF_BIST */
//------------------VCMD_OCF------------------
#define HCI_VCMD_OCF_RF_BIST_INITIALIZATION                 (HCI_VOCF)0x01
#define HCI_VCMD_OCF_RF_BIST_TX_DAC_GAIN_CALIBRATION        (HCI_VOCF)0x02
#define HCI_VCMD_OCF_RF_BIST_RX_ADC_GAIN_CALIBRATION        (HCI_VOCF)0x03
#define HCI_VCMD_OCF_RF_BIST_RX_SIDEBAND_RF                 (HCI_VOCF)0x04
#define HCI_VCMD_OCF_RF_BIST_RX_BANDWIDTH_REPORT_RF         (HCI_VOCF)0x05
#define HCI_VCMD_OCF_RF_BIST_IM3                            (HCI_VOCF)0x06
#define HCI_VCMD_OCF_RF_BIST_IM3_RF                         (HCI_VOCF)0x07
#define HCI_VCMD_OCF_RF_BIST_SNR_REPORT_RF                  (HCI_VOCF)0x08
#define HCI_VCMD_OCF_RF_BIST_PHASE_NOISE_REPORT_RF          (HCI_VOCF)0x09
#define HCI_VCMD_OCF_RF_BIST_AUDIO_BIST                     (HCI_VOCF)0x0A
#define HCI_VCMD_OCF_RF_BIST_AUDIO_REPORT_IO                (HCI_VOCF)0x0B

#define HCI_VCMDCODE_RF_BIST_INITIALIZATION                  HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_BIST,HCI_VCMD_OCF_RF_BIST_INITIALIZATION)
#define HCI_VCMDCODE_RF_BIST_TX_DAC_GAIN_CALIBRATION         HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_BIST,HCI_VCMD_OCF_RF_BIST_TX_DAC_GAIN_CALIBRATION)
#define HCI_VCMDCODE_RF_BIST_RX_ADC_GAIN_CALIBRATION         HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_BIST,HCI_VCMD_OCF_RF_BIST_RX_ADC_GAIN_CALIBRATION)
#define HCI_VCMDCODE_RF_BIST_RX_SIDEBAND_RF                  HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_BIST,HCI_VCMD_OCF_RF_BIST_RX_SIDEBAND_RF)
#define HCI_VCMDCODE_RF_BIST_RX_BANDWIDTH_REPORT_RF          HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_BIST,HCI_VCMD_OCF_RF_BIST_RX_BANDWIDTH_REPORT_RF)
#define HCI_VCMDCODE_RF_BIST_IM3                             HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_BIST,HCI_VCMD_OCF_RF_BIST_IM3)
#define HCI_VCMDCODE_RF_BIST_IM3_RF                          HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_BIST,HCI_VCMD_OCF_RF_BIST_IM3_RF)
#define HCI_VCMDCODE_RF_BIST_SNR_REPORT_RF                   HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_BIST,HCI_VCMD_OCF_RF_BIST_SNR_REPORT_RF)
#define HCI_VCMDCODE_RF_BIST_PHASE_NOISE_REPORT_RF           HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_BIST,HCI_VCMD_OCF_RF_BIST_PHASE_NOISE_REPORT_RF)
#define HCI_VCMDCODE_RF_BIST_AUDIO_BIST                      HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_BIST,HCI_VCMD_OCF_RF_BIST_AUDIO_BIST)
#define HCI_VCMDCODE_RF_BIST_AUDIO_REPORT_IO                 HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_BIST,HCI_VCMD_OCF_RF_BIST_AUDIO_REPORT_IO)
//------------------VEVT_OCF------------------


/* HCI Vendor OGF UART FCD Group: HCI_VENDOR_OGF_UART_FCD */
//------------------VCMD_OCF------------------
#define HCI_VEVT_OCF_FCD_DEV_ADDR		(HCI_VOCF)0x11
#define HCI_VEVT_OCF_FCD_DEV_NAME		(HCI_VOCF)0x12
#define HCI_VEVT_OCF_FCD_DEV_RSSI		(HCI_VOCF)0x13
#define HCI_VEVT_OCF_FCD_ACL_DISC		(HCI_VOCF)0x14
#define HCI_VEVT_OCF_FCD_ACP_CALL		(HCI_VOCF)0x15
#define HCI_VEVT_OCF_FCD_REJ_CALL		(HCI_VOCF)0x16
#define HCI_VEVT_OCF_FCD_END_CALL		(HCI_VOCF)0x17
#define HCI_VEVT_OCF_FCD_VOL_HFP		(HCI_VOCF)0x18
#define HCI_VEVT_OCF_FCD_VOL_A2DP		(HCI_VOCF)0x19
#define HCI_VEVT_OCF_FCD_PLAY_MUSIC		(HCI_VOCF)0x1A
#define HCI_VEVT_OCF_FCD_PAUSE_MUSIC	(HCI_VOCF)0x1B
#define HCI_VEVT_OCF_FCD_NEXT_TRACK		(HCI_VOCF)0x1C
#define HCI_VEVT_OCF_FCD_PREV_TRACK		(HCI_VOCF)0x1D
//------------------VEVT_OCF------------------


/* HCI Vendor OGF UART Driver Group: HCI_VENDOR_OGF_DRIVER */
//------------------VCMD_OCF------------------
#define HCI_VCMD_OCF_DRIVER_I2C_ACK                         (HCI_VOCF)0x01

#define HCI_VCMDCODE_DRIVER_I2C_ACK                         HCI_COMBINED_VOPCODE(HCI_VENDOR_OGF_DRIVER,HCI_VCMD_OCF_DRIVER_I2C_ACK)
//------------------VEVT_OCF------------------


/* HCI Vendor OGF UART LE Cmd Group: HCI_VENDOR_OGF_UART_LE_CMD */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------


/* HCI Vendor OGF UART LE Resp Group: HCI_VENDOR_OGF_UART_LE_RESP */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------


/* HCI Vendor OGF UART LE Data Resp Group: HCI_VENDOR_OGF_UART_LE_DATA_RESP */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------


/* HCI Vendor OGF App Command Group: HCI_VENDOR_OGF_AIRAPP_CMD */
//------------------VCMD_OCF------------------
// all rest command code is the same as HCI_VENDOR_OGF_UART_CMD
#define AIRAPP_CMD_KEY_MMI_KEY_EVENT			0x01
#define AIRAPP_CMD_KEY_CONNECTED_TO_CONNECTABLE 0x05
#define AIRAPP_CMD_SUSPEND_DSP 					0x10
#define AIRAPP_CMD_RESUME_DSP 					0x11
#define AIRAPP_CMD_KEY_RESET_PAIRED_DEVICES		0x1B
#define AIRAPP_CMD_KEY_VOICE_PROMPT_ENABLE		0x21
#define AIRAPP_CMD_KEY_VOICE_PROMPT_DISABLE		0x22
#define AIRAPP_CMD_KEY_VOICE_PROMPT_LANG_CHANGE	0x23
#define AIRAPP_CMD_SET_MASTER_AT_GAIN_CHANGE	0x30
#define AIRAPP_CMD_SET_SLAVE_AT_GAIN_CHANGE		0x31
#define AIRAPP_CMD_GET_MASTER_AT_GAIN			0x32
#define AIRAPP_CMD_GET_SLAVE_AT_GAIN			0x33
#define AIRAPP_CMD_GET_MASTER_AT_STATUS			0x34
#define AIRAPP_CMD_GET_SLAVE_AT_STATUS			0x35
#define AIRAPP_CMD_KEY_PEQ_MODE_CHANGE			0x62
#define AIRAPP_CMD_WRITE_DEVICE_NAME			0xA2
#define AIRAPP_CMD_PARSING_AE_SECTOR			0xA3
#define AIRAPP_CMD_SET_VOL						0xAB
#define AIRAPP_CMD_FIND_MY_ACCESSORY			0xB7
#define AIRAPP_CMD_GET_BATTERY_RIGHT_CHANNEL	0xB8
#define AIRAPP_CMD_GET_CHGBAT_STATUS			0XB9
#define AIRAPP_CMD_GET_CHGBAT_STATUS_FOLLOWER	0XBA
#define AIRAPP_CMD_SET_REALTIME_PEQ_HPF			0XBB
#define AIRAPP_CMD_SET_DEFAULT_PEQ_MODE			0XBC
#define AIRAPP_CMD_CHANNEL_INFORMATION			0xBD
#define AIRAPP_CMD_GET_SYNCHRONIZE_DATA			0xF0
#define AIRAPP_CMD_ON_OFF_MUSIC_YOU_CAN_SEE		0xF1 //for #define LIGHTING_ENABLE
#define AIRAPP_CMD_GET_COLOR_PICKER_RGB			0xF2 //for #define LIGHTING_ENABLE
#define AIRAPP_CMD_LIGHTING_MODE_SELECT			0xF3 //for #define LIGHTING_ENABLE
#define AIRAPP_CMD_ALARM_CLOCK					0xF4 //for #define LIGHTING_ENABLE
#define AIRAPP_CMD_GET_DEVICE_NAME				0xF5
#define AIRAPP_CMD_SET_VP_LANG					0xF6
#define AIRAPP_CMD_SET_PEQ_A2DP					0xF7
#define AIRAPP_CMD_SET_PEQ_AUX					0xF8
#define AIRAPP_CMD_GET_BATTERY					0xF9
#define AIRAPP_CMD_GET_PEQ						0xFA
#define AIRAPP_CMD_GET_VOICE_PROMPT				0xFB
#define AIRAPP_CMD_GET_VOLUME					0xFC
#define AIRAPP_CMD_SET_CALLERNAME				0xFE
#ifdef BLE_AIRApp
#define AIRAPP_CMD_SET_TARGET_LINK_INDEX        0xFD
#define AIRAPP_CMD_SET_LE_CONN_INTERVAL         0xFF
#endif

//------------------VEVT_OCF------------------
/* HCI Vendor OGF App Unsolicited Group: HCI_VENDOR_OGF_AIRAPP_IND_UNSOLICITED */
#define AIRAPP_IND_REPORT_BAT_STATUS			0xE0
#define AIRAPP_IND_REPORT_VP_STATUS				0xE1
#define AIRAPP_IND_REPORT_VP_LANG				0xE2
#define AIRAPP_IND_REPORT_PEQ_A2DP_CHANGE		0xE3
#define AIRAPP_IND_REPORT_PEQ_AUX_CHANGE		0xE4
#define AIRAPP_IND_REPORT_VOL_CHANGE			0xE5
#ifdef BLE_AIRApp
#define AIRAPP_IND_REPORT_LINK_STATUS			0xE6
#endif
#define AIRAPP_IND_INCOMING_CALL_STATUS			0xE7
#define AIRAPP_IND_DUMP_MIC_DATA				0xE8
#define AIRAPP_IND_REPORT_PEQ_SECTOR_CHANGE	    0xE9


/* HCI Vendor OGF App Command Group: HCI_VENDOR_OGF_AIRAPP_CMD_EX */
#define AIRAPP_CMD_GET_LINK_STATUS				0x01
#define AIRAPP_CMD_MUTE_SPK						0x02

/* HCI Vendor OGF App Command Group: HCI_VENDOR_OGF_AIRAPP_PASSTHROUGH_TRANSFER_CMD */
#define AIRAPP_CMD_PASSTHROUGH_FROM_APP_TO_BT	0x01
#define AIRAPP_CMD_PASSTHROUGH_FROM_UART_TO_BT	0x02

/* HCI Vendor OGF App Command Group: HCI_VENDOR_OGF_AIRAPP_PASSTHROUGH_TRANSFER_RSP */
#define AIRAPP_RSP_PASSTHROUGH_FROM_APP_TO_BT	0x01
#define AIRAPP_RSP_PASSTHROUGH_FROM_BT_TO_UART	0x02
#define AIRAPP_RSP_PASSTHROUGH_FROM_BT_TO_APP	0x03

 /*
 * AIROHA proprietory HCI Error Code
 */
#define HCI_ERRCODE_EXTENDED_VENDOR_ERROR_CODE              (HCI_ERRCODE)0xFE
#define HCI_ERRCODE_BAND_GAP_CALIBRATION_FAILED             (HCI_ERRCODE)0xFF


/*
 * HCI Vendor Command Format
 */
typedef struct stru_hci_vendor_command_opcode_stru
{
	U8 VCmdOcf;
	U8 VCmdOgf;
} HCI_VCMD_OPCODE_STRU;

/*
 * HCI Vendor Command Prototype
 */
typedef struct stru_hci_vcmd
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    U8 Para[1];

} HCI_VCMD_STRU, OS_PTR HCI_VCMD_STRU_PTR;


typedef struct stru_hci_vcmd_rtn_para_cmd_cpl
{
    U8 Status;
	HCI_VCMD_OPCODE_STRU VOpCode;
} HCI_VCMD_RTN_PARA_CMD_CPL;


/*
 * 06.01 HCI Airoha Audio Switch Command
 */
typedef struct stru_hci_vcmd_para_audio_switch
{
    U8 ScoHandleB0;
    U8 ScoHandleB1;
    U8 IsMute;

} HCI_VCMD_PARA_AUDIO_SWITCH;

typedef struct stru_hci_vcmd_audio_switch
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_AUDIO_SWITCH Para;

} HCI_VCMD_AUDIO_SWITCH;

enum
{
	AUDIO_SWITCH_OK,
	AUDIO_SWITCH_SCO_HANDLE_ERROR,
	AUDIO_SWITCH_NO_SCO_ENABLED,
};

typedef struct stru_hci_vcmd_rtn_para_audio_switch
{
    HCI_VCMD_RTN_PARA_CMD_CPL vcmdCpl;
    U8 ScoHandleB0;
    U8 ScoHandleB1;
} HCI_VCMD_RTN_PARA_AUDIO_SWITCH;

/*
 * 06.04 HCI Airoha enhance eSCO latency Command
 */
typedef struct stru_hci_vcmd_para_enhance_esco_latency
{
    U8 ScoHandleB0;
    U8 ScoHandleB1;
    U8 IsEnable;
} HCI_VCMD_PARA_ENHANCE_ESCO_LATENCY;

/*
 * 06.05 HCI Airoha SCO Null Packet Command
 */
typedef struct stru_hci_vcmd_para_sco_null_pkt
{
    U8 ScoHandleB0;
    U8 ScoHandleB1;
    U8 IsNullPkt;
} HCI_VCMD_PARA_SCO_NULL_PACKET;

typedef struct stru_hci_vcmd_sco_null_pkt
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_SCO_NULL_PACKET Para;

} HCI_VCMD_SCO_NULL_PACKET;

typedef struct stru_hci_vcmd_rtn_para_sco_null_pkt
{
    HCI_VCMD_RTN_PARA_CMD_CPL vcmdCpl;
	U8 IsEnable;
} HCI_VCMD_RTN_PARA_SCO_NULL_PACKET;

/*
 * 06.06 HCI Airoha Setup QoS Command
 */
typedef struct stru_hci_vcmd_para_setup_qos
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    U8 Flag;
    U8 ServiceType;
    U8 TokenRate[4];
    U8 PeakBandwidth[4];
    U8 Latency[4];
    U8 DelayVariation[4];
    U8 FlowStatus;
    U8 RxFull;

} HCI_VCMD_PARA_AUDIO_SETUP_QOS;

typedef struct stru_hci_vcmd_setup_qos
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_AUDIO_SETUP_QOS Para;

} HCI_VCMD_AUDIO_SETUP_QOS;

typedef struct stru_hci_vcmd_rtn_para_setup_qos
{
    HCI_VCMD_RTN_PARA_CMD_CPL vcmdCpl;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
} HCI_VCMD_RTN_PARA_AUDIO_SETUP_QOS;


/*
 * 30.01 HCI Airoha General Power Level Control Command
 */
typedef struct stru_hci_vcmd_para_gnl_pwr_lv_ctrl
{
    U8 ConstrainedPowerLv;

} HCI_VCMD_PARA_GNL_PWR_LV_CTRL;

typedef struct stru_hci_vcmd_gnl_pwr_lv_ctrl
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_GNL_PWR_LV_CTRL Para;

} HCI_VCMD_GNL_PWR_LV_CTRL;

typedef struct stru_hci_vcmd_rtn_para_gnl_pwr_lv_ctrl
{
    U8 Status;

} HCI_VCMD_RTN_PARA_GNL_PWR_LV_CTRL;


/*
 * 30.02 HCI Airoha General Read Status Command
 */
enum
{
	HCI_VCMD_GENERAL_PWR_SAVING_CTL = 0x01,
	HCI_VCMD_GENERAL_READ_STATUS_V2 = 0x02,
	HCI_VCMD_GENERAL_READ_ROMVERSION_V2 = 0x03
};

typedef U8 INFO_TYPE;
#define AIRO_INFO_TYPE_ROM_VERSION			(INFO_TYPE)0x01
#define AIRO_INFO_TYPE_BOOT_STATUS			(INFO_TYPE)0x81
#define AIRO_INFO_TYPE_FLASH_INFO			(INFO_TYPE)0x82
#define AIRO_INFO_TYPE_POWER_LEVEL			(INFO_TYPE)0x83
#define AIRO_INFO_TYPE_WORKING_AREA			(INFO_TYPE)0x84
/*
 * 0x01 ROM Version Descriptor
 */
typedef struct stru_airo_info_para_rom_ver
{
    U8 AsicROMVer[sizeof(SYS_ASIC_ROM_VERSION_STRING)];

} AIRO_INFO_PARA_ROM_VER_STRU;

typedef struct stru_airo_info_rom_ver
{
    U8 Type;
    U8 InfoLen;
    AIRO_INFO_PARA_ROM_VER_STRU Info;

} AIRO_INFO_ROM_VER_STRU;


/*
 * 0x81 Boot Status Descriptor
 */
typedef struct stru_airo_info_para_boot_status
{
    SYS_MODE SysMode;
    U16 BootReason;

} AIRO_INFO_PARA_BOOT_STATUS_STRU;

typedef struct stru_airo_info_boot_status
{
    U8 Type;
    U8 InfoLen;
    AIRO_INFO_PARA_BOOT_STATUS_STRU Info;

} AIRO_INFO_BOOT_STATUS_STRU;


/*
 * 0x82 Flash-Info Descriptor
 */
typedef struct stru_airo_info_para_flsh_info
{
    U8 ManufacturerID;
    U8 MemType2;
    U8 FlashStatus;
    #if defined(AB1520B) || defined(AB1520C) || (defined AB1520D)
    #else
    U8 MemType;
    #endif

} AIRO_INFO_PARA_FLSH_INFO_STRU;

typedef struct stru_airo_info_flsh_info
{
    U8 Type;
    U8 InfoLen;
    AIRO_INFO_PARA_FLSH_INFO_STRU Info;
} AIRO_INFO_FLSH_INFO_STRU;


/*
 * 0x83 Power Level Descriptor
 */
typedef struct stru_airo_info_para_pwr_level
{
    SYS_POWER_LV AdaptivePowerLv;
    SYS_POWER_LV ConstrainedPowerLv;

} AIRO_INFO_PARA_POWER_LEVEL_STRU;

typedef struct stru_airo_info_pwr_level
{
    U8 Type;
    U8 InfoLen;
    AIRO_INFO_PARA_POWER_LEVEL_STRU Info;

} AIRO_INFO_POWER_LEVEL_STRU;

/*
 * 0x84 Working Area Descriptor
 */
typedef struct stru_airo_info_para_working_area
{
    U8 UsedArea;

} AIRO_INFO_PARA_WORKING_AREA_STRU;

typedef struct stru_airo_info_working_area
{
    U8 Type;
    U8 InfoLen;
    AIRO_INFO_PARA_WORKING_AREA_STRU Info;

} AIRO_INFO_WORKING_AREA_STRU;



/* Airo-Info Descriptor Prototype */
typedef struct stru_airo_info_descriptor
{
    AIRO_INFO_ROM_VER_STRU RomVer;
    AIRO_INFO_BOOT_STATUS_STRU BootStatus;
    AIRO_INFO_FLSH_INFO_STRU FlashInfo;
    AIRO_INFO_POWER_LEVEL_STRU PowerLv;
    AIRO_INFO_WORKING_AREA_STRU WorkingArea;

} AIRO_INFO_DESCRIPTOR_STRU;

typedef struct stru_hci_vcmd_rtn_para_gnl_rd_status
{
    U8 Status;
    AIRO_INFO_DESCRIPTOR_STRU AiroInfo;

} HCI_VCMD_RTN_PARA_GNL_RD_STATUS;


/*
 * 30.03 HCI Airoha General Mode Changed Command
 */
typedef struct stru_hci_vcmd_para_gnl_mode_changed
{
    SYS_MODE SysMode ;

} HCI_VCMD_PARA_GNL_MODE_CHANGED;

typedef struct stru_hci_vcmd_gnl_mode_changed
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_GNL_MODE_CHANGED Para;

} HCI_VCMD_GNL_MODE_CHANGED;


/*
 * 30.06 HCI Airoha General Read RSSI Command
 */
typedef struct stru_hci_vcmd_para_gnl_read_rssi
{
    U8 ConnHdlB0;
    U8 ConnHdlB1;

} HCI_VCMD_PARA_GNL_RD_RSSI_STRU;

typedef struct stru_hci_vcmd_gnl_rd_rssi
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_GNL_RD_RSSI_STRU Para;

} HCI_VCMD_GNL_RD_RSSI_STRU;

typedef struct stru_hci_vcmd_rtn_para_read_rssi
{
    U8 Status;
    U8 ConnHdlB0;
    U8 ConnHdlB1;
    S8 Rssi;

} HCI_VCMD_RTN_PARA_GNL_RD_RSSI_STRU;

/*
 * 30.07 HCI Airoha General Write BD ADDR Command
 */
typedef struct stru_hci_vcmd_para_gnl_write_bd_addr
{
  BD_ADDR_STRU BdAddr;

} HCI_VCMD_PARA_GNL_WRITE_BD_ADDR;

typedef struct stru_hci_vcmd_gnl_write_bd_addr
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_GNL_WRITE_BD_ADDR Para;

} HCI_VCMD_GNL_WRITE_BD_ADDR;

typedef struct stru_hci_vcmd_rtn_para_write_bd_addr
{
    U8 Status;

} HCI_VCMD_RTN_PARA_GNL_WRITE_BD_ADDR_STRU;

/*
 * 31.01 HCI Airoha LabTest Start
 */
typedef struct stru_hci_vcmd_rtn_para_labtest_start
{
    U8 Status;

} HCI_VCMD_RTN_PARA_LABTEST_START;


/*
 * 31.03 HCI Airoha LabTest Enter Test Mode Command
 */
typedef struct stru_hci_vcmd_rtn_para_labtest_ent_test_mode
{
    U8 Status;

} HCI_VCMD_RTN_PARA_LABTEST_ENT_TEST_MODE;


/*
 * 31.04 HCI Airoha LabTest Report Rate Setup
 */
typedef struct stru_hci_vcmd_para_labtest_rpt_rate_setup
{
    U8 RptRateB0;
    U8 RptRateB1;

} HCI_VCMD_PARA_LABTEST_RPT_RATE_SETUP;

typedef struct stru_hci_vcmd_labtest_rpt_rate_setup
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_RPT_RATE_SETUP Para;

} HCI_VCMD_LABTEST_RPT_RATE_SETUP;

typedef struct stru_hci_vcmd_rtn_para_labtest_rpt_rate_setup
{
    U8 Status;

} HCI_VCMD_RTN_PARA_LABTEST_RPT_RATE_SETUP;


/*
 * 31.05 HCI Airoha LabTest Tx1 Setup
 */
typedef struct stru_hci_vcmd_para_labtest_tx1_setup
{
    U8 Channel;
    U8 Gc2;
    U8 Gc1;
    U8 Bias2_2;
    U8 Bias2_1;

} HCI_VCMD_PARA_LABTEST_TX1_SETUP;

typedef struct stru_hci_vcmd_labtest_tx1_setup
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_TX1_SETUP Para;

} HCI_VCMD_LABTEST_TX1_SETUP;


/*
 * 31.06 HCI Airoha LabTest CTx Data
 */
typedef struct stru_hci_vcmd_para_labtest_ctx_data
{
    U8 Channel;
    U8 Gc2;
    U8 Gc1;
    U8 Bias2_2;
    U8 Bias2_1;
    U8 PatternType;
    U8 ModType;

} HCI_VCMD_PARA_LABTEST_CTX_DATA;

typedef struct stru_hci_vcmd_labtest_ctx_data
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_CTX_DATA Para;

} HCI_VCMD_LABTEST_CTX_DATA;


/*
 * 31.07 HCI Airoha LabTest BTx Packet
 */

#define HC_SYM_DATA_ALL0        (0x00)
#define HC_SYM_DATA_ALL1        (0x01)
#define HC_SYM_DATA_1010        (0x10)
#define HC_SYM_DATA_11110000    (0x20)
#define HC_SYM_DATA_PNSEQ       (0x30)

typedef struct stru_hci_vcmd_para_labtest_btx_packet
{
    U8 Channel;
    U8 Gc2;
    U8 Gc1;
    U8 Bias2_2;
    U8 Bias2_1;
    U8 PacketType;
    U8 PacketSizeB0;
    U8 PacketSizeB1;
    U8 DataType;
    U8 EDREnb;
    U8 HopEnb;
    U8 ESCOEnb;
    U8 TempCompInvlB0;
    U8 TempCompInvlB1;
    U8 BdrMaxGain;
    U8 BdrMinGain;
    U8 EdrMaxGain;
    U8 EdrMinGain;
    U8 BleMaxGain;
    U8 BleMinGain;
    MOD_GAIN_COMP_STRU ModGainTable;
    MP_MOD_GAIN_COMP_STRU MpModGainTable;

} HCI_VCMD_PARA_LABTEST_BTX_PACKET;

typedef struct stru_hci_vcmd_labtest_btx_packet
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_BTX_PACKET Para;

} HCI_VCMD_LABTEST_BTX_PACKET;


/*
 * 31.08 HCI Airoha LabTest CRx Start
 */
typedef struct stru_hci_vcmd_para_labtest_crx_start
{
    U8 Channel;
    U8 HighSide;
    U8 ReptRssi;

} HCI_VCMD_PARA_LABTEST_CRX_START;

typedef struct stru_hci_vcmd_labtest_crx_start
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_CRX_START Para;

} HCI_VCMD_LABTEST_CRX_START;


/*
 * 31.09 HCI Airoha LabTest BRx Packet
 */
typedef struct stru_hci_vcmd_para_labtest_brx_packet
{
    U8 Channel;
    U8 HopEnb;
    U8 HighSide;
    U8 EDREnb;
    U8 DVEnb;
    U8 ReptBER;
    U8 ESCOEnb;
    U8 ESCOPayloadLenB0;
    U8 ESCOPayloadLenB1;

} HCI_VCMD_PARA_LABTEST_BRX_PACKET;

typedef struct stru_hci_vcmd_labtest_brx_packet
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_BRX_PACKET Para;

} HCI_VCMD_LABTEST_BRX_PACKET;


/*
 * 31.0A HCI Airoha LabTest Config. UAP LAP Command
 */
typedef struct stru_hci_vcmd_para_labtest_cfg_uap_lap
{
    U8 LAP[3];
    U8 UAP[1];
    U8 NAP[2];

} HCI_VCMD_PARA_LABTEST_CFG_UAP_LAP;

typedef struct stru_hci_vcmd_labtest_cfg_uap_lap
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_CFG_UAP_LAP Para;

} HCI_VCMD_LABTEST_CFG_UAP_LAP;



/*
 * 31.0C HCI Airoha LabTest Config. Write SFR Command
 */
typedef struct stru_hci_vcmd_para_labtest_cfg_wr_sfr
{
    U8 Value;
    U8 Offset;
    U8 Bank;

} HCI_VCMD_PARA_LABTEST_CFG_WR_SFR;

typedef struct stru_hci_vcmd_labtest_cfg_wr_sfr
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_CFG_WR_SFR Para;

} HCI_VCMD_LABTEST_CFG_WR_SFR;

typedef struct stru_hci_vcmd_rtn_para_labtest_cfg_wr_sfr
{
    U8 Status;

} HCI_VCMD_RTN_PARA_LABTEST_CFG_WR_SFR;


/*
 * 31.0D HCI Airoha LabTest Config. Read SFR Command
 */
typedef struct stru_hci_vcmd_para_labtest_cfg_rd_sfr
{
    U8 Offset;
    U8 Bank;

} HCI_VCMD_PARA_LABTEST_CFG_RD_SFR;

typedef struct stru_hci_vcmd_labtest_cfg_rd_sfr
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_CFG_RD_SFR Para;

} HCI_VCMD_LABTEST_CFG_RD_SFR;

typedef struct stru_hci_vcmd_rtn_para_labtest_cfg_rd_sfr
{
    U8 Status;
    U8 Value;
    U8 Offset;
    U8 Bank;

} HCI_VCMD_RTN_PARA_LABTEST_CFG_RD_SFR;


/*
 * 31.0E HCI Airoha LabTest Config. Write XDATA Command
 */
typedef struct stru_hci_vcmd_para_labtest_cfg_wr_xdata
{
    U8 StartAddrB0;
    U8 StartAddrB1;
    U8 Length;
    U8 Data[1];

} HCI_VCMD_PARA_LABTEST_CFG_WR_XDATA;

typedef struct stru_hci_vcmd_labtest_cfg_wr_xdata
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_CFG_WR_XDATA Para;

} HCI_VCMD_LABTEST_CFG_WR_XDATA;

typedef struct stru_hci_vcmd_rtn_para_labtest_cfg_wr_xdata
{
    U8 Status;

} HCI_VCMD_RTN_PARA_LABTEST_CFG_WR_XDATA;


/*
 * 31.0F HCI Airoha LabTest Config. Read XDATA Command
 */
typedef struct stru_hci_vcmd_para_labtest_cfg_rd_xdata
{
    U8 StartAddrB0;
    U8 StartAddrB1;
    U8 Length;

} HCI_VCMD_PARA_LABTEST_CFG_RD_XDATA;

typedef struct stru_hci_vcmd_labtest_cfg_rd_xdata
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_CFG_RD_XDATA Para;

} HCI_VCMD_LABTEST_CFG_RD_XDATA;

typedef struct stru_hci_vcmd_rtn_para_labtest_cfg_rd_xdata
{
    U8 Status;
    U8 RdData[1];

} HCI_VCMD_RTN_PARA_CFG_RD_XDATA;


/*
 * 31.10 HCI Airoha LabTest Write Three Wired Command
 */
typedef struct stru_hci_vcmd_para_labtest_wr_three_wired
{
    U8 LoByte;
    U8 HiByte;
    U8 Addr;

} HCI_VCMD_PARA_LABTEST_WR_THREE_WIRED;

typedef struct stru_hci_vcmd_labtest_wr_three_wired
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_WR_THREE_WIRED Para;

} HCI_VCMD_LABTEST_WR_THREE_WIRED;

typedef struct stru_hci_vcmd_rtn_para_labtest_wr_three_wired
{
    U8 Status;

} HCI_VCMD_RTN_PARA_LABTEST_WR_THREE_WIRED;


/*
 * 31.11 HCI Airoha LabTest Read Three Wired Command
 */
typedef struct stru_hci_vcmd_para_labtest_rd_three_wired
{
    U8 Addr;

} HCI_VCMD_PARA_LABTEST_RD_THREE_WIRED;

typedef struct stru_hci_vcmd_labtest_rd_three_wired
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_RD_THREE_WIRED Para;

} HCI_VCMD_LABTEST_RD_THREE_WIRED;

typedef struct stru_hci_vcmd_rtn_para_labtest_rd_three_wired
{
    U8 Status;
    U8 ReadDataB0;
    U8 ReadDataB1;

} HCI_VCMD_RTN_PARA_LABTEST_RD_THREE_WIRED;


/*
 * 31.12 HCI Airoha LabTest Continuous Write SFR Three Wired Command
 */
typedef struct stru_hci_vcmd_para_labtest_conti_wr_sfr_3wired
{
    U8 NumOfReg;
    VCMD_INIT_UNION Init[1];

} HCI_VCMD_PARA_LABTEST_CONTI_WR_SFR_3WIRED;

typedef struct stru_hci_vcmd_labtest_conti_wr_sfr_3wired
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_CONTI_WR_SFR_3WIRED Para;

} HCI_VCMD_LABTEST_CONTI_WR_SFR_3WIRED;

typedef struct stru_hci_vcmd_rtn_para_labtest_conti_wr_sfr_3wired
{
    U8 Status;

} HCI_VCMD_RTN_PARA_LABTEST_CONTI_WR_SFR_3WIRED;


/*
 * 31.14 HCI Airoha LabTest Read ADC0 Command
 */
typedef struct stru_hci_vcmd_rtn_para_labtest_rd_adc0
{
    U8 Status;
    U16 ViChgRd;
    U16 VBatRd;
    U16 VChgRd;
    U16 TempRd;
    U16 VBatCalRd;
    U16 VinRd;

} HCI_VCMD_RTN_PARA_LABTEST_RD_ADC0;


/*
 * 31.15 HCI Airoha LabTest Band Gap Calibration Command
 */
/*
 * HC Band Gap Coarse Gain Step
 */
typedef U8 HCI_COARSE_GAIN_STEP;
#define HCI_COARSE_GAIN_STEP_NEG10      (HCI_COARSE_GAIN_STEP)0x01
#define HCI_COARSE_GAIN_STEP_NEG5       (HCI_COARSE_GAIN_STEP)0x00
#define HCI_COARSE_GAIN_STEP_0          (HCI_COARSE_GAIN_STEP)0x03
#define HCI_COARSE_GAIN_STEP_POS5       (HCI_COARSE_GAIN_STEP)0x02
#define HCI_COARSE_GAIN_STEP_POS10      (HCI_COARSE_GAIN_STEP)0x05
#define HCI_COARSE_GAIN_STEP_POS17      (HCI_COARSE_GAIN_STEP)0x04
#define HCI_COARSE_GAIN_STEP_POS23      (HCI_COARSE_GAIN_STEP)0x07
#define HCI_COARSE_GAIN_STEP_POS30      (HCI_COARSE_GAIN_STEP)0x06
typedef struct stru_hci_vcmd_para_labtest_bd_gp_cal
{
    U8 TargetADCB0;
    U8 TargetADCB1;
    U8 AllowError;
    U8 RdADC0InvlB0;
    U8 RdADC0InvlB1;

} HCI_VCMD_PARA_LABTEST_BD_GP_CAL;

typedef struct stru_hci_vcmd_labtest_bd_gp_cal
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_BD_GP_CAL Para;

} HCI_VCMD_LABTEST_BD_GP_CAL;

typedef struct stru_hci_vcmd_rtn_para_labtest_bd_gp_cal
{
    U8 Status;
    U8 BestADCB0;
    U8 BestADCB1;
    U8 CoarseGain;
    U8 FineGain;

} HCI_VCMD_RTN_PARA_LABTEST_BD_GP_CAL;


/*
 * 31.16 HCI Airoha LabTest Calibration 4.2v DAC Command
 */
typedef struct stru_hci_vcmd_para_labtest_cal_4v2_dac
{
    U8 InitDACB0;
    U8 InitDACB1;
    U8 DACStep;
    U8 ThredCnt;
    U8 ThredViChgB0;
    U8 ThredViChgB1;
    U8 RdADC0InvlB0;
    U8 RdADC0InvlB1;

} HCI_VCMD_PARA_LABTEST_CAL_4V2_DAC;

typedef struct stru_hci_vcmd_labtest_cal_4v2_dac
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_CAL_4V2_DAC Para;

} HCI_VCMD_LABTEST_CAL_4V2_DAC;

typedef struct stru_hci_vcmd_rtn_para_labtest_cal_4v2_dac
{
    U8 Status;

} HCI_VCMD_RTN_PARA_LABTEST_CAL_4V2_DAC;


/*
 * 31.1B HCI Airoha LabTest LE Receiver Test Command
 */
typedef struct stru_hci_vcmd_para_labtest_le_rx_test
{
    U8 RxFreq;
    U8 AccessAddrB0;
    U8 AccessAddrB1;
    U8 AccessAddrB2;
    U8 AccessAddrB3;
    U8 AAgcFixGainEnb;
    U8 AAgcFixGain;

} HCI_VCMD_PARA_LABTEST_LE_RX_TEST;

typedef struct stru_hci_vcmd_labtest_le_rx_test
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_LE_RX_TEST Para;

} HCI_VCMD_LABTEST_LE_RX_TEST;

typedef struct stru_hci_vcmd_rtn_para_labtest_le_rx_test
{
    U8 Status;

} HCI_VCMD_RTN_PARA_LABTEST_LE_RX_TEST;


/*
 * 31.1C HCI Airoha LabTest LE Transmitter Test Command
 */
typedef struct stru_hci_vcmd_para_labtest_le_tx_test
{
    U8 TxFreq;
    U8 LenOfTestData;
    U8 PktPayload;
    U8 AccessAddrB0;
    U8 AccessAddrB1;
    U8 AccessAddrB2;
    U8 AccessAddrB3;
    U8 TxGcB0;
    U8 TxGcB1;
    U8 TxBiasB0;
    U8 TxBiasB1;
    U8 PacketNumB0;
    U8 PacketNumB1;
    U8 TempCompInvlB0;
    U8 TempCompInvlB1;
    U8 BdrMaxGain;
    U8 BdrMinGain;
    U8 EdrMaxGain;
    U8 EdrMinGain;
    U8 BleMaxGain;
    U8 BleMinGain;
    MOD_GAIN_COMP_STRU ModGainTable;
	MP_MOD_GAIN_COMP_STRU MpModGainTable;
    U8 HopEnb;

} HCI_VCMD_PARA_LABTEST_LE_TX_TEST;

typedef struct stru_hci_vcmd_labtest_le_tx_test
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_LABTEST_LE_TX_TEST Para;

} HCI_VCMD_LABTEST_LE_TX_TEST;

typedef struct stru_hci_vcmd_rtn_para_labtest_le_tx_test
{
    U8 Status;

} HCI_VCMD_RTN_PARA_LABTEST_LE_TX_TEST;


/*
 * 31.1D HCI Airoha LabTest LE TRx End
 */
typedef struct stru_hci_vcmd_rtn_para_labtest_le_trx_end
{
    U8 Status;

} HCI_VCMD_RTN_PARA_LABTEST_LE_TRX_END;


/*
 * 33.01 HCI Airoha RF Bist Initialization
 */
typedef struct stru_hci_vcmd_rtn_para_rf_bist_init
{
    U8 Status;

} HCI_VCMD_RTN_PARA_RF_BIST_INIT;


/*
 * 33.02 HCI Airoha RF Bist Tx DAC Gain Calibration
 */
typedef struct stru_hci_vcmd_rtn_para_rf_bist_tx_dac_gain_cal
{
    U8 Status;
    U8 BistRssiIB0;
    U8 BistRssiIB1;
    U8 BistRssiQB0;
    U8 BistRssiQB1;
    U8 DiffB0;
    U8 DiffB1;
    U8 TxGain;
    U8 CalBistRssiIB0;
    U8 CalBistRssiIB1;
    U8 CalBistRssiQB0;
    U8 CalBistRssiQB1;
    U8 CalDiffB0;
    U8 CalDiffB1;

} HCI_VCMD_RTN_PARA_RF_BIST_TX_DAC_GAIN_CAL;


/*
 * 33.03 HCI Airoha RF Bist Rx ADC Gain Calibration
 */
typedef struct stru_hci_vcmd_rtn_para_rf_bist_rx_adc_gain_cal
{
    U8 Status;
    U8 BistRssiIB0;
    U8 BistRssiIB1;
    U8 BistRssiQB0;
    U8 BistRssiQB1;
    U8 DiffB0;
    U8 DiffB1;
    U8 RxGain;
    U8 CalBistRssiIB0;
    U8 CalBistRssiIB1;
    U8 CalBistRssiQB0;
    U8 CalBistRssiQB1;
    U8 CalDiffB0;
    U8 CalDiffB1;

} HCI_VCMD_RTN_PARA_RF_BIST_RX_ADC_GAIN_CAL;


/*
 * 33.04 HCI Airoha RF Bist Rx Sideband RF
 */
typedef struct stru_hci_vcmd_rtn_para_rf_bist_rx_sideband_rf
{
    U8 Status;
    U8 BistRssi1B0;
    U8 BistRssi1B1;
    U8 BistRssi2B0;
    U8 BistRssi2B1;
    U8 DiffB0;
    U8 DiffB1;

} HCI_VCMD_RTN_PARA_RF_BIST_RX_SIDEBAND_RF;


/*
 * 33.05 HCI Airoha RF Bist Rx Bandwidth Report RF
 */
typedef struct stru_hci_vcmd_rtn_para_rf_bist_rx_bw_rept_rf
{
    U8 Status;
    U8 BistRssi1B0;
    U8 BistRssi1B1;
    U8 BistRssi2B0;
    U8 BistRssi2B1;
    U8 BistRssi3B0;
    U8 BistRssi3B1;
    U8 Diff1B0;
    U8 Diff1B1;
    U8 Diff2B0;
    U8 Diff2B1;

} HCI_VCMD_RTN_PARA_RF_BIST_RX_BW_RPET_RF;


/*
 * 33.06 HCI Airoha RF Bist IM3
 */
typedef struct stru_hci_vcmd_rtn_para_rf_bist_im3
{
    U8 Status;
    U8 BistRssi1B0;
    U8 BistRssi1B1;
    U8 BistRssi2B0;
    U8 BistRssi2B1;
    U8 DiffB0;
    U8 DiffB1;

} HCI_VCMD_RTN_PARA_RF_BIST_IM3;


/*
 * 33.07 HCI Airoha RF Bist IM3 RF
 */
typedef struct stru_hci_vcmd_rtn_para_rf_bist_im3_rf
{
    U8 Status;
    U8 BistRssi1B0;
    U8 BistRssi1B1;
    U8 BistRssi2B0;
    U8 BistRssi2B1;
    U8 DiffB0;
    U8 DiffB1;

} HCI_VCMD_RTN_PARA_RF_BIST_IM3_RF;


/*
 * 33.08 HCI Airoha RF SNR Report RF
 */
typedef struct stru_hci_vcmd_rtn_para_rf_bist_snr_rept_rf
{
    U8 Status;
    U8 Snr0;
    U8 Snr1;
    U8 Snr2;
    U8 Snr3;
    U8 Snr4;
    U8 Snr5;
    U8 Snr6;
    U8 Snr7;
    U8 Snr8;
    U8 Snr9;

} HCI_VCMD_RTN_PARA_RF_BIST_SNR_REPT_RF;


/*
 * 33.09 HCI Airoha RF Bist Phase Noise Report RF
 */
typedef struct stru_hci_vcmd_rtn_para_rf_bist_phase_noise_rept_rf
{
    U8 Status;
    U8 BistRssi1B0;
    U8 BistRssi1B1;

} HCI_VCMD_RTN_PARA_RF_BIST_PHASE_NOISE_REPT_RF;


/*
 * 33.10 HCI Airoha Bist Audio Bist Command
 */
typedef struct stru_hci_vcmd_rtn_para_audio_bist
{
    U8 Status;
    U8 SignalPower;
    U8 SNDR;
} HCI_VCMD_RTN_PARA_AUDIO_BIST;

typedef struct stru_hci_vcmd_para_audio_bist
{
	U8 AudioInInterface;
	U8 AudioOutInterface;
	U8 BISTScenario;
} HCI_VCMD_PARA_AUDIO_BIST;

typedef struct stru_hci_vcmd_audio_bist
{
    HCI_CMD_HDR_STRU Hdr;
    HCI_VCMD_OPCODE_STRU VOpCode;
    HCI_VCMD_PARA_AUDIO_BIST Para;
} HCI_VCMD_AUDIO_BIST;

/*
 * 33.11 HCI Airoha Bist Audio I/O Report Command
 */
typedef struct stru_hci_vcmd_rtn_para_audio_io
{
    U8 Status;
    U8 AudioInInterface;
    U8 AudioOutInterface;
} HCI_VCMD_RTN_PARA_AUDIO_IO;

/*
 * 34.01 HCI Airoha Driver I2C ACK Command
 */
typedef struct stru_hci_vcmd_rtn_para_i2c_ack
{
    U8 Status;
    U8 I2CCMD[5];
    U8 I2CData[5];

} HCI_VCMD_RTN_PARA_I2C_ACK;



/*
 * HCI Vendor Event Format
 */
typedef struct stru_hci_vendor_event_opcode_stru
{
    U8 VEvtOcf;
    U8 VEvtOgf;

} HCI_VEVT_OPCODE_STRU;


/*
 * 0xFF HCI Vendor-Specific Event Structure
 */
typedef struct stru_hci_vevt_para_vcmd_cpl
{
    U8 VOCF;
    U8 VOGF;
    U8 RtnPara[1];

} HCI_VEVT_PARA_VCMD_CPL_STRU;

typedef struct stru_hci_vevt_vcmd_cpl
{
    HCI_EVT_HDR_STRU Hdr;
    HCI_VEVT_OPCODE_STRU VEvtOpCode;
    HCI_VEVT_PARA_VCMD_CPL_STRU Para;

} HCI_VEVT_VCMD_CPL_STRU, OS_PTR HCI_VEVT_VCMD_CPL_STRU_PTR;


typedef struct stru_hci_vevt_para_vdr_spec
{
    U8 RtnPara[1];

} HCI_VEVT_PARA_VDR_SPEC_STRU;

typedef struct stru_hci_vevt_vdr_spec
{
    HCI_EVT_HDR_STRU Hdr;
    HCI_VEVT_OPCODE_STRU VEvtOpCode;
    HCI_VEVT_PARA_VDR_SPEC_STRU Para;

} HCI_VEVT_VDR_SPEC_STRU;



/* HCI Vendor Event Parameters */
/*
 * 30.02 HCI Boot Status Vendor Event
 */
typedef struct stru_hci_vevt_para_boot_status
{
    AIRO_INFO_DESCRIPTOR_STRU AiroInfo;

} HCI_VEVT_PARA_BOOT_STATUS_STRU;


/*
 * 31.01 HCI BTx Report Vendor Event
 */
#define LABTEST_D4_LINK                 0

typedef struct stru_hci_vevt_para_btx_rept
{
    U8 ADCRdB0;
    U8 ADCRdB1;
    U8 Gc2;
    U8 Gc1;
    U8 Bias2_2;
    U8 Bias2_1;

} HCI_VEVT_PARA_BTX_REPT_STRU;


/*
 * 31.02 HCI CRx Report Vendor Event
 */
typedef struct stru_hci_vevt_para_crx_rept
{
    U8 RSSIAdjust;

}HCI_VEVT_PARA_CRX_REPT_STRU;


/*
 * 31.03 HCI BRx Report Vendor Event
 */
typedef struct stru_hci_vevt_para_brx_rept
{
    U8 RpktCntB0;
    U8 RpktCntB1;
    U8 CpktCntB0;
    U8 CpktCntB1;
    U8 RSSIAdjust;

}HCI_VEVT_PARA_BRX_REPT_STRU;


/*
 * 31.04 HCI BER Report Vendor Event
 */
typedef struct stru_hci_vevt_para_ber_rept
{
    U8 BitsCntB0;
    U8 BitsCntB1;
    U8 BitsCntB2;
    U8 BitsCntB3;
    U8 RpktCntB0;
    U8 RpktCntB1;
    U8 EpktCntB0;
    U8 EpktCntB1;
    U8 LossCntB0;
    U8 LossCntB1;
    U8 HECErrCntB0;
    U8 HECErrCntB1;
    U8 CRCErrCntB0;
    U8 CRCErrCntB1;
    U8 ErrBitsCntB0;
    U8 ErrBitsCntB1;
    U8 ErrBitsCntB2;
    U8 ErrBitsCntB3;
    U8 RSSIAdjust;

}HCI_VEVT_PARA_BER_REPT_STRU;


/*
 * 31.05 HCI Calibration 4.2v DAC Test Vendor Event Report
 */
typedef struct stru_hci_vevt_para_cal_4v2_dac_test_rept
{
    U8 VBatAvgB0;
    U8 VBatAvgB1;
    U8 DAC4v2B0;
    U8 DAC4v2B1;

}HCI_VEVT_PARA_CAL_4V2_DAC_TEST_REPT_STRU;


/*
 * 31.06 HCI LE Rx Test Event Report
 */
typedef struct stru_hci_vevt_para_le_rx_test_rept
{
    U8 RpktCntB0;
    U8 RpktCntB1;

}HCI_VEVT_PARA_LE_RX_TEST_REPT_STRU;


/*
 * 31.07 HCI LE Tx Test Event Report
 */
typedef struct stru_hci_vevt_para_le_tx_test_rept
{
    U8 ADCRdB0;
    U8 ADCRdB1;
    U8 Gc2;
    U8 Gc1;
    U8 Bias2_2;
    U8 Bias2_1;
}HCI_VEVT_PARA_LE_TX_TEST_REPT_STRU;




/*
 * 48.AB HCI AIRAPP_CMD_SET_VOL
 */
typedef struct
{
	U8 vol;
}HCI_VCMD_PARA_AIRAPP_CMD_SET_VOL;

/*
 * 48.F0 HCI AIRAPP_CMD_GET_SYNCHRONIZE_DATA
 */
typedef struct
{
    U8 majorVersion;
    U8 minorVersion;
    U16 buildNumber;
    U16 revisionNumber;
}HCI_VCMD_PARA_AIRAPP_CMD_GET_SYNC_DATA; // VerInfo in ae sector


/*
 * 48.F6 AIRAPP_CMD_SET_VP_LANG
 */
typedef struct
{
	U8 VPLangIndex;
}HCI_VCMD_PARA_AIRAPP_CMD_SET_VP_LANG;


/*
 * 48.F7 AIRAPP_CMD_SET_PEQ_A2DP
 */
typedef struct
{
	U8 PEQMode;
	U8 sectorMode;
}HCI_VCMD_PARA_AIRAPP_CMD_SET_PEQ_A2DP;

/*
 * 48.F8 AIRAPP_CMD_SET_PEQ_AUX
 */
typedef struct
{
	U8 PEQMode;
	U8 sectorMode;
}HCI_VCMD_PARA_AIRAPP_CMD_SET_PEQ_AUX;

/*
 * 48.F9 AIRAPP_CMD_GET_BATTERY
 */
 typedef struct
{
	U8 BatteryStatus;
}HCI_VCMD_PARA_AIRAPP_CMD_GET_BAT;

/*
 * 48.B9 AIRAPP_CMD_GET_CHGBAT_STATUS
 */
typedef struct
{
	U8 BatChargeStatus;
}HCI_VCMD_PARA_AIRAPP_CMD_GET_CHGBAT_STATUS;

/*
 * 48.BC AIRAPP_CMD_SET_DEFAULT_PEQ_MODE
 */
typedef struct
{
	U8 component;
	U8 PEQMode;
	U8 PEQSectorMode;
}HCI_VCMD_PARA_AIRAPP_CMD_SET_DEFAULT_PEQ;

/*
 * 48.FA AIRAPP_CMD_GET_PEQ
 */
typedef struct
{
	U8 PEQInA2DP;
	U8 PEQInAUX;
	U8 PEQNumInA2DP;
	U8 PEQNumInAUX;
	U8 isUseDefaultPEQ;
	U8 A2DPSectorMode;
	U8 AUXSectorMode;
}HCI_VCMD_PARA_AIRAPP_CMD_GET_PEQ;

/*
 * 48.FB AIRAPP_CMD_GET_VOICE_PROMPT
 */
enum
{
	LANG_UNKNOWN,
	LANG_ENGLISH,
	LANG_GERMAN,
	LANG_FRENCH,
	LANG_ITALIN,
	LANG_SPANISH,
	LANG_PORTUGUESE,
	LANG_DUTCH,
	LANG_DANISH,
	LANG_SWEDISH,
	LANG_FINNISH,
	LANG_GREEK,
	LANG_HUNGARY,
	LANG_TURKISH,
	LANG_NORWAY,
	LANG_RUSSIA,
	LANG_ARABIC,
	LANG_BAHASA_IND,
	LANG_BAHASA_MAL,
	LANG_BULGARIAN,
	LANG_CROATIAN,
	LANG_CZECH,
	LANG_CHINESE_S,
	LANG_CHINESE_T,
	LANG_ESTONIAN,
	LANG_HEBREW,
	LANG_LATVIAN,
	LANG_LITHUANIAN,
	LANG_POLISH,
	LANG_ROMANIAN,
	LANG_SERBIAN,
	LANG_SLOVAKIA,
	LANG_SLOVENIA,
	LANG_THAI,
	LANG_VIETNAMESE,
	LANG_AMER_ENGLISH,
	LANG_AMER_SPAN,
	LANG_BRAZ_PORT,
	LANG_CAN_FRENCH,
	LANG_JAPANESE,
	LANG_FARSI,
	LANG_UKRAINIAN,
	LANG_ICELANDIC,
	LANG_HINDI,
	LANG_TAGALOG,
	LANG_AFRIKAANS,
	LANG_SESOTHO,
	LANG_SWAHILI,
	LANG_XHOSA,
	LANG_ZULU,
	LANG_URDU,
	LANG_CHINESE_UK,
	LANG_MACEDONIAN,
	LANG_BENGALI,
	LANG_GUJARATI,
	LANG_KANNADA,
	LANG_MALAYALAM,
	LANG_MARATHI,
	LANG_PUNJABI,
	LANG_SINHALESE,
	LANG_TAMIL,
	LANG_TELUGU,
	LANG_ALBANIAN,
	LANG_AMHARIC,
	LANG_ARMENIAN,
	LANG_AUSTRALIAN_ENGLISH,
	LANG_AUSTRIAN_GERMAN,
	LANG_AZERBAIJANI,
	LANG_BELARUSSIAN,
	LANG_BELGIAN_FLEMISH,
	LANG_BELGIAN_FRENCH,
	LANG_BURMESE,
	LANG_CANDIAN_ENGLISH,
	LANG_CATALAN,
	LANG_CYPRUS_GREEK,
	LANG_CYPRUS_TURKISH,
	LANG_FINLAND_SWEDISH,
	LANG_GAELIC,
	LANG_GEORGIAN,
	LANG_INTERNATIONAL_ENGLISH,
	LANG_INTERNATIONAL_FRENCH,
	LANG_INTERNATIONAL_SPANISH,
	LANG_IRISH,
	LANG_KAZAKH,
	LANG_KHMER,
	LANG_KOREAN,
	LANG_LAO,
	LANG_MOLDOVIAN,
	LANG_MONGOLIAN,
	LANG_NEW_ZEALAND_ENGLISH,
	LANG_NORWEGIAN_NYNORSK,
	LANG_SOMALI,
	LANG_SOUTH_AFRICAN_ENGLISH,
	LANG_SWISS_FRENCH,
	LANG_SWISS_GERMAN,
	LANG_SWISS_ITALIAN,
	LANG_TAIWANESE_CHINESE,
	LANG_TAJIK,
	LANG_TIBETAN,
	LANG_TIGRINYA,
	LANG_TURKMEN,
	LANG_UZBEK,
	LANG_WELSH
};

#define APP_SUPPORT_VP_LANG_COUNT	6
typedef struct
{
	U8 isVPEnabled;
	U8 VPLangIndex;
	U8 VPLangCount;
	U8 VPLangName[APP_SUPPORT_VP_LANG_COUNT];
}HCI_VCMD_PARA_AIRAPP_CMD_GET_VP;

/*
 * 48.FC AIRAPP_CMD_GET_VOLUME
 */
typedef struct
{
	U8 currentAbsVol;
}HCI_VCMD_PARA_AIRAPP_CMD_GET_VOL;


/*
 * 48.FE AIRAPP_CMD_SET_CALLERNAME
 */
typedef struct
{
	U8 isOn;
}HCI_VCMD_PARA_AIRAPP_CMD_SET_CALLERNAME;


/*
 * HCI ACL Command/Event
 */
typedef U8 HCI_ACL_OGF;
#define HCI_ACL_OGF_GENERAL					(HCI_ACL_OGF)0x00
#define HCI_ACL_OGF_FLASH					(HCI_ACL_OGF)0x01
#define HCI_ACL_OGF_REMOTE_FLASH			(HCI_ACL_OGF)0x02
#define HCI_ACL_OGF_REMOTE_FLASH2			(HCI_ACL_OGF)0x03
#define HCI_ACL_OGF_APP_FLASH				(HCI_ACL_OGF)0x04
#define HCI_ACL_OGF_APP_REMOTE_FLASH		(HCI_ACL_OGF)0x05
#define HCI_ACL_OGF_APP_REMOTE_FLASH2		(HCI_ACL_OGF)0x06
#define HCI_ACL_OGF_APP_CALLER_NAME			(HCI_ACL_OGF)0x07
#define HCI_ACL_OGF_APP_FLASH_BLE			(HCI_ACL_OGF)0x08
#define HCI_ACL_OGF_APP_REMOTE_FLASH_BLE    (HCI_ACL_OGF)0x09
#define HCI_ACL_OGF_APP_REMOTE_FLASH_BLE2   (HCI_ACL_OGF)0x0A


/*
 * HCI ACL Command/Event OCF
 */


/* HCI ACL OGF General Group: HCI_ACL_OGF_GENERAL */
//------------------VCMD_OCF------------------
//------------------VEVT_OCF------------------
#define HCI_ACL_OCF_COMMAND_COMPLETE			0x01


/* HCI ACL OGF Flash Group: HCI_ACL_OGF_FLASH */
//------------------VCMD_OCF------------------
#define HCI_ACL_OCF_FLASH_READ_MANUFACTURER_AND_MEMORYTYPE	0x01
#define HCI_ACL_OCF_FLASH_SET_CONFIGURATION_REGISTER		0x02
#define HCI_ACL_OCF_FLASH_SET_PROTECT_BIT					0x03
#define HCI_ACL_OCF_FLASH_CHIP_ERASE						0x04
#define HCI_ACL_OCF_FLASH_SECTOR_ERASE						0x05
#define HCI_ACL_OCF_FLASH_BLOCK_32KBLOCK_ERASE				0x06
#define HCI_ACL_OCF_FLASH_BLOCK_64KBLOCK_ERASE				0x07
#define HCI_ACL_OCF_FLASH_PAGE_PROGRAM						0x08
#define HCI_ACL_OCF_FLASH_PAGE_READ							0x09
#define HCI_ACL_OCF_FLASH_BYTE_PROGRAM						0x0A
#define HCI_ACL_OCF_FLASH_BYTE_READ							0x0B
#define HCI_ACL_OCF_FLASH_READ_OTP_DATA						0x0C
#define HCI_ACL_OCF_FLASH_WRITE_GANG_BLOCK_PROTECT			0x0D
#define HCI_ACL_OCF_FLASH_WRITE_SINGLE_BLOCK_SECTOR_PROTECT	0x0E
#define HCI_ACL_OCF_FLASH_READ_SECURITY_REGISTER			0x0F
#define HCI_ACL_OCF_FLASH_WRITE_PROTECT_SELECTION			0x10
#define HCI_ACL_OCF_FLASH_LOCK_ALL							0x11
#define HCI_ACL_OCF_FLASH_UNLOCK_ALL						0x12
#define HCI_ACL_OCF_FLASH_WRITE_OTP_DATA					0x13
#define	HCI_ACL_OCF_FLASH_SET_SECURITY_LOCK					0x14
#define HCI_ACL_OCF_FLASH_SET_FLASH_DRIVER					0x15
#define HCI_ACL_OCF_FLASH_DFU_UPDATE_CANCEL				    0x16
#define HCI_ACL_OCF_FLASH_INQUIRY_INTERNAL_EXTERNAL_UPDATE	0x17
#define HCI_ACL_OCF_FLASH_APPLY_DFU_UPDATE				    0x18
#define HCI_ACL_OCF_SPIFLASH_READ_MANUFACTURER_AND_MEMORYTYPE	0x19
#define HCI_ACL_OCF_SPIFLASH_SECTOR_ERASE				    0x1A
#define HCI_ACL_OCF_SPIFLASH_PAGE_PROGRAM					0x1B
#define HCI_ACL_OCF_SPIFLASH_PAGE_READ						0x1C
#define HCI_ACL_OCF_SPIFLASH_LOCK_ALL						0x1D
#define HCI_ACL_OCF_SPIFLASH_UNLOCK_ALL						0x1E
#define HCI_ACL_OCF_SPIFLASH_DFU_UPDATE_CANCEL				0x1F
#define HCI_ACL_OCF_SPIFLASH_RD_WIP_STATUS                  0x20
#define HCI_ACL_OCF_SPIFLASH_SET_PROTECT_BIT                0x21
#if (defined AB1520C) || (defined AB1520D)
#define HCI_ACL_OCF_FLASH_READ_VOICE_COMMAND_ADP_DATA_SECTOR_ADDRESS 0x22
#endif
#define HCI_ACL_OCF_SPIFLASH_CHIP_ERASE                     0x23
//------------------VEVT_OCF------------------
#define	HCI_ACL_OCF_FLASH_PAGE_READ							0x09


/*
 * ACL Vendor Commands Typed Definition
 */
typedef struct stru_hc_acl_cmd
{
	U8 Offset;
    BTCLK_UNION TimeStamp;
    U16 ConnHdl;
    U16 Len;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Para[1];

} HC_ACL_CMD_STRU;

typedef U8 (*HCI_ACL_CMD_HDLR)(HC_ACL_CMD_STRU XDATA_PTR pMsg);


#ifdef AB1520B
//Flash Error Message
#define FLASH_STATUS_OK                 0x00
#define VERR_FLASH_VERIFY_FAIL          0x01
#define VERR_FLASH_ERROR_PAGE_SIZE      0x02
#define VERR_FLASH_INVALID_PARAMETERS   0x03
#define VERR_FLASH_UNKNOWN_COMMAND      0x04
#endif

/*
 * 0.01 HCI Airoha Flash Read Manufacturer And Memory Type Command
 */
typedef struct stru_hci_cmd_rtn_para_flsh_rd_manu_and_mem_type
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;
    U8 ManufacturerID;
    U8 MemType2;
    #if defined(AB1520B) || (defined AB1520C) || (defined AB1520D)
    #else
    U8 MemType;
    #endif

} HCI_CMD_RTN_PARA_FLSH_RD_MANU_AND_MEM_TYPE_STRU;

/*
 * 0.02 HCI Airoha Flash Set Configuration Register Command
 */
typedef struct stru_hci_cmd_para_flsh_set_cfg_reg
{
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 ConfigValue;

} HCI_CMD_PARA_FLSH_SET_CFG_REG_STRU;

typedef struct stru_hci_cmd_flsh_set_cfg_reg
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_FLSH_SET_CFG_REG_STRU Para;

} HCI_CMD_FLSH_SET_CFG_REG_STRU;

typedef struct stru_hci_cmd_rtn_para_flsh_set_cfg_reg
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;

} HCI_CMD_RTN_PARA_FLSH_SET_CFG_REG_STRU;


/*
 * 0.03 HCI Airoha Flash Set Protect Bit Command
 */
typedef struct stru_hci_cmd_para_flsh_set_pt_bit
{
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 StatusBit;

} HCI_CMD_PARA_FLSH_SET_PT_BIT_STRU;

typedef struct stru_hci_cmd_flsh_set_pt_bit
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_FLSH_SET_PT_BIT_STRU Para;

} HCI_CMD_FLSH_SET_PT_BIT_STRU;

typedef struct stru_hci_cmd_rtn_para_flsh_set_pt_bit
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;

} HCI_CMD_RTN_PARA_FLSH_SET_PT_BIT_STRU;


/*
 * 0.04 HCI Airoha Flash Chip Erase Command
 */
typedef struct stru_hci_cmd_rtn_para_flsh_chip_erase
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;

} HCI_CMD_RTN_PARA_FLSH_CHIP_ERASE_STRU;


/*
 * 0.05 HCI Airoha Flash Sector Erase Command
 */
typedef struct stru_hci_cmd_para_flsh_sec_erase
{
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 AddressB2;
    U8 AddressB1;
    U8 AddressB0;

} HCI_CMD_PARA_FLSH_SEC_ERASE_STRU;

typedef struct stru_hci_cmd_flsh_sec_erase
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_FLSH_SEC_ERASE_STRU Para;

} HCI_CMD_FLSH_SEC_ERASE_STRU;

typedef struct stru_hci_cmd_rtn_para_flsh_sec_erase
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;

} HCI_CMD_RTN_PARA_FLSH_SEC_ERASE_STRU;

/*
 * 0.08 HCI Airoha Flash Page Program Command
 */
typedef struct stru_hci_data_rx_pld_flash_page_prog
{
    U8 VCmdOcf;
    U8 VCmdOgf;
	U8 FlashAddrB2;
	U8 FlashAddrB1;
	U8 FlashAddrB0;
	U8 Crc;
	U8 PageData[1];

} HCI_DATA_RX_PLD_FLASH_PAGE_PROG_STRU;

typedef struct stru_hci_data_rx_flash_page_prog
{
	HCI_DATA_HDR_STRU Hdr;
	HCI_DATA_RX_PLD_FLASH_PAGE_PROG_STRU	pld;

} HCI_DATA_RX_FLASH_PAGE_PROG_STRU;

typedef struct stru_hci_data_tx_pld_flash_page_prog
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
	U8 Status;
	U8 FlashAddrB2;
	U8 FlashAddrB1;
	U8 FlashAddrB0;
    U8 Reason;

} HCI_DATA_TX_PLD_FLASH_PAGE_PROG_STRU;

#define FLASH_PAGE_PROG_LEN_PAGE_DATA_ONLY (U16)0x0100


/*
 * 0.09 HCI Airoha Flash Page Read Command
 */
typedef struct stru_hci_cmd_para_flsh_page_rd
{
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 AddressB2;
    U8 AddressB1;
    U8 AddressB0;
    U8 LengthB1;
    U8 LengthB0;

} HCI_CMD_PARA_FLSH_PAGE_RD_STRU;

typedef struct stru_hci_cmd_flsh_page_rd
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_FLSH_PAGE_RD_STRU Para;

} HCI_CMD_FLSH_PAGE_RD_STRU;

typedef struct stru_hci_cmd_rtn_para_flsh_page_rd
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 Status;
	U8 FlashAddrB2;
	U8 FlashAddrB1;
	U8 FlashAddrB0;
	U8 Data[1];

} HCI_CMD_RTN_PARA_FLSH_PAGE_RD_STRU;


/*
 * 0.0A HCI Airoha Flash Byte Program Command
 */
typedef struct stru_hci_cmd_para_flsh_byte_prog
{
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 AddressB2;
    U8 AddressB1;
    U8 AddressB0;
    U8 LengthB1;
    U8 LengthB0;
    U8 Data[1];

} HCI_CMD_PARA_FLSH_BYTE_PROG_STRU;

typedef struct stru_hci_cmd_flsh_byte_prog
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_FLSH_BYTE_PROG_STRU Para;

} HCI_CMD_FLSH_BYTE_PROG_STRU;

typedef struct stru_hci_cmd_rtn_para_flsh_byte_prog
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;
	U8 FlashAddrB2;
	U8 FlashAddrB1;
	U8 FlashAddrB0;
	U8 reason;

} HCI_CMD_RTN_PARA_FLSH_BYTE_PROG_STRU;

/*
 * 0.0B HCI Airoha Flash Byte Read Command
 */
typedef struct stru_hci_cmd_para_flsh_byte_rd
{
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 AddressB2;
    U8 AddressB1;
    U8 AddressB0;
    U8 LengthB1;
    U8 LengthB0;

} HCI_CMD_PARA_FLSH_BYTE_RD_STRU;

typedef struct stru_hci_cmd_flsh_byte_rd
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_FLSH_BYTE_RD_STRU Para;

} HCI_CMD_FLSH_BYTE_RD_STRU;

typedef struct stru_hci_cmd_rtn_para_flsh_byte_rd
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;
	U8 FlashAddrB2;
	U8 FlashAddrB1;
	U8 FlashAddrB0;
	U8 Data[1];

} HCI_CMD_RTN_PARA_FLSH_BYTE_RD_STRU;


/*
 * 0.0C HCI Airoha Flash Read OTP Data Command
 */
typedef struct stru_hci_cmd_para_flsh_rd_otp_data
{
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 AddressB2;
    U8 AddressB1;
    U8 AddressB0;
    U8 Length;

} HCI_CMD_PARA_FLSH_RD_OTP_DATA_STRU;

typedef struct stru_hci_cmd_flsh_rd_otp_data
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_FLSH_RD_OTP_DATA_STRU Para;

} HCI_CMD_FLSH_RD_OTP_DATA_STRU;

typedef struct stru_hci_cmd_rtn_para_flsh_rd_otp_data
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;
    U8 Data[1];

} HCI_CMD_RTN_PARA_FLSH_RD_OTP_DATA_STRU;


/*
 * 0.0D HCI Airoha Flash Write Gang Block Protect Command
 */
typedef struct stru_hci_cmd_para_flsh_wr_gang_blk_protect
{
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 LockEn;

} HCI_CMD_PARA_FLSH_WR_GANG_BLK_PROTECT_STRU;

typedef struct stru_hci_cmd_flsh_wr_gang_blk_protect
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_FLSH_WR_GANG_BLK_PROTECT_STRU Para;

} HCI_CMD_FLSH_WR_GANG_BLK_PROTECT_STRU;

typedef struct stru_hci_cmd_rtn_para_flsh_wr_gang_blk_protect
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;

} HCI_CMD_RTN_PARA_FLSH_WR_GANG_BLK_PROTECT_STRU;


/*
 * 0.0E HCI Airoha Flash Write Single Block/Sector Protect Command
 */
typedef struct stru_hci_cmd_para_flsh_wr_single_blk_sector_protect
{
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 AddressB2;
    U8 AddressB1;
    U8 AddressB0;
    U8 LockEn;

} HCI_CMD_PARA_FLSH_WR_SINGLE_BLK_SECTOR_PROTECT;

typedef struct stru_hci_cmd_flsh_wr_single_blk_sector_protect
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_FLSH_WR_SINGLE_BLK_SECTOR_PROTECT Para;

} HCI_CMD_FLSH_WR_SINGLE_BLK_SECTOR_PROTECT;

typedef struct stru_hci_cmd_rtn_para_flsh_wr_single_blk_sector_protect
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;

} HCI_CMD_RTN_PARA_FLSH_WR_SINGLE_BLK_SECTOR_PROTECT;


/*
 * 0.0F HCI Airoha Flash Read Security Register Command
 */
typedef struct stru_hci_cmd_rtn_para_flsh_rd_secu_reg
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;
    U8 WPSEL;
    U8 LDSO;

} HCI_CMD_RTN_PARA_FLSH_RD_SECU_REG_STRU;


/*
 * 0.10 HCI Airoha Flash Write Protect Selection Command
 */
typedef struct stru_hci_cmd_rtn_para_flsh_wr_protect_sel
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;

} HCI_CMD_RTN_PARA_FLSH_WR_PROTECT_SEL_STRU;


/*
 * 0.11 HCI Airoha Flash Lock All Command
 */
typedef struct stru_hci_cmd_rtn_para_flsh_lock_all
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;

} HCI_CMD_RTN_PARA_FLSH_LOCK_ALL_STRU;


/*
 * 0.12 HCI Airoha Flash Unlock All Command
 */
typedef struct stru_hci_cmd_rtn_para_flsh_unlock_all
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;

} HCI_CMD_RTN_PARA_FLSH_UNLOCK_ALL_STRU;


/*
 * 0.13 HCI Airoha Flash Write OTP Data Command
 */
typedef struct stru_hci_cmd_para_flsh_wr_otp_data
{
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 AddressB2;
    U8 AddressB1;
    U8 AddressB0;
    U8 Length;
    U8 Data[1];

} HCI_CMD_PARA_FLSH_WR_OTP_DATA_STRU;

typedef struct stru_hci_cmd_flsh_wr_otp_data
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_FLSH_WR_OTP_DATA_STRU Para;

} HCI_CMD_FLSH_WR_OTP_DATA_STRU;

typedef struct stru_hci_cmd_rtn_para_flsh_wr_otp_data
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;

} HCI_CMD_RTN_PARA_FLSH_WR_OTP_DATA_STRU;


/*
 * 0.14 HCI Airoha Flash Set Security Lock Command
 */
typedef struct stru_hci_cmd_para_flsh_set_secu_lock
{
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 LockBit;

} HCI_CMD_PARA_FLSH_SET_SECU_LOCK_STRU;

typedef struct stru_hci_cmd_flsh_set_secu_lock
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_FLSH_SET_SECU_LOCK_STRU Para;

} HCI_CMD_FLSH_SET_SECU_LOCK_STRU;

typedef struct stru_hci_cmd_rtn_para_flsh_set_secu_lock
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;

} HCI_CMD_RTN_PARA_FLSH_SET_SECU_LOCK_STRU;


/*
 * 0.15 HCI Airoha Flash Set Flash Driver Command
 */
typedef struct stru_hci_cmd_para_flsh_set_flash_drv
{
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 FlashSeries;
    U8 ManufacturerID;
    U8 MemType2;
    U8 FlashSize;

} HCI_CMD_PARA_FLSH_SET_FLASH_DRV_STRU;

typedef struct stru_hci_cmd_flsh_set_flash_drv
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_FLSH_SET_FLASH_DRV_STRU Para;

} HCI_CMD_FLSH_SET_FLASH_DRV_STRU;

typedef struct stru_hci_cmd_rtn_para_flsh_set_flash_drv
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;

} HCI_CMD_RTN_PARA_FLSH_SET_FLASH_DRV_STRU;

enum
{
    FLASH_DRV_MXIC_SERIES,
    FLASH_DRV_WINBOND_SERIES
};


/*
 * 0.16 HCI Airoha Flash DFU Update Cancel Command
 */
typedef struct stru_hci_cmd_rtn_para_flsh_dfu_update_cancel
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;
    U8 Reason;

} HCI_CMD_RTN_PARA_FLSH_DFU_UPDATE_CANCEL_STRU;


/*
 * 0.17 HCI Airoha Flash Inquiry Internal External Update Command
 */
typedef struct stru_hci_cmd_rtn_para_flsh_inqu_int_ext_update
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;
    U8 FlashType;

} HCI_CMD_RTN_PARA_FLSH_INQU_INT_EXT_UPDATE_STRU;

#if (HW_SPI_SUPPORTED)
/*
 * 0.19 HCI Airoha SPI Flash Read Manufacturer And Memory Type Command
 */
typedef struct stru_hci_cmd_rtn_para_spiflsh_rd_manu_and_mem_type
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;
    U8 ManufacturerID;
    U8 MemType;
    U8 MemDensity;

} HCI_CMD_RTN_PARA_SPIFLSH_RD_MANU_AND_MEM_TYPE_STRU;


/*
 * 0.1A HCI Airoha SPI Flash Sector Erase Command
 */
typedef struct stru_hci_cmd_para_spiflsh_sec_erase
{
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 AddressB2;
    U8 AddressB1;
    U8 AddressB0;

} HCI_CMD_PARA_SPIFLSH_SEC_ERASE_STRU;

typedef struct stru_hci_cmd_spiflsh_sec_erase
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_SPIFLSH_SEC_ERASE_STRU Para;

} HCI_CMD_SPIFLSH_SEC_ERASE_STRU;

typedef struct stru_hci_cmd_rtn_para_spiflsh_sec_erase
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;

} HCI_CMD_RTN_PARA_SPIFLSH_SEC_ERASE_STRU;


/*
 * 0.1B HCI Airoha SPI Flash Page Program Command
 */
typedef struct stru_hci_cmd_para_spiflash_page_prog
{
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Crc;
    U8 Rsvd;
	U8 FlashAddrB2;
	U8 FlashAddrB1;
	U8 FlashAddrB0;
	U8 PageData[1];

} HCI_CMD_PARA_SPIFLASH_PAGE_PROG_STRU;

typedef struct stru_hci_cmd_spiflsh_page_prog
{
	HCI_DATA_HDR_STRU Hdr;
	HCI_CMD_PARA_SPIFLASH_PAGE_PROG_STRU Para;

} HCI_CMD_SPIFLASH_PAGE_PROG_STRU;

typedef struct stru_hci_cmd_rtn_para_spiflash_page_prog
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
	U8 Status;
	U8 FlashAddrB2;
	U8 FlashAddrB1;
	U8 FlashAddrB0;
    U8 Reason;

} HCI_CMD_RTN_PARA_SPIFLSH_PAGE_PROG_STRU;


/*
 * 0.1C HCI Airoha SPI Flash Page Read Command
 */
typedef struct stru_hci_cmd_para_spiflsh_page_rd
{
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 AddressB2;
    U8 AddressB1;
    U8 AddressB0;

} HCI_CMD_PARA_SPIFLSH_PAGE_RD_STRU;

typedef struct stru_hci_cmd_spiflsh_page_rd
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_SPIFLSH_PAGE_RD_STRU Para;

} HCI_CMD_SPIFLSH_PAGE_RD_STRU;

typedef struct stru_hci_cmd_rtn_para_spiflsh_page_rd
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;
	U8 FlashAddrB2;
	U8 FlashAddrB1;
	U8 FlashAddrB0;
	U8 Data[1];

} HCI_CMD_RTN_PARA_SPIFLSH_PAGE_RD_STRU;


/*
 * 0.1D HCI Airoha SPI Flash Lock All Command
 */
typedef struct stru_hci_cmd_rtn_para_spiflsh_lock_all
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;
	U8 Reason;

} HCI_CMD_RTN_PARA_SPIFLSH_LOCK_ALL_STRU;


/*
 * 0.1E HCI Airoha SPI Flash Unlock All Command
 */
typedef struct stru_hci_cmd_rtn_para_spiflsh_unlock_all
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;
    U8 Reason;

} HCI_CMD_RTN_PARA_SPIFLSH_UNLOCK_ALL_STRU;


/*
 * 0.1F HCI Airoha SPI Flash DFU Update Cancel Command
 */
typedef struct stru_hci_cmd_rtn_para_spiflsh_dfu_update_cancel
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;
    U8 Reason;

} HCI_CMD_RTN_PARA_SPIFLSH_DFU_UPDATE_CANCEL_STRU;


/*
 * 0.20 HCI Airoha SPI Flash Read WIP Status Command
 */
typedef struct stru_hci_cmd_rtn_para_spiflsh_rd_wip_status
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;
    U8 WipStatus;

} HCI_CMD_RTN_PARA_SPIFLSH_RD_WIP_STATUS_STRU;


/*
 * 0.21 HCI Airoha SPI Flash Set Protect Bit Command
 */
typedef struct stru_hci_cmd_para_spiflsh_set_pt_bit
{
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 StatusBit;

} HCI_CMD_PARA_SPIFLSH_SET_PT_BIT_STRU;

typedef struct stru_hci_cmd_spiflsh_set_pt_bit
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_SPIFLSH_SET_PT_BIT_STRU Para;

} HCI_CMD_SPIFLSH_SET_PT_BIT_STRU;

typedef struct stru_hci_cmd_rtn_para_spiflsh_set_pt_bit
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;
    U8 Reason;

} HCI_CMD_RTN_PARA_SPIFLSH_SET_PT_BIT_STRU;
#endif

#if (defined AB1520C) || (defined AB1520D)
/*
 * 0.22 HCI Airoha Flash Read Voice Command APD Data Sector Address Command
 */
typedef struct stru_hci_cmd_para_flsh_rd_vc_apd_data_sector_addr
{
    U8 VCmdOcf;
    U8 VCmdOgf;

} HCI_CMD_PARA_FLSH_RD_VC_APD_DATA_SECTOR_ADDR_STRU;

typedef struct stru_hci_cmd_flsh_rd_vc_apd_data_sector_addr
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_FLSH_RD_VC_APD_DATA_SECTOR_ADDR_STRU Para;

} HCI_CMD_FLSH_RD_VC_APD_DATA_SECTOR_ADDR_STRU;

typedef struct stru_hci_cmd_rtn_para_flsh_rd_vc_apd_data_sector_addr
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;
    U8 SectorAddrB2;
	U8 SectorAddrB1;
	U8 SectorAddrB0;

} HCI_CMD_RTN_PARA_FLSH_RD_VC_APD_DATA_SECTOR_ADDR_STRU;
#endif

#if (HW_SPI_SUPPORTED)
/*
 * 0.23 HCI Airoha Flash Chip Erase Command
 */
typedef struct stru_hci_cmd_para_spiflsh_chip_erase
{
    U8 VCmdOcf;
    U8 VCmdOgf;

} HCI_CMD_PARA_SPIFLSH_CHIP_ERASE_STRU;

typedef struct stru_hci_cmd_spiflsh_chip_erase
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_CMD_PARA_SPIFLSH_CHIP_ERASE_STRU Para;

} HCI_CMD_SPIFLSH_CHIP_ERASE_STRU;

typedef struct stru_hci_cmd_rtn_para_spiflsh_chip_erase
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 Status;

} HCI_CMD_RTN_PARA_SPIFLSH_CHIP_ERASE_STRU;
#endif

/*
 * HCI ACL Command Complete Event
 */
typedef struct stru_hci_acl_evt_para_cmd_cpl
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 VCmdOcf;
    U8 VCmdOgf;
    U8 RtnPara[1];

} HCI_ACL_EVT_PARA_CMD_CPL_STRU;

typedef struct stru_hci_acl_evt_cmd_cpl
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_ACL_EVT_PARA_CMD_CPL_STRU Para;

} HCI_ACL_EVT_CMD_CPL_STRU;


/*
 * HCI ACL Flash Page Read Event
 */
#define HCI_UART_FLASH_CONNHDL          (U16)0x0F00

typedef struct stru_hci_acl_evt_para_page_rd
{
    U8 VEvtOcf;
    U8 VEvtOgf;
    U8 RtnPara[1];

} HCI_ACL_EVT_PARA_PAGE_RD_STRU;

typedef struct stru_hci_acl_evt_page_rd
{
    HCI_DATA_HDR_STRU Hdr;
    HCI_ACL_EVT_PARA_PAGE_RD_STRU Para;

} HCI_ACL_EVT_PAGE_RD_STRU;


/* HCI ACL OGF General Group: HCI_ACL_OGF_APP_CALLER_NAME */
//------------------VCMD_OCF------------------
#define HCI_ACL_OCF_CALLER_NAME_WRITE_DATA			0x00
#define HCI_ACL_OCF_CALLER_NAME_WRITE_RESPONSE		0x01
#define HCI_ACL_OCF_CALLER_NAME_ALL_DATA_READY		0x02
//------------------VEVT_OCF------------------

/*
 * HCI ACL Caller Name Data Write Cmd: 0x00  HCI_ACL_OCF_CALLER_NAME_WRITE_DATA
 */
typedef struct
{
	U8 id;
	U8 callerNameDataBegin;
}HCI_ACL_CMD_PARA_CALLER_NAME_WRITE_DATA;

/*
 * HCI ACL Caller Name Data Write Event: 0x01  HCI_ACL_OCF_CALLER_NAME_WRITE_RESPONSE
 */
#define CALLER_NAME_WRITE_OK	0x00
#define CALLER_NANE_WRITE_FAIL	0xFF
#define CALLER_NAME_WRITE_STOP	0xEE
typedef struct
{
	U8 status;
	U8 id;
}HCI_ACL_EVT_PARA_CALLER_NAME_WRITE_DATA;


typedef union
{
	HCI_VCMD_RTN_PARA_CMD_CPL			vcmdCplEvt;
	HCI_VCMD_RTN_PARA_AUDIO_SWITCH 		audioSwitchCmdCplEvt;
	HCI_VCMD_RTN_PARA_SCO_NULL_PACKET 	scoNullCmdCplEvt;
	HCI_VCMD_RTN_PARA_AUDIO_SETUP_QOS	setupQosCmdCplEvt;
}HCI_EVT_PARA_CMD_CPL_RTN_VDATA_STRU;


/**
 * HC_HciBootStatusEvt
 *
 * Send boot status event to Host.
 *
 * @Author : WenChiehLo <WenChiehLo@airoha.com.tw>
 */
VOID HC_HciBootStatusEvt(VOID);

#endif /* _HCI_AIROHA_H_ */

