C251 COMPILER V5.57.0,  Key                                                                08/11/20  05:53:36  PAGE 1   


C251 COMPILER V5.57.0, COMPILATION OF MODULE Key
OBJECT MODULE PLACED IN .\output\AB1520C_AiroStereoHeadset\Key.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE source\SDK\IOSYS\Key.c XSMALL HPTR FUNCTIONS(REENTRANT) ROM(HUGE) WARN
                    -INGLEVEL(3) OPTIMIZE(9,SPEED) BROWSE ORDER INCDIR(.\source\COMMON;.\source\SECTOR;.\source\ABSDRIVER;.\source\OS;.\sourc
                    -e\HC;.\source\LM;.\source\LC;.\source\ROM;.\source\ROM\COMMON;.\source\ROM\OS;.\source\ROM\HC;.\source\ROM\LL;.\source\R
                    -OM\LC;.\source\ROM\HAL;.\source\ROM\KERNEL;.\source\ROM\DRIVER;.\source\ROM\L2CAP;.\source\ROM\GAP;.\source\ROM\MMI_LE;.
                    -\source\ROM\SECTOR;.\source\ROM\SECTOR\Config0;.\source\SECTOR\Config0;.\source\SECTOR\Config1;.\source\SECTOR\DspData;.
                    -\source\SECTOR\Runtime;.\source\SECTOR\VoiceData;.\source\SECTOR\SectorBoundary;.\source\SECTOR\ToolMisc) DEFINE(FLASH_I
                    -NIT=1,AB1520C,MIGRATE_ROM_TO_FLASH,DFU_LOADER_IN_BOOT_CODE,TWS_SETTINGS) DEBUG PRINT(.\LST\AB1520C_AiroStereoHeadset\Key
                    -.lst) TABS(2) OBJECT(.\output\AB1520C_AiroStereoHeadset\Key.obj) 

stmt  level    source

    1          #include "reside_flash.inc"
    2          
    3          #include "rc.h"
    4          #include "..\SDK_Proxy\SDK_Proxy.h"
    5          #include "..\SDK\include\SDK_Config.h"
    6          #include "..\Driver\Driver_Interface.h"
    7          #include "..\Driver\keypad.h"
    8          #include "sector_mmi_nvram_type.h"
    9          #include "..\MMI\MMI_State.h"
   10          #include "..\SDK\include\Key_Event.h"
   11          
   12          #include "..\MMI\MMI_Driver.h"
   13          
   14          #if SDK_HCI_ROLE_SWITCH_SAMPLE_CODE || SDK_HCI_INQUIRY_SAMPLE_CODE
               #include "..\SDK\include\SDK_HCI.h"
               #endif
   17          
   18          #if SDK_AVRCP_REPEAT || SDK_AVRCP_SHUFFLE || SDK_AVRCP_KEYS
               #include "..\SDK\include\SDK_AVRCP.h"
               #endif
   21          
   22          #define SDK_KEY_PARSER  0
   23          
   24          
   25          #define KEY_MAP_MMI_OFF                         (U32)1<<MMI_OFF
   26          #define KEY_MAP_MMI_CONDISCABLE                 (U32)1<<MMI_CONDISCABLE
   27          #define KEY_MAP_MMI_CONNECTABLE                 (U32)1<<MMI_CONNECTABLE
   28          #define KEY_MAP_MMI_CONNECTED                   (U32)1<<MMI_CONNECTED
   29          #define KEY_MAP_MMI_HFP_INCOMMING               (U32)1<<MMI_HFP_INCOMMING
   30          #define KEY_MAP_MMI_HFP_OUTGOING                (U32)1<<MMI_HFP_OUTGOING
   31          #define KEY_MAP_MMI_HFP_CALLACTIVE              (U32)1<<MMI_HFP_CALLACTIVE
   32          #define KEY_MAP_MMI_HFP_CALLACTIVE_WITHOUT_SCO  (U32)1<<MMI_HFP_CALLACTIVE_WITHOUT_SCO
   33          #define KEY_MAP_MMI_HFP_CAIMG                   (U32)1<<MMI_HFP_CAIMG
   34          #define KEY_MAP_MMI_HFP_CAOGG                   (U32)1<<MMI_HFP_CAOGG
   35          #define KEY_MAP_MMI_HFP_CAMULTY                 (U32)1<<MMI_HFP_CAMULTY
   36          #define KEY_MAP_MMI_FAKEON                      (U32)1<<MMI_FAKEON    
   37          #define KEY_MAP_MMI_FAKEOFF                     (U32)1<<MMI_FAKEOFF
   38          #define KEY_MAP_MMI_DETACHING_LINK              (U32)1<<MMI_DETACHING_LINK
   39          #define KEY_MAP_MMI_TEST_MODE                   (U32)1<<MMI_TEST_MODE
   40          #define KEY_MAP_MMI_FM                          (U32)1<<MMI_FM
   41          #define KEY_MAP_MMI_LINE_IN                     (U32)1<<MMI_LINE_IN
   42          #define KEY_MAP_MMI_EEPROM_UPDATING             (U32)1<<MMI_UPDATING
   43          #define KEY_MAP_MMI_EEPROM_UPDATED_OK         (U32)1<<MMI_UPDATED_OK
   44          #define KEY_MAP_MMI_EEPROM_UPDATED_FAIL         (U32)1<<MMI_UPDATED_FAIL
   45          #define KEY_MAP_MMI_VOICE_PROMPT_LANG_SELECT  (U32)1<<MMI_VOICE_PROMPT_LANG_SELECT
   46          #define KEY_MAP_MMI_TWS_PAIRING         (U32)1<<MMI_TWS_PAIRING
   47          #define KEY_MAP_MMI_INQUIRY           (U32)1<<MMI_INQUIRY
   48          #define KEY_MAP_MMMI_MP_STATE         (U32)1<<MMI_MP_STATE
   49          #define KEY_MAP_MMI_STATE_RESERVED1       (U32)1<<MMI_STATE_RESERVED1
   50          #define KEY_MAP_MMI_STATE_RESERVED2       (U32)1<<MMI_STATE_RESERVED2
   51          #define KEY_MAP_MMI_STATE_RESERVED3       (U32)1<<MMI_STATE_RESERVED3
   52          #define KEY_MAP_MMI_STATE_RESERVED4       (U32)1<<MMI_STATE_RESERVED4
C251 COMPILER V5.57.0,  Key                                                                08/11/20  05:53:36  PAGE 2   

   53          #define KEY_MAP_MMI_STATE_RESERVED5       (U32)1<<MMI_STATE_RESERVED5
   54          #define KEY_MAP_MMI_STATE_RESERVED6       (U32)1<<MMI_STATE_RESERVED6
   55          #define KEY_MAP_MMI_STATE_RESERVED7       (U32)1<<MMI_STATE_RESERVED7
   56          
   57          #define KEY_MAP_MMI_ALL_STATES 0xFFFFFFFF
   58          
   59          
   60          #if SDK_KEY_PARSER
               typedef struct
               {
                 U8 keyIndex;
                 U8 keyAction;
                 U32 mmiState;
                 U16 keyEvent;
               }SDK_KEY_MAP_STRU;
               
               #define SDK_KEY_EVT_NUM  10
               
               SDK_KEY_MAP_STRU CODE sdk_key_map[SDK_KEY_EVT_NUM]=
               {
                 {KEY5, KEY_TAP, KEY_MAP_MMI_CONDISCABLE|KEY_MAP_MMI_CONNECTABLE, SDK_KEY_EVENT_1},
                 {KEY5, KEY_TAP, KEY_MAP_MMI_FM, SDK_KEY_EVENT_2},
                 #if SDK_HCI_ROLE_SWITCH_SAMPLE_CODE
                 {KEY6, KEY_DOUBLE, KEY_MAP_MMI_CONNECTED, SDK_KEY_EVENT_3_ROLE_SWITCH_MASTER},
                 {KEY6, KEY_TAP, KEY_MAP_MMI_CONNECTED, SDK_KEY_EVENT_4_ROLE_SWITCH_SLAVE},
                 #endif
                 #if SDK_HCI_INQUIRY_SAMPLE_CODE
                 {KEY6, KEY_DOUBLE, KEY_MAP_MMI_CONDISCABLE|KEY_MAP_MMI_CONNECTABLE, SDK_KEY_EVENT_5_INQUIRY},
                 #endif
                 #if SDK_AVRCP_REPEAT
                 {KEY6, KEY_TAP, KEY_MAP_MMI_CONNECTED, SDK_KEY_EVENT_6_GET_REPEAT},
                 #endif
                 #if SDK_AVRCP_SHUFFLE
                 {KEY6, KEY_DOUBLE, KEY_MAP_MMI_CONNECTED, SDK_KEY_EVENT_7_GET_SHUFFLE},
                 #endif
                 #if SDK_AVRCP_KEYS
                 {KEY6, KEY_TAP, KEY_MAP_MMI_CONNECTED, SDK_KEY_EVENT_8_KEY_PLAY},
                 {KEY6, KEY_DOUBLE, KEY_MAP_MMI_CONNECTED, SDK_KEY_EVENT_9_KEY_FORWARD},
                 #endif
               };
               
               typedef struct
               {
                 U32 keyDownState;
               }SDK_KEY_CTL_TYPE;
               
               SDK_KEY_CTL_TYPE XDATA gSDK_Key_ctl;
               
               #if SDK_HCI_INQUIRY_SAMPLE_CODE
               U8 XDATA Liac[3] = {0x11, 0x8B, 0x9E};
               #endif
               
               BOOL SDK_KeyEvtHandler(U8 linkIndex, U16 keyEvt)
               {
                 switch(keyEvt)
                 {
                   case SDK_KEY_EVENT_2:
                     MMI_DRV_KeyEventHandler(0, KEY_FM_POWEROFF);
                     return TRUE;
                     break;
                   case SDK_KEY_EVENT_1:
                     MMI_DRV_KeyEventHandler(0, KEY_FM_POWERON);
                     return TRUE;
                     break;
                   #if SDK_HCI_ROLE_SWITCH_SAMPLE_CODE
                   case SDK_KEY_EVENT_3_ROLE_SWITCH_MASTER:
C251 COMPILER V5.57.0,  Key                                                                08/11/20  05:53:36  PAGE 3   

                     SDK_HCI_SwitchRoleCmd(linkIndex, SDK_ROLE_MASTER);
                     break;
                   case SDK_KEY_EVENT_4_ROLE_SWITCH_SLAVE:
                     SDK_HCI_SwitchRoleCmd(linkIndex, SDK_ROLE_SLAVE);
                     break;
                   #endif
                   #if SDK_HCI_INQUIRY_SAMPLE_CODE
                   case SDK_KEY_EVENT_5_INQUIRY:
                     SDK_HCI_InquiryCmd(Liac, 8, 0);
                     break;
                   #endif
                   #if SDK_AVRCP_REPEAT
                   case SDK_KEY_EVENT_6_GET_REPEAT:
                     SDK_AVRCP_SendGetRepeatStatus(linkIndex);
                     break;
                   #endif
                   #if SDK_AVRCP_SHUFFLE
                   case SDK_KEY_EVENT_7_GET_SHUFFLE:
                     SDK_AVRCP_SendGetShuffleStatus(linkIndex);
                     break;
                   #endif
                   #if SDK_AVRCP_KEYS
                   case SDK_KEY_EVENT_8_KEY_PLAY:
                     SDK_AVRCP_KeyPlay(linkIndex);
                     break;
                   case SDK_KEY_EVENT_9_KEY_FORWARD:
                     SDK_AVRCP_KeyForward(linkIndex);
                     break;
                   #endif
                 }
                 UNUSED(linkIndex);
                 return FALSE;
               }
               
               /*  SDK_CB_KeyParser: callback function which is called in NDK when key action is detected
                *  <input 1>
                *    U8 keyIndex   : key index which is defined in "..\Driver\keypad.h"
                *    value range   : KEY1 - KEY10
                *  <input 2>
                *    U8 keyAction  : key action which is defined in "..\Driver\Driver_Interface.h"
                *    value range   : KEY_TAP - KEY_UP
                *  <input 3>
                *    U8 linkIndex  : current service link index
                *    value range   : 0 - (max supproted device number -1)
                */
               void SDK_CB_KeyParser(U8 keyIndex, U8 keyAction, U8 linkIndex)
               {
                 U8 i;
                 U32 stateBitMask;
                 U16 keyEvt = SDK_KEY_EVENT_NULL;
                 
                 if(MMI_KEY_MAP_MAPPING_BY_KEY_DOWN_STATE_FEAT)
                 {
                   if(keyAction == KEY_DOWN)
                     gSDK_Key_ctl.keyDownState = MMI_GetTopStateByLink(linkIndex);
                 }
                 else
                 {
                   gSDK_Key_ctl.keyDownState = MMI_GetTopStateByLink(linkIndex);
                 }
               
                 stateBitMask = 1L << (gSDK_Key_ctl.keyDownState);
                     
                 for(i = 0 ; i < SDK_KEY_EVT_NUM; i++)
                 {
                   SDK_KEY_MAP_STRU CODE_PTR keyMapPtr = &sdk_key_map[i];
C251 COMPILER V5.57.0,  Key                                                                08/11/20  05:53:36  PAGE 4   

                   if(keyIndex == keyMapPtr->keyIndex && keyAction == keyMapPtr->keyAction && (stateBitMask & keyMapPtr->m
             -miState))
                   {
                     keyEvt = keyMapPtr->keyEvent;
                     break;
                   }
                 }
               
                 SDK_KeyEvtHandler(linkIndex, keyEvt);
               }
               
               #endif //SDK_KEY_PARSER
  196          
  197          void SDK_Key_Init(void)
  198          {
  199   1      #if SDK_KEY_PARSER
                 SDK_Proxy_RegisterAPI(API_GRP_IOSYS_CB_KEY, API_GRP_IOSYS, (VFUN)SDK_CB_KeyParser);
               #endif
  202   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =         1     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
