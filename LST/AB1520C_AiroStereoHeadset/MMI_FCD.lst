C251 COMPILER V5.57.0,  MMI_FCD                                                            08/11/20  05:53:01  PAGE 1   


C251 COMPILER V5.57.0, COMPILATION OF MODULE MMI_FCD
OBJECT MODULE PLACED IN .\output\AB1520C_AiroStereoHeadset\MMI_FCD.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE source\MMI\MMI_FCD.c XSMALL HPTR FUNCTIONS(REENTRANT) ROM(HUGE) WARNIN
                    -GLEVEL(3) OPTIMIZE(9,SPEED) BROWSE ORDER INCDIR(.\source\COMMON;.\source\SECTOR;.\source\ABSDRIVER;.\source\OS;.\source\
                    -HC;.\source\LM;.\source\LC;.\source\ROM;.\source\ROM\COMMON;.\source\ROM\OS;.\source\ROM\HC;.\source\ROM\LL;.\source\ROM
                    -\LC;.\source\ROM\HAL;.\source\ROM\KERNEL;.\source\ROM\DRIVER;.\source\ROM\L2CAP;.\source\ROM\GAP;.\source\ROM\MMI_LE;.\s
                    -ource\ROM\SECTOR;.\source\ROM\SECTOR\Config0;.\source\SECTOR\Config0;.\source\SECTOR\Config1;.\source\SECTOR\DspData;.\s
                    -ource\SECTOR\Runtime;.\source\SECTOR\VoiceData;.\source\SECTOR\SectorBoundary;.\source\SECTOR\ToolMisc) DEFINE(FLASH_INI
                    -T=1,AB1520C,MIGRATE_ROM_TO_FLASH,DFU_LOADER_IN_BOOT_CODE,TWS_SETTINGS) DEBUG PRINT(.\LST\AB1520C_AiroStereoHeadset\MMI_F
                    -CD.lst) TABS(2) OBJECT(.\output\AB1520C_AiroStereoHeadset\MMI_FCD.obj) 

stmt  level    source

    1          #include "reside_flash.inc"
    2          
    3          #define __MMI_FCD_C__
    4          
    5          #include "rc.h"
    6          #include "bt_config_profile.h"
    7          #include "..\MMI_LE\MMI_LE_interface.h"
    8          #include "..\L2CAP\L2CAP_interface.h"
    9          #include "MMI_FCD.h"
   10          #include "MMI_Base.h"
   11          #include "MMI_Driver.h"
   12          #include "..\COMMON\align_flash.h"
   13          
   14          #ifdef FAST_CONNECT_DONGLE
               #include "MMI_HCI.h"
               #include "MMI_Protocol.h"
               #include "MMI_Reconnect.h"
               #include "..\HC\HC_Interface.h"
               
               PUBLIC void MMI_FCD_ReportDevAddr(U8 XDATA_PTR bdAddr)
               {
                 MMIMsgType XDATA_PTR msgPtr;
                 
                 if (msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA_TO_UART))
                 {
                   msgPtr->paraLen = sizeof(HCI_VCMD_OPCODE_STRU) + sizeof(BD_ADDR);
                   msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VEVT_OCF_FCD_DEV_ADDR;
                   msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_UART_FCD;
                   OSMEM_memcpy_xdata_xdata((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVCmd.VPara.dataBegin, bdAddr, sizeof(BD_A
             -DDR));
                   
                   OSMQ_Put (OSMQ_HCIDRV_Command_From_GAP_ptr, (U8 XDATA_PTR)msgPtr);
                 }   
               }
               
               PUBLIC void MMI_FCD_ReportDevName(U8 XDATA_PTR name, U8 maxLen)
               {
                 MMIMsgType XDATA_PTR msgPtr;
                 
                 if (msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA_TO_UART))
                 {
                   msgPtr->paraLen = sizeof(HCI_VCMD_OPCODE_STRU) + maxLen;
                   msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VEVT_OCF_FCD_DEV_NAME;
                   msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_UART_FCD;
                   OSMEM_memcpy_xdata_xdata(&msgPtr->msgBodyPtr.hciVCmd.VPara.dataBegin, name, maxLen);
               
                   OSMQ_Put (OSMQ_HCIDRV_Command_From_GAP_ptr, (U8 XDATA_PTR)msgPtr);
                 }
               }
               
               PUBLIC void MMI_FCD_ReportDevRSSI(U8 rssi)
               {
C251 COMPILER V5.57.0,  MMI_FCD                                                            08/11/20  05:53:01  PAGE 2   

                 MMIMsgType XDATA_PTR msgPtr;
                 
                 if (msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA_TO_UART))
                 {
                   msgPtr->paraLen = sizeof(HCI_VCMD_OPCODE_STRU) + 1;
                   msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VEVT_OCF_FCD_DEV_RSSI;
                   msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_UART_FCD;
                   msgPtr->msgBodyPtr.hciVCmd.VPara.dataBegin = rssi;
               
                   OSMQ_Put (OSMQ_HCIDRV_Command_From_GAP_ptr, (U8 XDATA_PTR)msgPtr);
                 }   
               }
               
               PUBLIC void MMI_FCD_ReportAction(U8 opCode)
               {
                 MMIMsgType XDATA_PTR msgPtr;
                 
                 if (msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA_TO_UART))
                 {
                   msgPtr->paraLen = sizeof(HCI_VCMD_OPCODE_STRU);
                   msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = opCode;
                   msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_UART_FCD;
                   
                   OSMQ_Put (OSMQ_HCIDRV_Command_From_GAP_ptr, (U8 XDATA_PTR)msgPtr);
                 } 
               }
               
               PUBLIC void MMI_FCD_ReportVolume(U8 opCode, U8 vol)
               {
                 MMIMsgType XDATA_PTR msgPtr;
                 
                 if (msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA_TO_UART))
                 {
                   msgPtr->paraLen = sizeof(HCI_VCMD_OPCODE_STRU) + 1;
                   msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = opCode;
                   msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_UART_FCD;
                   msgPtr->msgBodyPtr.hciVCmd.VPara.dataBegin = vol;
                   
                   OSMQ_Put (OSMQ_HCIDRV_Command_From_GAP_ptr, (U8 XDATA_PTR)msgPtr);
                 } 
               }
               
               PUBLIC void MMI_FCD_SendInquiry(void)
               {
                 gMMI_FCD_ctl.found_rssi = 0;
                 MMI_HCI_SendInquiry(INQUIRY_GIAC);
               }
               
               PUBLIC void MMI_FCD_GetInquiryComplete(void)
               {
                 if (gMMI_FCD_ctl.found_rssi)
                 {
                   U8 linkIndex;
                   if((linkIndex = MMI_GetEmptyLinkIndex((U8 XDATA_PTR)&gMMI_FCD_ctl.found_bd_addr, TRUE)) < MAX_MULTI_POI
             -NT_NO)
                   {
                     gMMI_FCD_ctl.found_rssi = 0;
                     MMI_HCI_SendCreateConnection (  linkIndex,
                                     (U8 XDATA_PTR)&gMMI_FCD_ctl.found_bd_addr, 
                                     RECONNECT_TYPE_NULL, 
                                     (U8 XDATA_PTR)&gMMI_FCD_ctl.found_classOfDev);
                   }
                 }
                 else
                 {
                   MMI_HCI_SendInquiry(INQUIRY_GIAC);
C251 COMPILER V5.57.0,  MMI_FCD                                                            08/11/20  05:53:01  PAGE 3   

                 }
               }
               
               PUBLIC void MMI_FCD_GetInquiryResultWithRSSI(U8 rssi, U8 XDATA_PTR bdAddrPtr, U8 XDATA_PTR codPtr)
               {
                 if (rssi > gMMI_FCD_ctl.found_rssi)
                 {
                   OSMEM_memcpy_xdata_xdata (  (U8 XDATA_PTR)&gMMI_FCD_ctl.found_bd_addr,
                                 bdAddrPtr,
                                 sizeof(BD_ADDR));
                   OSMEM_memcpy_xdata_xdata (  (U8 XDATA_PTR)&gMMI_FCD_ctl.found_classOfDev,
                                 codPtr,
                                 3);
                   gMMI_FCD_ctl.found_rssi = rssi;
                 }
               }
               
               #endif //FAST_CONNECT_DONGLE
  135          
  136          #ifdef AUDIO_BIST
  137          PRIVATE void MMI_FCD_SendAudioBistResult(U8 SignalPower, U8 SNDR)
  138          {
  139   1        MMI_FCD_REMOTE_AUDIOBIST_STRU XDATA_PTR distPtr;
  140   1        
  141   1        if((distPtr = (MMI_FCD_REMOTE_AUDIOBIST_STRU XDATA_PTR)SYS_MemoryGet(sizeof(MMI_FCD_REMOTE_AUDIOBIST_STR
             -U))) != NULL)
  142   1        {
  143   2          distPtr->fcdHeader.packetType = FCD_EVT;
  144   2          distPtr->fcdHeader.cmdEvt = FCD_CMD_AUDIOBIST;
  145   2          distPtr->fcdHeader.errorCode = FCD_NO_ERROR;
  146   2          
  147   2          distPtr->signalPower = SignalPower;
  148   2          distPtr->SNDR = SNDR;
  149   2          
  150   2          L2CAP_SendFCDChannelData(gMMI_FCD_ctl.audioBistLinkIndex, (U8 XDATA_PTR)distPtr, (U16)sizeof(MMI_FCD_RE
             -MOTE_AUDIOBIST_STRU));
  151   2          OSMEM_Put(distPtr);
  152   2        }
  153   1      }
  154          
  155          PUBLIC void MMI_FCD_AudioBistResult()
  156          {
  157   1        MMI_FCD_SendAudioBistResult(gMMI_FCD_ctl.audioBistSNP, gMMI_FCD_ctl.audioBistSNDR);
  158   1      }
  159          
  160          extern PUBLIC void MMI_DRV_AudioBistVendEvtHandler(VOID);
  161          PUBLIC void MMI_FCD_AudioBistControl()
  162          {
  163   1        #define AVERAGE_COUNT 10
  164   1        U8 cnt;
  165   1        U32 signalPower, SNDR;
  166   1        
  167   1        if(!gMMI_FCD_ctl.remoteAudioBist)
  168   1          return;
  169   1        
  170   1        signalPower = SNDR = 0;
  171   1        for(cnt = 0; cnt < AVERAGE_COUNT; cnt++)
  172   1        {
  173   2          SYS_SetTimer(&gMMI_FCD_ctl.remote_audioBist_timer, 2*32L); // 20 ms, DSP updates value every 16 ms
  174   2          while(!SYS_IsTimerExpired(&gMMI_FCD_ctl.remote_audioBist_timer));
  175   2          
  176   2          OS_ENTER_MUTEX_CRITICAL();
  177   2          signalPower += ENDIAN_TRANSFORM_U16(gAlignDSP.IC_BIST_SIGNSE_POWER);
  178   2          SNDR += ENDIAN_TRANSFORM_U16(gAlignDSP.IC_BIST_SNDR_VAL);
  179   2          OS_EXIT_MUTEX_CRITICAL();
  180   2        }
C251 COMPILER V5.57.0,  MMI_FCD                                                            08/11/20  05:53:01  PAGE 4   

  181   1      
  182   1        gMMI_FCD_ctl.audioBistSNP = (U8)(signalPower/(U32)AVERAGE_COUNT);
  183   1        gMMI_FCD_ctl.audioBistSNDR = (U8)(SNDR/(U32)AVERAGE_COUNT);
  184   1        //MMI_FCD_SendAudioBistResult((U8)(signalPower/(U32)AVERAGE_COUNT), (U8)(SNDR/(U32)AVERAGE_COUNT));
  185   1      }
  186          
  187          PRIVATE void MMI_FCD_SendAudioBISTCmd(U8 linkIndex, MMI_FCD_REMOTE_AUDIOBIST_STRU XDATA_PTR dataPtr)
  188          {
  189   1        MMIMsgType XDATA_PTR msgPtr;
  190   1        
  191   1        gMMI_FCD_ctl.audioBistLinkIndex = linkIndex;
  192   1        gMMI_FCD_ctl.remoteAudioBist = TRUE;
  193   1        if((msgPtr = MMI_GetEventMessageMem(HCI_EVENT_BIST_CMD)) != NULL)
  194   1        {
  195   2          msgPtr->paraLen = sizeof(HciBISTCmd);
  196   2          msgPtr->msgBodyPtr.hciBISTCmd.cmdOpCode = HCI_VCMD_OCF_RF_BIST_AUDIO_BIST;
  197   2          msgPtr->msgBodyPtr.hciBISTCmd.ogf = HCI_VENDOR_OGF_BIST;
  198   2          
  199   2          msgPtr->msgBodyPtr.hciBISTCmd.AudioIn = dataPtr->audioIn;
  200   2          msgPtr->msgBodyPtr.hciBISTCmd.AudioOut = dataPtr->audioOut;
  201   2          msgPtr->msgBodyPtr.hciBISTCmd.BISTScenario = dataPtr->audioBistMode;
  202   2          
  203   2          MMI_DRV_AudioBistHCICommand(msgPtr);
  204   2        }
  205   1      }
  206          #endif //AUDIO_BIST
  207          
  208          PRIVATE void MMI_FCD_SendBleBdAddr(U8 linkIndex)
  209          {
  210   1          #ifdef LE_SUPPORTED_HOST_FLASH
  211   1        MMI_FCD_BDADDR_STRU XDATA_PTR distPtr;
  212   1        
  213   1        if((distPtr = (MMI_FCD_BDADDR_STRU XDATA_PTR)SYS_MemoryGet(sizeof(MMI_FCD_BDADDR_STRU))) != NULL)
  214   1        {
  215   2          distPtr->fcdHeader.packetType = FCD_EVT;
  216   2          distPtr->fcdHeader.cmdEvt = FCD_CMD_BLEBDADDR_REQUEST;
  217   2          distPtr->fcdHeader.errorCode = (MMI_LE_GetLeBdAddr((MMI_LE_BD_ADDR XDATA_PTR)distPtr->bdAddr.member)) ?
             - FCD_NO_ERROR : FCD_NOT_SUPPORT_BLE;
  218   2          
  219   2          L2CAP_SendFCDChannelData(linkIndex, (U8 XDATA_PTR)distPtr, (U16)sizeof(MMI_FCD_BDADDR_STRU));
  220   2          OSMEM_Put(distPtr);
  221   2        }
  222   1          #else
                   UNUSED(linkIndex);
                   #endif
  225   1      }
  226          
  227          PRIVATE void MMI_FCD_CmdHandler(U8 linkIndex,  U8 XDATA_PTR dataPtr)
  228          {
  229   1        switch(((MMI_FCD_STRU XDATA_PTR)dataPtr)->cmdEvt)
  230   1        {
  231   2          case FCD_CMD_BLEBDADDR_REQUEST:
  232   2            if(((MMI_FCD_STRU XDATA_PTR)dataPtr)->errorCode == FCD_NO_ERROR)
  233   2              MMI_FCD_SendBleBdAddr(linkIndex);
  234   2            break;
  235   2          
  236   2          #ifdef AUDIO_BIST
  237   2          case FCD_CMD_AUDIOBIST:
  238   2            if(((MMI_FCD_STRU XDATA_PTR)dataPtr)->errorCode == FCD_NO_ERROR)
  239   2              MMI_FCD_SendAudioBISTCmd(linkIndex, (MMI_FCD_REMOTE_AUDIOBIST_STRU XDATA_PTR)dataPtr);
  240   2            break;
  241   2          #endif
  242   2        }
  243   1      }
  244          
  245          PRIVATE void MMI_FCD_EvtHandler(U8 linkIndex,  U8 XDATA_PTR dataPtr)
C251 COMPILER V5.57.0,  MMI_FCD                                                            08/11/20  05:53:01  PAGE 5   

  246          {
  247   1        UNUSED(linkIndex);
  248   1        UNUSED(dataPtr);
  249   1      }
  250          
  251          PUBLIC void MMI_FCD_CmdEvtHandler(U8 linkIndex, U8 XDATA_PTR dataPtr)
  252          {
  253   1        switch(((MMI_FCD_STRU XDATA_PTR)dataPtr)->packetType)
  254   1        {
  255   2          case FCD_CMD:
  256   2            MMI_FCD_CmdHandler(linkIndex, dataPtr);
  257   2            break;
  258   2          
  259   2          case FCD_EVT:
  260   2            MMI_FCD_EvtHandler(linkIndex, dataPtr);
  261   2            break;
  262   2          
  263   2          default:
  264   2            break;
  265   2        }
  266   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       485     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        16     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
