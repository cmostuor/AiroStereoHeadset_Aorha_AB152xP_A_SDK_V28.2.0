C251 COMPILER V5.57.0,  Ringtone                                                           08/11/20  05:51:39  PAGE 1   


C251 COMPILER V5.57.0, COMPILATION OF MODULE Ringtone
OBJECT MODULE PLACED IN .\output\AB1520C_AiroStereoHeadset\Ringtone.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE source\DRIVER\Ringtone.c XSMALL HPTR FUNCTIONS(REENTRANT) ROM(HUGE) WA
                    -RNINGLEVEL(3) OPTIMIZE(9,SPEED) BROWSE ORDER INCDIR(.\source\COMMON;.\source\SECTOR;.\source\ABSDRIVER;.\source\OS;.\sou
                    -rce\HC;.\source\LM;.\source\LC;.\source\ROM;.\source\ROM\COMMON;.\source\ROM\OS;.\source\ROM\HC;.\source\ROM\LL;.\source
                    -\ROM\LC;.\source\ROM\HAL;.\source\ROM\KERNEL;.\source\ROM\DRIVER;.\source\ROM\L2CAP;.\source\ROM\GAP;.\source\ROM\MMI_LE
                    -;.\source\ROM\SECTOR;.\source\ROM\SECTOR\Config0;.\source\SECTOR\Config0;.\source\SECTOR\Config1;.\source\SECTOR\DspData
                    -;.\source\SECTOR\Runtime;.\source\SECTOR\VoiceData;.\source\SECTOR\SectorBoundary;.\source\SECTOR\ToolMisc) DEFINE(FLASH
                    -_INIT=1,AB1520C,MIGRATE_ROM_TO_FLASH,DFU_LOADER_IN_BOOT_CODE,TWS_SETTINGS) DEBUG PRINT(.\LST\AB1520C_AiroStereoHeadset\R
                    -ingtone.lst) TABS(2) OBJECT(.\output\AB1520C_AiroStereoHeadset\Ringtone.obj) 

stmt  level    source

    1          //////////////////////////////////////////////////////////
    2          // Copyright@ 2009 Airoha.  All right reserved.
    3          //////////////////////////////////////////////////////////
    4          #include "reside_flash.inc"
    5          
    6          #define RINGTONE_C
    7          #include "rc.h"
    8          #include "bt_config_profile.h"
    9          
   10          #ifdef RINGTONE_ENABLE
   11          
   12          #include "ringtone.h"
   13          #include "AudioControl.h"
   14          #include "Audio_Mailbox.h"
   15          #include "..\DSP\DSP_Interface.h"
   16          #include "Driver_1520.h"
   17          
   18          #include "sector_config1.h"
   19          #include "drv_sector.h"
   20          
   21          extern PUBLIC void DRIVER_RingtoneOffCallback(void);
   22          
   23          void Ring_Init(void)
   24          {
   25   1        gRT_ctl.pDriverRingtoneData = (DRIVER_RINGTONE_DATA_TYPE CODE_PTR)GET_SECTOR_CFG1_ADDR(SECTOR_DRIVER_RIN
             -GTONE_DATA_INIT);
   26   1        gRT_ctl.ringtoneNumber = gRT_ctl.pDriverRingtoneData->totalRingtoneNo;
   27   1      }
   28          
   29          PUBLIC BOOL Ring_GetData(U8 beepIndex)
   30          {
   31   1        RINGTONE_RECORD_TYPE LDATA ringtoneInfo;
   32   1      
   33   1        if(beepIndex >= gRT_ctl.ringtoneNumber)
   34   1          return FALSE;
   35   1      
   36   1        ringtoneInfo = gRT_ctl.pDriverRingtoneData->ringtoneRecord[beepIndex];
   37   1      
   38   1      
   39   1        if(ringtoneInfo.dataLength == 0)
   40   1          return FALSE;
   41   1      
   42   1      
   43   1        gRT_ctl.playAddr = 0;
   44   1        gRT_ctl.playAddrInCode = (RINGTONE_DATA_MEMORY_PTR_TYPE CODE_PTR)DSP_GetCODEAddr((U8 CODE_PTR)gRT_ctl.pD
             -riverRingtoneData + ringtoneInfo.offset);
   45   1      
   46   1      
   47   1        gRT_ctl.ringtoneLength = ringtoneInfo.dataLength;
   48   1        return TRUE;
   49   1      }
   50          
C251 COMPILER V5.57.0,  Ringtone                                                           08/11/20  05:51:39  PAGE 2   

   51          #ifdef RINGTONE_COPY_XDATA_SRC
               PUBLIC BOOL Ring_CopyData(U8 XDATA_PTR srcPtr, U16 ringtoneLen)
               {
                 RINGTONE_DATA_MEMORY_PTR_TYPE XDATA_PTR tmpPtr;
               
                 if(srcPtr == (U8 XDATA_PTR)NULL || ringtoneLen == 0)
                   return FALSE;
               
                 RINGTINE_DATA_MEMORY_PTR = (RINGTONE_DATA_MEMORY_PTR_TYPE XDATA_PTR)SYS_MemoryGet(ringtoneLen+2); // +1 
             -for DSP align
               
                 if(RINGTINE_DATA_MEMORY_PTR == (RINGTONE_DATA_MEMORY_PTR_TYPE XDATA_PTR)NULL)
                   return FALSE;
               
                 tmpPtr = RINGTINE_DATA_MEMORY_PTR;
               
                 if(PTR16_LSB(tmpPtr) & 0x01)
                 {
                   tmpPtr = (U16 XDATA_PTR)((U8 XDATA_PTR)tmpPtr + 1);
                 }
               
                 OSMEM_memcpy_xdata_xdata(tmpPtr, srcPtr, ringtoneLen);
                 gRT_ctl.playAddr = tmpPtr;
                 gRT_ctl.ringtoneLength = ringtoneLen;
                 return TRUE;
               
               }
               #endif
   78          
   79          PUBLIC BOOL Ring_Start(BOOL suspendApp)
   80          {
   81   1        DriverMsg XDATA_PTR msgPtr;
   82   1      
   83   1        if(gRT_ctl.playAddr == (RINGTONE_DATA_MEMORY_PTR_TYPE XDATA_PTR)NULL && gRT_ctl.playAddrInCode == (RINGT
             -ONE_DATA_MEMORY_PTR_TYPE CODE_PTR)NULL)
   84   1          return FALSE;
   85   1      
   86   1        if(IS_DSP_BUSY)
   87   1          return FALSE;
   88   1      
   89   1        if(suspendApp)
   90   1        {
   91   2      
   92   2          if(gDriver_ctl.resumeAppTimer)
   93   2          {
   94   3            gDriver_ctl.resumeAppAfterVPRT = TRUE;
   95   3            SYS_ReleaseTimer(&gDriver_ctl.resumeAppTimer);
   96   3          }
   97   2      
   98   2          if(DRIVER_IsDSPOgfAppOn())
   99   2          {
  100   3            gDriver_ctl.resumeAppAfterVPRT = TRUE;
  101   3            DRIVER_SendAppIdleToMailBox();
  102   3            return FALSE;
  103   3          }
  104   2        }
  105   1      
  106   1        if(msgPtr = (DriverMsg XDATA_PTR)OSMEM_Get(OSMEM_ptr1))
  107   1        {
  108   2          OSMEM_memset_xdata((U8 XDATA_PTR)msgPtr, 0, OSMEM1_BLKSIZE);
  109   2          AUDIO_SetAudioOn(AUDIO_RINGTONE);
  110   2      
  111   2          RINGTONE_STOP_FLAG = 0;
  112   2          msgPtr->msgBodyPtr.driverCmd.mailBoxCmd.m2d_ctl.para.rt_start_para.rt_no = (gRT_ctl.ringtoneLength>>2);
  113   2          if(gRT_ctl.playAddr)
  114   2          {
C251 COMPILER V5.57.0,  Ringtone                                                           08/11/20  05:51:39  PAGE 3   

  115   3            msgPtr->msgBodyPtr.driverCmd.mailBoxCmd.m2d_ctl.para.rt_start_para.rt_pattern_ptr = (U16 XDATA_PTR)gRT
             -_ctl.playAddr;
  116   3            msgPtr->msgBodyPtr.driverCmd.mailBoxCmd.m2d_ctl.para.rt_start_para.rt_pattern_ptr_code = 0;
  117   3          }
  118   2          else if(gRT_ctl.playAddrInCode)
  119   2          {
  120   3            msgPtr->msgBodyPtr.driverCmd.mailBoxCmd.m2d_ctl.para.rt_start_para.rt_pattern_ptr = 0;
  121   3            msgPtr->msgBodyPtr.driverCmd.mailBoxCmd.m2d_ctl.para.rt_start_para.rt_pattern_ptr_code = (U16 CODE_PTR
             -)gRT_ctl.playAddrInCode;
  122   3          }
  123   2      
  124   2              // reserve dynamic config for each tone
  125   2          msgPtr->msgBodyPtr.driverCmd.mailBoxCmd.m2d_ctl.para.rt_start_para.mute_frame_before_fade_in = 4;
  126   2      
  127   2              Mailbox_TaskOgfVPRTAT(msgPtr, OGF_RT, OCF_RT_START);
  128   2      
  129   2          AUDIO_SetAudioInOutToMailBoxCmd(AUDIO_RINGTONE, &msgPtr->msgBodyPtr.driverCmd.mailBoxCmd.m2d_ctl.para.r
             -t_start_para.audio_scenario);
  130   2              DRIVER_SendCmdToMailBox(msgPtr);
  131   2          return TRUE;
  132   2        }
  133   1      
  134   1        //Fail case
  135   1        SYS_MemoryRelease(&RINGTINE_DATA_MEMORY_PTR);
  136   1        gRT_ctl.playAddrInCode = 0;
  137   1        return FALSE;
  138   1      }
  139          
  140          PUBLIC BOOL Ring_Pause(void)
  141          {
  142   1        DriverMsg XDATA_PTR msgPtr;
  143   1      
  144   1        if(!AUDIO_COMPONENT_IS_ACTIVE(AUDIO_RINGTONE))
  145   1          return TRUE;
  146   1      
  147   1        if(IS_MAILBOX_TASK_VPRT_BUSY)
  148   1          return FALSE;
  149   1      
  150   1        if(IS_RINGTONE_OVER)
  151   1          return TRUE;
  152   1      
  153   1        if(IS_DSP_BUSY)
  154   1          return FALSE;
  155   1      
  156   1        if(msgPtr = (DriverMsg XDATA_PTR)OSMEM_Get (OSMEM_ptr1))
  157   1        {
  158   2          OSMEM_memset_xdata((U8 XDATA_PTR)msgPtr, 0, OSMEM1_BLKSIZE);
  159   2          Mailbox_TaskOgfVPRTAT(msgPtr, OGF_RT, OCF_RT_STOP);
  160   2      
  161   2          DRIVER_SendCmdToMailBox(msgPtr);
  162   2          return TRUE;
  163   2        }
  164   1        return FALSE;
  165   1      }
  166          
  167          PUBLIC void Ring_Stopped(void)
  168          {
  169   1        AUDIO_SetAudioOff(AUDIO_RINGTONE);
  170   1        DRIVER_CheckATEnablePlay();
  171   1        RINGTONE_STOP_FLAG = 0;
  172   1        SYS_MemoryRelease(&RINGTINE_DATA_MEMORY_PTR);
  173   1        gRT_ctl.playAddrInCode = 0;
  174   1        DRIVER_RingtoneOffCallback();
  175   1      
  176   1        if(gDriver_ctl.resumeAppAfterVPRT)
  177   1        {
C251 COMPILER V5.57.0,  Ringtone                                                           08/11/20  05:51:39  PAGE 4   

  178   2          SYS_SetTimer(&gDriver_ctl.resumeAppTimer, ONE_SEC);
  179   2          gDriver_ctl.resumeAppAfterVPRT = FALSE;
  180   2        }
  181   1      }
  182          
  183          #endif


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       582     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        17     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
