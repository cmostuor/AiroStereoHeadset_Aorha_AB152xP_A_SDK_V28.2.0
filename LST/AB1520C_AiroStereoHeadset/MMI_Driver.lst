C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 1   


C251 COMPILER V5.57.0, COMPILATION OF MODULE MMI_Driver
OBJECT MODULE PLACED IN .\output\AB1520C_AiroStereoHeadset\MMI_Driver.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE source\MMI\MMI_Driver.c XSMALL HPTR FUNCTIONS(REENTRANT) ROM(HUGE) WAR
                    -NINGLEVEL(3) OPTIMIZE(9,SPEED) BROWSE ORDER INCDIR(.\source\COMMON;.\source\SECTOR;.\source\ABSDRIVER;.\source\OS;.\sour
                    -ce\HC;.\source\LM;.\source\LC;.\source\ROM;.\source\ROM\COMMON;.\source\ROM\OS;.\source\ROM\HC;.\source\ROM\LL;.\source\
                    -ROM\LC;.\source\ROM\HAL;.\source\ROM\KERNEL;.\source\ROM\DRIVER;.\source\ROM\L2CAP;.\source\ROM\GAP;.\source\ROM\MMI_LE;
                    -.\source\ROM\SECTOR;.\source\ROM\SECTOR\Config0;.\source\SECTOR\Config0;.\source\SECTOR\Config1;.\source\SECTOR\DspData;
                    -.\source\SECTOR\Runtime;.\source\SECTOR\VoiceData;.\source\SECTOR\SectorBoundary;.\source\SECTOR\ToolMisc) DEFINE(FLASH_
                    -INIT=1,AB1520C,MIGRATE_ROM_TO_FLASH,DFU_LOADER_IN_BOOT_CODE,TWS_SETTINGS) DEBUG PRINT(.\LST\AB1520C_AiroStereoHeadset\MM
                    -I_Driver.lst) TABS(2) OBJECT(.\output\AB1520C_AiroStereoHeadset\MMI_Driver.obj) 

stmt  level    source

    1          //////////////////////////////////////////////////////////
    2          // Copyright@ 2009 Airoha.  All right reserved.
    3          //////////////////////////////////////////////////////////
    4          #include "reside_flash.inc"
    5          
    6          #define _MMI_DRIVER_C_
    7          
    8          #include "os.h"
    9          #include "bt_config_profile.h"
   10          
   11          #include "drv_sector.h"
   12          #include "drv_gpio.h"
   13          #include "MMI.h"
   14          #include "MMI_Driver.h"
   15          #include "MMI_Protocol.h"
   16          #include "MMI_HFP.h"
   17          #include "MMI_AVRCP.h"
   18          #include "MMI_A2DP.h"
   19          #include "MMI_AirModule.h"
   20          #include "MMI_FM.h"
   21          #include "MMI_LineIn.h"
   22          #include "MMI_ChgBat.h"
   23          #include "MMI_Timer.h"
   24          #include "MMI_State.h"
   25          #include "MMI_HCI.h"
   26          #include "MMI_SectorManager.h"
   27          #include "MMI_TestMode.h"
   28          #include "MMI_Reconnect.h"
   29          #include "MMI_LED.h"
   30          #include "..\HC\HC_Interface.h"
   31          #include "align_flash.h"
   32          #include "align_osmem.h"
   33          #include "sector_config1.h"
   34          #include "..\DSP\DSP_Interface.h"
   35          #ifdef HID_Profile
               #include "MMI_HID.h"
               #endif
   38          
   39          #ifdef SUPPORT_VOICE_PROMPT
   40            #include "..\Driver\VoicePrompt.h"
   41          #endif
   42          
   43          #ifdef SUPPORT_VOICE_COMMAND
   44            #include "..\Driver\VoiceCommand.h"
   45            #include "..\Driver\voice_command_adaption_data_ctl.h"
   46          #endif
   47          
   48          #include "..\A2DP\A2DP_Interface.h"
   49          #include "..\AVRCP\AVRCP_Interface.h"
   50          
   51          
   52          #include "sector_voice_data.h"
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 2   

   53          
   54          #include "..\ABSDRIVER\drv_sector_flash.h"
   55          
   56          #ifdef OLED_ENABLE
               #include "..\Driver\OLED.h"
               #endif
   59          #include "..\Driver\AudioControl.h"
   60          #include "..\Driver\Driver_Key.h"
   61          #include "..\COMMON\bt_config_profile.h"
   62          #include "..\ROM\DRIVER\drv_adc1.h"
   63          #include "..\ROM\COMMON\rc.h"
   64          #include "..\MMI\MMI_HCI.h"
   65          
   66          #ifdef AIRAPP_Profile
   67            #include "..\AirApp\AirApp_Interface.h"
   68          #endif
   69          
   70          #include "..\Driver\Driver_LED.h"
   71          #include "..\Driver\Driver_Temp.h"
   72          #include "..\ABSDRIVER\drv_gpio_flash.h"
   73          
   74          #include "..\SDK_Proxy\SDK_Proxy.h"
   75          #include "..\Driver\Driver.h"
   76          
   77          #ifdef AIR_MODULE
   78          #include "..\MMI_FUNCTION\MMI_Air_Function.h"
   79          #endif
   80          
   81          #define RINGTONE_VOL_LEVELS 4
   82          #define RINGTONE_MAX_VOL 0
   83          #define RINGTONE_MIN_VOL 3
   84          
   85          PRIVATE void MMI_DRV_KeyEvtMapInit(void);
   86          PRIVATE void MMI_DRV_ADDAInit(void);
   87          PRIVATE void MMI_DRV_AudioSettingsInit(void);
   88          PRIVATE void MMI_DRV_ParaInit(void);
   89          
   90          //////////// Key //////////////////////////////
   91          PRIVATE BOOL MMI_DRV_CheckBtnSequence(KeyIndex keyIndex, U8 keyAction);
   92          PRIVATE void MMI_DRV_CheckResetPairedDevice(U16 eventCode);
   93          
   94          
   95          //////////// Audio ///////////////////////////
   96          
   97          #ifdef SUPPORT_VOICE_COMMAND
   98          PRIVATE void MMI_DRV_SetVoiceCommandTimer(U16 mediaEvent);
   99          #endif
  100          
  101          #ifdef SUPPORT_VOICE_COMMAND
  102          extern PUBLIC DRIVER_VC_ACTION_TYPE CODE_PTR VoiceCommand_GetActionTable(U8 actionIndex);
  103          extern PUBLIC DRIVER_VOICE_COMMAND_ACTION_APD_TYPE CODE_PTR VoiceCommand_GetAPDActionTable(U8 actionIndex
             -);
  104          PRIVATE U16 MMI_DRV_LookUpKeyMapTable(U16 keyEvent);
  105          #endif
  106          
  107          PRIVATE void MMI_DRV_KeyReconnectUserInit(U8 linkIndex);
  108          PRIVATE void MMI_DRV_KeyDiscoverable(U8 linkIndex);
  109          PRIVATE void MMI_DRV_KeyNonDiscoverable(U8 linkIndex);
  110          PRIVATE void MMI_DRV_KeyConnectedToDiscoverable(U8 linkIndex);
  111          PRIVATE void MMI_DRV_KeyConnectedToConnectable(U8 linkIndex);
  112          PRIVATE void MMI_DRV_KeyNFCDiscoverable(U8 linkIndex);
  113          PRIVATE void MMI_DRV_KeyConfirmationAccept(U8 linkIndex);
  114          PRIVATE void MMI_DRV_KeyConfirmationReject(U8 linkIndex);
  115          PRIVATE void MMI_DRV_KeyDbgKeyToggle(U8 linkIndex);
  116          PRIVATE void MMI_DRV_KeyVoiceUp(U8 linkIndex);
  117          PRIVATE void MMI_DRV_KeyVoiceDown(U8 linkIndex);
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 3   

  118          PRIVATE void MMI_DRV_KeyCheckBatteryStatus(U8 linkIndex);
  119          PRIVATE void MMI_DRV_KeyBuzzerMuteToggle(U8 linkIndex);
  120          PRIVATE void MMI_DRV_KeyToggleVolume(U8 linkIndex);
  121          PRIVATE void MMI_DRV_KeyVolOrientationNormal(U8 linkIndex);
  122          PRIVATE void MMI_DRV_KeyVolOrientationInvert(U8 linkIndex);
  123          PRIVATE void MMI_DRV_KeyToggleLED(U8 linkIndex);
  124          PRIVATE void MMI_DRV_KeyEnableLED(U8 linkIndex);
  125          PRIVATE void MMI_DRV_KeyDisableLED(U8 linkIndex);
  126          PRIVATE void MMI_DRV_KeyCancelLEDIndication(U8 linkIndex);
  127          PRIVATE void MMI_DRV_KeyMediaTrigger(U8 linkIndex);
  128          PRIVATE void MMI_DRV_KeyPowerOnDiscoverable(U8 linkIndex);
  129          PRIVATE void MMI_DRV_KeyPowerOn(U8 linkIndex);
  130          PRIVATE void MMI_DRV_KeyPowerOff(U8 linkIndex);
  131          PRIVATE void MMI_DRV_KeyReset(U8 linkIndex);
  132          PRIVATE void MMI_DRV_KeyResetPairedDevices(U8 linkIndex);
  133          PRIVATE void MMI_DRV_KeyMaxDeviceAllowUp(U8 linkIndex);
  134          PRIVATE void MMI_DRV_KeyMaxDeviceAllowDown(U8 linkIndex);
  135          PRIVATE void MMI_DRV_KeyMaxDeviceAllowToggle(U8 linkIndex);
  136          PRIVATE void MMI_DRV_KeyReconnectAfterPowerOn(U8 linkIndex);
  137          PRIVATE void MMI_DRV_KeyVoicePromptToggle(U8 linkIndex);
  138          PRIVATE void MMI_DRV_KeyVoicePromptEnable(U8 linkIndex);
  139          PRIVATE void MMI_DRV_KeyVoicePromptDisable(U8 linkIndex);
  140          #ifdef SUPPORT_VOICE_PROMPT
  141          PRIVATE void MMI_DRV_KeyVoicePromptLanChange(U8 linkIndex);
  142          PRIVATE void MMI_DRV_KeyVoicePromptLanSel(U8 linkIndex);
  143          PRIVATE void MMI_DRV_KeyVoicePromptLanCfm(U8 linkIndex);
  144          #endif
  145          PRIVATE void MMI_DRV_KeyButtonLockOn(U8 linkIndex);
  146          PRIVATE void MMI_DRV_KeyButtonLockOff(U8 linkIndex);
  147          PRIVATE void MMI_DRV_KeyButtonLockToggle(U8 linkIndex);
  148          PRIVATE void MMI_DRV_KeyMicUp(U8 linkIndex);
  149          PRIVATE void MMI_DRV_KeyMicDown(U8 linkIndex);
  150          PRIVATE void MMI_DRV_KeyMicMuteToggle(U8 linkIndex);
  151          PRIVATE void MMI_DRV_KeyMicMuteOn(U8 linkIndex);
  152          PRIVATE void MMI_DRV_KeyMicMuteOff(U8 linkIndex);
  153          PRIVATE void MMI_DRV_KeySCOSwitch(U8 linkIndex);
  154          PRIVATE void MMI_DRV_KeyPEQModeChange(U8 linkIndex);
  155          PRIVATE void MMI_DRV_KeyMultiPlayModeToggle(U8 linkIndex);
  156          PRIVATE void MMI_DRV_KeyCheckStatusOfConnection(U8 linkIndex);
  157          PRIVATE void MMI_DRV_KeyChangeSoundEffect(U8 linkIndex);
  158          PRIVATE void MMI_DRV_KeyControlDBBOnOff(U8 linkIndex);
  159          PRIVATE void MMI_DRV_EnableDUTModeCMD(U8 linkIndex);
  160          PRIVATE void MMI_DRV_KeyMicEnableL(U8 linkIndex);
  161          PRIVATE void MMI_DRV_KeyMicEnableR(U8 linkIndex);
  162          PRIVATE void MMI_DRV_KeyMicToSpkEnable(U8 linkIndex);
  163          PRIVATE void MMI_DRV_KeyMicToSpkDisable(U8 linkIndex);
  164          PRIVATE void MMI_DRV_KeyEnableECNR(U8 linkIndex);
  165          PRIVATE void MMI_DRV_KeyDisableECNR(U8 linkIndex);
  166          PRIVATE void MMI_DRV_Key2KToneEnable(U8 linkIndex);
  167          PRIVATE void MMI_DRV_Key2KToneDisable(U8 linkIndex);
  168          PRIVATE void MMI_DRV_KeySwitchStereoMono(U8 linkIndex);
  169          
  170          #ifdef SUPPORT_MIC_IN_A2DP_MODE
  171          PRIVATE void MMI_DRV_MicSpkActionInA2DPMode(U8 linkIndex, BOOL isEnable, BOOL isMicVolSyncSounLevel);
  172          PRIVATE void MMI_DRV_ControlMicInA2DPMode(U8 linkIndex);
  173          PRIVATE void MMI_DRV_KeyAudioTransparency(U8 linkIndex);
  174          #endif
  175          PRIVATE void MMI_DRV_KeyRoleChange(U8 linkIndex);
  176          
  177          PRIVATE U16 MMI_DRV_CheckKeyReconnect(U16 keyCode);
  178          PRIVATE U16 MMI_DRV_CheckKeyVoicePrompt(U16 keyCode);
  179          PRIVATE U16 MMI_DRV_CheckKeyDiscoverable(U16 keyCode);
  180          PRIVATE U16 MMI_DRV_CheckKeyVoiceDown(U16 keyCode);
  181          PRIVATE U16 MMI_DRV_CheckKeyPowerOff(U16 keyCode);
  182          PRIVATE U16 MMI_DRV_CheckKeyVoiceCommandEnable(U16 keyCode);
  183          PRIVATE U16 MMI_DRV_CheckKeyMuteOnOff(U16 keyCode);
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 4   

  184          PRIVATE U16 MMI_DRV_CheckKeySCOSwitch(U16 keyCode);
  185          PRIVATE U16 MMI_DRV_CheckKeyUnderA2DP(U16 keyCode);
  186          PRIVATE U16 MMI_DRV_CheckKeyAudioTransparency(U16 keyCode);
  187          
  188          #ifdef AUDIO_BIST
  189          PUBLIC void MMI_DRV_AudioBistSetTimer(void);
  190          PUBLIC void MMI_DRV_AudioBistCheckTimer(void);
  191          PUBLIC void MMI_DRV_AudioBistSetResult(U16 SNRResult, U16 SNDRResult);
  192          #ifdef FT_AUDIO_BIST
               PUBLIC void MMI_DRV_AudioFTBIST(void);
               #endif
  195          #endif
  196          
  197          U8 CODE audioDevLinkGrpMappingTable[] =
  198          {
  199            AUDIO_DEVICE_SCO,
  200            AUDIO_DEVICE_SCO_HSP,
  201            AUDIO_DEVICE_SCO_IDLE,
  202            AUDIO_DEVICE_MUSIC,
  203            AUDIO_DEVICE_MUSIC_CALL_NOTIFY,
  204            AUDIO_DEVICE_KEY_AT_CMD,
  205            AUDIO_DEVICE_CALL_STATE,
  206            AUDIO_DEVICE_AVRCP_PLAY,
  207          };
  208          
  209          U8 CODE audioDevSysMappingTable[] =
  210          {
  211            AUDIO_DEVICE_LINE_IN,
  212            AUDIO_DEVICE_FM,
  213            AUDIO_DEVICE_DEMO_SOUND,
  214            AUDIO_DEVICE_MIC_TO_SPK,
  215          };
  216          
  217          KeyEvtMapType CODE keyEventMap[KEY_TOTAL_NO] =
  218          {
  219            {NOT_KEY_EVENT,   0}, //KEY_INVALID,
  220            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_RECONNECT_USER_INIT}, //KEY_RECONNECT_USER_INIT
  221            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_DISCOVERABLE},//KEY_DISCOVERABLE,
  222            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_NONDISCOVERABLE}, //KEY_NONDISCOVERABLE,
  223            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_CONNECTED_TO_DISCOVERABLE}, //KEY_CONNECTED_TO_DISCOVERABLE,
  224            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_CONNECTED_TO_CONNECTABLE}, //KEY_CONNECTED_TO_CONNECTABLE,
  225            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_NFC_DISCOVREABLE}, //KEY_NFC_DISCOVREABLE,
  226            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_CONFIRMATION_ACCEPT}, //KEY_CONFIRMATION_ACCEPT,
  227            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_CONFIRMATION_REJECT}, //KEY_CONFIRMATION_REJECT,
  228            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_DEBUG_KEY_TOGGLE}, //KEY_DEBUG_KEY_TOGGLE,
  229            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_VOICEUP}, //KEY_VOICEUP,
  230            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_VOICEDN}, //KEY_VOICEDN,
  231            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_CHECK_BATTERY_STATUS}, //KEY_CHECK_BATTERY_STATUS,
  232            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_BUZZER_MUTE_TOGGLE}, //KEY_BUZZER_MUTE_TOGGLE,
  233            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_TOGGLE_VOLUME}, //KEY_TOGGLE_VOLUME,
  234            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_VOLUME_ORIENTATION_NORMAL}, //KEY_VOLUME_ORIENTATION_NORMAL,
  235            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_VOLUME_ORIENTATION_INVERT}, //KEY_VOLUME_ORIENTATION_INVERT,
  236            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_TOGGLE_LED}, //KEY_TOGGLE_LED,
  237            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_ENABLE_LED}, //KEY_ENABLE_LED,
  238            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_DISABLE_LED}, //KEY_DISABLE_LED,
  239            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_CANCEL_LED_INDICATION}, //KEY_CANCEL_LED_INDICATION,
  240            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_MEDIA_TRIGGER_1}, //KEY_MEDIA_TRIGGER_1,
  241            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_MEDIA_TRIGGER_2}, //KEY_MEDIA_TRIGGER_2,
  242          
  243            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_POWER_ON_THEN_ENTERDISCOVERABLE},//KEY_POWER_ON_THEN_ENTERDISCO
             -VERABLE, // For NFC
  244            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_POWER_ON},//KEY_POWER_ON,
  245            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_POWER_OFF},//KEY_POWER_OFF,
  246            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_RESET},//KEY_RESET,
  247            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_RESET_PAIRED_DEVICES},//KEY_RESET_PAIRED_DEVICES,
  248            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_MAX_DEVICE_ALLOWED_UP},//KEY_MAX_DEVICE_ALLOWED_UP,
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 5   

  249            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_MAX_DEVICE_ALLOWED_DOWN},//KEY_MAX_DEVICE_ALLOWED_DOWN,
  250            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_MAX_DEVICE_ALLOWED_TOGGLE},//KEY_MAX_DEVICE_ALLOWED_TOGGLE,
  251            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_RECONNECT_AFTER_POWER_ON},//KEY_RECONNECT_AFTER_POWER_ON,
  252            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_TOGGLE},//KEY_VOICE_PROMPT_TOGGLE,
  253            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_ENABLE},//KEY_VOICE_PROMPT_ENABLE,
  254            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_DISABLE},//KEY_VOICE_PROMPT_DISABLE,
  255            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_LANG_CHANGE},//KEY_VOICE_PROMPT_LANG_CHANGE,
  256            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_LANG_SELECT},//KEY_VOICE_PROMPT_LANG_SELECT,
  257            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_LANG_CONFIRM},//KEY_VOICE_PROMPT_LANG_CONFIRM,
  258            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_TEST_VOICE_PROMPT_PLAY},//KEY_TEST_VOICE_PROMPT_PLAY,
  259            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_TEST_VOICE_PROMPT_NEXT},//KEY_TEST_VOICE_PROMPT_NEXT,
  260            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_BUTTONLOCKON},//KEY_BUTTONLOCKON,
  261            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_BUTTONLOCKOFF},//KEY_BUTTONLOCKOFF,
  262            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_BUTTONLOCKTOGGLE},//KEY_BUTTONLOCKTOGGLE,
  263            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_VOICE_COMMAND_ENABLE},//KEY_VOICE_COMMAND_ENABLE,
  264            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_MICUP},//KEY_MICUP,
  265            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_MICDN},//KEY_MICDN,
  266            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_MIC_MUTE_TOGGLE},//KEY_MIC_MUTE_TOGGLE,
  267            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_MIC_MUTE_ON},//KEY_MIC_MUTE_ON,
  268            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_MIC_MUTE_OFF},//KEY_MIC_MUTE_OFF,
  269          
  270            {AIR_KEY_EVENT,   AIR_KEY_EVENT_KEY_AIR_ENTER_AIR_PAIRING},//KEY_AIR_ENTER_AIR_PAIRING,
  271            {AIR_KEY_EVENT,   AIR_KEY_EVENT_KEY_AIR_EXIT_AIR_PAIRING},//KEY_AIR_EXIT_AIR_PAIRING,
  272            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_AUDIO_TRANSFER},//KEY_AUDIO_TRANSFER,
  273            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_SET_VOICE_RECOGNITION},//KEY_SET_VOICE_RECOGNITION,
  274            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_RDIAL},//KEY_RDIAL,
  275            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_DIALMEM},//KEY_DIALMEM,
  276            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_DIALNUM},//KEY_DIALNUM,
  277            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_CNLOUTGOING},//KEY_CNLOUTGOING,
  278            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_REJCALL},//KEY_REJCALL,
  279            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_REJCALL_SECOND_PHONE},//KEY_REJCALL_SECOND_PHONE,
  280            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_ONHOLD_CALL},//KEY_ONHOLD_CALL,
  281            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_ACPCALL},//KEY_ACPCALL,
  282            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_ENDCALL},//KEY_ENDCALL,
  283            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_3WAYRELNUDUB},//KEY_3WAYRELNUDUB,
  284            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_3WAYRELNACP},//KEY_3WAYRELNACP,
  285            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_3WAYRELNACP_X},//KEY_3WAYRELNACP_X,
  286            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_3WAYHOLDNACP},//KEY_3WAYHOLDNACP,
  287            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_3WAYHOLDNACP_X},//KEY_3WAYHOLDNACP_X,
  288            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_3WAYADD},//KEY_3WAYADD,
  289            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_3WAYCALLTRANSFER},//KEY_3WAYCALLTRANSFER,
  290            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_HSP_BUTTON_PRESSED},//KEY_HSP_BUTTON_PRESSED,
  291            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_DISABLE_NREC},//KEY_DISABLE_NREC,
  292            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_GETCALLNUM},//KEY_GETCALLNUM,
  293            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_QUERY_CALL_LIST},//KEY_QUERY_CALL_LIST,
  294            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_SEND_DTMF},//KEY_SEND_DTMF,
  295            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_ATTACH_LAST_VOICE_TAG_RECORDED},//KEY_ATTACH_LAST_VOICE_TAG_RECORDED
             -,
  296            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_SEND_CLIP},//KEY_SEND_CLIP,
  297            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_SET_VOICE_RECOGNITION_SECONDARY},//KEY_SET_VOICE_RECOGNITION_SECONDA
             -RY,
  298            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_RDIAL_SECONDARY},//KEY_RDIAL_SECONDARY,
  299            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_SET_VOICE_RECOGNITION_CANCEL},//KEY_SET_VOICE_RECOGNITION_CANCEL,
  300            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_SET_VOICE_RECOGNITION_SECONDARY_CANCEL},//KEY_SET_VOICE_RECOGNITION_
             -SECONDARY_CANCEL,
  301            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_SIRI_START_OR_CONTINUE},//KEY_SIRI_START_OR_CONTINUE,
  302            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_SIRI_END},//KEY_SIRI_END,
  303            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_SIRI_START_OR_CONTINUE_SECONDARY},//KEY_SIRI_START_OR_CONTINUE_SECON
             -DARY,
  304            {HFP_KEY_EVENT,   HFP_KEY_EVENT_KEY_SIRI_END_SECONDARY},//KEY_SIRI_END_SECONDARY,
  305          
  306          
  307            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_AVRCP_PLAY},//KEY_AVRCP_PLAY,
  308            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_AVRCP_STOP},//KEY_AVRCP_STOP,
  309            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_AVRCP_PAUSE},//KEY_AVRCP_PAUSE,
  310            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_AVRCP_RECORD},//KEY_AVRCP_RECORD,
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 6   

  311            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_AVRCP_REWIND_PUSH},//KEY_AVRCP_REWIND_PUSH,
  312            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_AVRCP_FAST_FORWARD_PUSH},//KEY_AVRCP_FAST_FORWARD_PUSH,
  313            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_AVRCP_EJECT},//KEY_AVRCP_EJECT,
  314            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_AVRCP_FORWARD},//KEY_AVRCP_FORWARD, //0x5B
  315            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_AVRCP_BACKWARD},//KEY_AVRCP_BACKWARD,
  316            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_AVRCP_REWIND_RELEASE},//KEY_AVRCP_REWIND_RELEASE,
  317            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_AVRCP_FAST_FORWARD_RELEASE},//KEY_AVRCP_FAST_FORWARD_RELEASE,
  318            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_AVRCP_REPEAT_MODE_CHANGE},//KEY_AVRCP_REPEAT_MODE_CHANGE,
  319            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_AVRCP_SHUFFLE_MODE_CHANGE},//KEY_AVRCP_SHUFFLE_MODE_CHANGE,
  320            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_AVRCP_ACTIVE_TOGGLE},//KEY_AVRCP_ACTIVE_TOGGLE,
  321          
  322            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_PEQ_MODE_CHANGE}, //KEY_PEQ_MODE_CHANGE,
  323          
  324            {FM_KEY_EVENT,    FM_KEY_EVENT_KEY_FM_POWERON},//KEY_FM_POWERON,
  325            {FM_KEY_EVENT,    FM_KEY_EVENT_KEY_FM_POWEROFF},//KEY_FM_POWEROFF,
  326            {FM_KEY_EVENT,    FM_KEY_EVENT_KEY_SEEKUP},//KEY_SEEKUP,
  327            {FM_KEY_EVENT,    FM_KEY_EVENT_KEY_SEEKDOWN},//KEY_SEEKDOWN,  //0x66
  328            {FM_KEY_EVENT,    FM_KEY_EVENT_KEY_TUNEUP},//KEY_TUNEUP,
  329            {FM_KEY_EVENT,    FM_KEY_EVENT_KEY_TUNEDN},//KEY_TUNEDN,
  330            {FM_KEY_EVENT,    FM_KEY_EVENT_KEY_FM_MUTETOGGLE},//KEY_FM_MUTETOGGLE,
  331          
  332            {LINE_IN_KEY_EVENT,   LINE_IN_KEY_EVENT_KEY_ENTER_LINEIN_MODE},//KEY_ENTER_LINEIN_MODE,
  333            {LINE_IN_KEY_EVENT,   LINE_IN_KEY_EVENT_KEY_EXIT_LINEIN_MODE},//KEY_EXIT_LINEIN_MODE,
  334            {LINE_IN_KEY_EVENT,   LINE_IN_KEY_EVENT_KEY_LINEIN_MUTE_TOGGLE},//KEY_LINEIN_MUTE_TOGGLE,
  335          
  336            {TESTMODE_KEY_EVENT,    TESTMODE_KEY_EVENT_KEY_ENTER_TESTMODE},//KEY_ENTER_TESTMODE,
  337            {TESTMODE_KEY_EVENT,    TESTMODE_KEY_EVENT_KEY_SWITCH_TEST_MODE_CHANNEL},//KEY_SWITCH_TEST_MODE_CHANNEL,
  338            {TESTMODE_KEY_EVENT,    TESTMODE_KEY_EVENT_KEY_SWITCH_TEST_MODE_POWER},//KEY_SWITCH_TEST_MODE_POWER,
  339            {TESTMODE_KEY_EVENT,    TESTMODE_KEY_EVENT_KEY_SWITCH_TEST_MODE_STATE},//KEY_SWITCH_TEST_MODE_STATE,
  340            {TESTMODE_KEY_EVENT,    TESTMODE_KEY_EVENT_KEY_SWITCH_TEST_MODE_TX_PACKET_TYPE},//KEY_SWITCH_TEST_MODE_TX
             -_PACKET_TYPE,
  341            {SYSTEM_KEY_EVENT,    SYSTEM_KEY_EVENT_KEY_SCO_SWITCH}, //KEY_SCO_SWITCH,
  342            {AIR_KEY_EVENT,     AIR_KEY_EVENT_KEY_AIR_ENTER_AIR_SECURE_PAIRING},//KEY_AIR_ENTER_AIR_SECURE_PAIRING,
  343            {SYSTEM_KEY_EVENT,    SYSTEM_KEY_EVENT_KEY_MULTI_A2DP_PLAY_MODE_TOGGLE},//KEY_MULTI_A2DP_PLAY_MODE_TOGGLE
             -,
  344            {SYSTEM_KEY_EVENT,    SYSTEM_KEY_EVENT_KEY_CHECK_STATUS_OF_CONNECTION},//KEY_CHECK_STATUS_OF_CONNECTION
  345            {SYSTEM_KEY_EVENT,    SYSTEM_KEY_EVENT_KEY_WHAT_CAN_I_SAY},//KEY_WHAT_CAN_I_SAY
  346            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_KEY_LEFT_CHANNEL},//KEY_LEFT_CHANNEL
  347            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_KEY_RIGHT_CHANNEL},//KEY_RIGHT_CHANNEL
  348            {AVRCP_KEY_EVENT,   AVRCP_KEY_EVENT_KEY_KEY_STEREO_CHANNEL},//KEY_STEREO_CHANNEL
  349            {SYSTEM_KEY_EVENT,    SYSTEM_KEY_EVENT_KEY_VOICE_COMMAND_CANCEL},//KEY_VOICE_COMMAND_CANCEL
  350            {SYSTEM_KEY_EVENT,    SYSTEM_KEY_EVENT_KEY_VOICE_MAKE_A_CALL},//KEY_VOICE_MAKE_A_CALL
  351            {SYSTEM_KEY_EVENT,    SYSTEM_KEY_EVENT_KEY_CHECK_STATUS},//KEY_CHECK_STATUS
  352            {SYSTEM_KEY_EVENT,    SYSTEM_KEY_EVENT_KEY_CHANGE_SOUND_EFFECT},//KEY_CHANGE_SOUND_EFFECT
  353            {SYSTEM_KEY_EVENT,    SYSTEM_KEY_EVENT_KEY_CONTROL_DBB_ON_OFF},//KEY_CONTROL_DBB_ON_OFF
  354          };
  355          
  356          KeyEvtMapType2 CODE keyEventMap2[KEY_SECOND_TABLE_NUM] =
  357          {
  358            {NOT_KEY_EVENT,   0}, //KEY_SECOND_TABLE_START,
  359            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_CONTROL_MIC_A2DP_MODE}, //KEY_RECONNECT_USER_INIT
  360            {HID_KEY_EVENT,   HID_KEY_EVENT_KEY_SELFIE},//KEY_EVENT_KEY_SELFIE
  361            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_ENABLE_DUT_MODE_COMMAND}, //KEY_ENABLE_DUT_MODE_COMMAND
  362            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_MIC_L_ENABLE}, //KEY_MIC_L_ENABLE
  363            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_MIC_R_ENABLE}, //KEY_MIC_R_ENABLE
  364            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_MIC_TO_SPK_ENABLE}, //KEY_MIC_TO_SPK_ENABLE
  365            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_MIC_TO_SPK_DISABLE}, //KEY_MIC_TO_SPK_DISABLE
  366            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_ENABLE_EC_NR}, //KEY_ENABLE_EC_NR
  367            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_DISABLE_EC_NR}, //KEY_DISABLE_EC_NR
  368            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_2K_TONE_ENABLE}, //KEY_2K_TONE_ENABLE
  369            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_2K_TONE_DISABLE}, //KEY_2K_TONE_DISABLE
  370            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_SWITCH_STEREO_MONO}, //KEY_SWITCH_STEREO_MONO
  371            {HID_KEY_EVENT,     HID_KEY_EVENT_SWITCH_SELFIE},//MMI_EVT_KEY_SWITCH_SELFIE
  372            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_AUDIO_TRANSPARENCY}, //KEY_AUDIO_TRANSPARENCY
  373            {SYSTEM_KEY_EVENT,  SYSTEM_KEY_EVENT_KEY_ROLE_CHANGE}, //KEY_ROLE_CHANGE
  374          };
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 7   

  375          
  376          MMI_KEY_EVT_MAP_TYPE XDATA MMI_KeyEvtMap[KEY_ACTIONTOTALNUMBER];
  377          MMI_KEY_EVT_MAP_TYPE2 XDATA MMI_KeyEvtMap2[KEY_ACTIONTOTALNUMBER];
  378          
  379          static MMI_KEY_EVT CODE MMI_DRV_KeyEvtHandler[SYSTEM_KEY_EVENT_NO]=
  380          {
  381            {MMI_DRV_KeyReconnectUserInit}, //SYSTEM_KEY_EVENT_KEY_RECONNECT_USER_INIT
  382            {MMI_DRV_KeyDiscoverable}, //SYSTEM_KEY_EVENT_KEY_DISCOVERABLE,
  383            {MMI_DRV_KeyNonDiscoverable}, //SYSTEM_KEY_EVENT_KEY_NONDISCOVERABLE,
  384            {MMI_DRV_KeyConnectedToDiscoverable}, //SYSTEM_KEY_EVENT_KEY_CONNECTED_TO_DISCOVERABLE,
  385            {MMI_DRV_KeyConnectedToConnectable}, //SYSTEM_KEY_EVENT_KEY_CONNECTED_TO_CONNECTABLE,   //0x05
  386            {MMI_DRV_KeyNFCDiscoverable}, //SYSTEM_KEY_EVENT_KEY_NFC_DISCOVREABLE,
  387            {MMI_DRV_KeyConfirmationAccept}, //SYSTEM_KEY_EVENT_KEY_CONFIRMATION_ACCEPT,
  388            {MMI_DRV_KeyConfirmationReject}, //SYSTEM_KEY_EVENT_KEY_CONFIRMATION_REJECT,
  389            {MMI_DRV_KeyDbgKeyToggle}, //SYSTEM_KEY_EVENT_KEY_DEBUG_KEY_TOGGLE,
  390            {MMI_DRV_KeyVoiceUp}, //SYSTEM_KEY_EVENT_KEY_VOICEUP,   //0x0a
  391            {MMI_DRV_KeyVoiceDown}, //SYSTEM_KEY_EVENT_KEY_VOICEDN,
  392            {MMI_DRV_KeyCheckBatteryStatus}, //SYSTEM_KEY_EVENT_KEY_CHECK_BATTERY_STATUS,
  393            {MMI_DRV_KeyBuzzerMuteToggle}, //SYSTEM_KEY_EVENT_KEY_BUZZER_MUTE_TOGGLE,
  394            {MMI_DRV_KeyToggleVolume}, //SYSTEM_KEY_EVENT_KEY_TOGGLE_VOLUME,
  395            {MMI_DRV_KeyVolOrientationNormal}, //SYSTEM_KEY_EVENT_KEY_VOLUME_ORIENTATION_NORMAL,    //0x0F
  396            {MMI_DRV_KeyVolOrientationInvert}, //SYSTEM_KEY_EVENT_KEY_VOLUME_ORIENTATION_INVERT,   //0x10
  397            {MMI_DRV_KeyToggleLED}, //SYSTEM_KEY_EVENT_KEY_TOGGLE_LED,
  398            {MMI_DRV_KeyEnableLED}, //SYSTEM_KEY_EVENT_KEY_ENABLE_LED,
  399            {MMI_DRV_KeyDisableLED}, //SYSTEM_KEY_EVENT_KEY_DISABLE_LED,
  400            {MMI_DRV_KeyCancelLEDIndication}, //SYSTEM_KEY_EVENT_KEY_CANCEL_LED_INDICATION,
  401            {MMI_DRV_KeyMediaTrigger}, //SYSTEM_KEY_EVENT_KEY_MEDIA_TRIGGER_1,  //0x15
  402            {MMI_DRV_KeyMediaTrigger}, //SYSTEM_KEY_EVENT_KEY_MEDIA_TRIGGER_2,
  403            {MMI_DRV_KeyPowerOnDiscoverable}, //SYSTEM_KEY_EVENT_KEY_POWER_ON_THEN_ENTERDISCOVERABLE, // For NFC
  404            {MMI_DRV_KeyPowerOn}, //SYSTEM_KEY_EVENT_KEY_POWER_ON,
  405            {MMI_DRV_KeyPowerOff}, //SYSTEM_KEY_EVENT_KEY_POWER_OFF,
  406            {MMI_DRV_KeyReset}, //SYSTEM_KEY_EVENT_KEY_RESET,   //0x1a
  407            {MMI_DRV_KeyResetPairedDevices}, //SYSTEM_KEY_EVENT_KEY_RESET_PAIRED_DEVICES,  //wait ringtone voice pro
             -mpt
  408            {MMI_DRV_KeyMaxDeviceAllowUp}, //SYSTEM_KEY_EVENT_KEY_MAX_DEVICE_ALLOWED_UP,
  409            {MMI_DRV_KeyMaxDeviceAllowDown}, //SYSTEM_KEY_EVENT_KEY_MAX_DEVICE_ALLOWED_DOWN,
  410            {MMI_DRV_KeyMaxDeviceAllowToggle}, //SYSTEM_KEY_EVENT_KEY_MAX_DEVICE_ALLOWED_TOGGLE,
  411            {MMI_DRV_KeyReconnectAfterPowerOn}, //SYSTEM_KEY_EVENT_KEY_RECONNECT_AFTER_POWER_ON,    //0x1F
  412            {MMI_DRV_KeyVoicePromptToggle}, //SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_TOGGLE,   //0x20
  413            {MMI_DRV_KeyVoicePromptEnable}, //SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_ENABLE,
  414            {MMI_DRV_KeyVoicePromptDisable}, //SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_DISABLE,
  415          #ifdef SUPPORT_VOICE_PROMPT
  416            {MMI_DRV_KeyVoicePromptLanChange}, //SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_LANG_CHANGE,
  417            {MMI_DRV_KeyVoicePromptLanSel}, //SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_LANG_SELECT,
  418            {MMI_DRV_KeyVoicePromptLanCfm}, //SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_LANG_CONFIRM,   //0x25
  419          #else
                 {NULL}, //SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_LANG_CHANGE,    //0x25
                 {NULL}, //SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_LANG_SELECT,    //0x25
                 {NULL}, //SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_LANG_CONFIRM,   //0x25
               #endif
  424            {NULL}, //SYSTEM_KEY_EVENT_KEY_TEST_VOICE_PROMPT_PLAY,
  425            {NULL}, //SYSTEM_KEY_EVENT_KEY_TEST_VOICE_PROMPT_NEXT,
  426            {MMI_DRV_KeyButtonLockOn}, //SYSTEM_KEY_EVENT_KEY_BUTTONLOCKON,
  427            {MMI_DRV_KeyButtonLockOff}, //SYSTEM_KEY_EVENT_KEY_BUTTONLOCKOFF,
  428            {MMI_DRV_KeyButtonLockToggle}, //SYSTEM_KEY_EVENT_KEY_BUTTONLOCKTOGGLE,     //0x2a
  429            {NULL}, //SYSTEM_KEY_EVENT_KEY_VOICE_COMMAND_ENABLE,
  430            {MMI_DRV_KeyMicUp}, //SYSTEM_KEY_EVENT_KEY_MICUP,   //0x40
  431            {MMI_DRV_KeyMicDown}, //SYSTEM_KEY_EVENT_KEY_MICDN,    //0x41
  432            {MMI_DRV_KeyMicMuteToggle}, //SYSTEM_KEY_EVENT_KEY_MIC_MUTE_TOGGLE,
  433            {MMI_DRV_KeyMicMuteOn}, //SYSTEM_KEY_EVENT_KEY_MIC_MUTE_ON,
  434            {MMI_DRV_KeyMicMuteOff}, //SYSTEM_KEY_EVENT_KEY_MIC_MUTE_OFF,
  435            {MMI_DRV_KeySCOSwitch}, //SYSTEM_KEY_EVENT_KEY_SCO_SWITCH,
  436            {MMI_DRV_KeyPEQModeChange}, //SYSTEM_KEY_EVENT_KEY_PEQ_MODE_CHANGE
  437            {MMI_DRV_KeyMultiPlayModeToggle},//SYSTEM_KEY_EVENT_KEY_MULTI_A2DP_PLAY_MODE_TOGGLE
  438            {MMI_DRV_KeyCheckStatusOfConnection}, //SYSTEM_KEY_EVENT_KEY_CHECK_STATUS_OF_CONNECTION
  439            {NULL},//SYSTEM_KEY_EVENT_KEY_WHAT_CAN_I_SAY
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 8   

  440            {NULL},//SYSTEM_KEY_EVENT_KEY_VOICE_COMMAND_CANCEL
  441            {NULL},//SYSTEM_KEY_EVENT_KEY_VOICE_MAKE_A_CALL
  442            {NULL},//SYSTEM_KEY_EVENT_KEY_CHECK_STATUS
  443            {NULL},//SYSTEM_KEY_EVENT_KEY_CHANGE_SOUND_EFFECT
  444            {NULL},//SYSTEM_KEY_EVENT_KEY_CONTROL_DBB_ON_OFF
  445            #ifdef SUPPORT_MIC_IN_A2DP_MODE
  446            {MMI_DRV_ControlMicInA2DPMode}, //SYSTEM_KEY_CONTROL_MIC_A2DP_MODE
  447            #else
                 {NULL},//SYSTEM_KEY_CONTROL_MIC_A2DP_MODE
                 #endif
  450            {MMI_DRV_EnableDUTModeCMD}, //SYSTEM_KEY_ENABLE_DUT_MODE_COMMAND
  451            {MMI_DRV_KeyMicEnableL}, //SYSTEM_KEY_EVENT_KEY_MIC_L_ENABLE
  452            {MMI_DRV_KeyMicEnableR}, //SYSTEM_KEY_EVENT_KEY_MIC_R_ENABLE
  453            {MMI_DRV_KeyMicToSpkEnable}, //SYSTEM_KEY_EVENT_KEY_MIC_TO_SPK_ENABLE
  454            {MMI_DRV_KeyMicToSpkDisable}, //SYSTEM_KEY_EVENT_KEY_MIC_TO_SPK_DISABLE
  455            {MMI_DRV_KeyEnableECNR}, //SYSTEM_KEY_EVENT_KEY_ENABLE_EC_NR
  456            {MMI_DRV_KeyDisableECNR}, //SYSTEM_KEY_EVENT_KEY_DISABLE_EC_NR
  457            {MMI_DRV_Key2KToneEnable}, //SYSTEM_KEY_EVENT_KEY_2K_TONE_ENABLE
  458            {MMI_DRV_Key2KToneDisable}, //SYSTEM_KEY_EVENT_KEY_2K_TONE_DISABLE
  459            {MMI_DRV_KeySwitchStereoMono}, //SYSTEM_KEY_EVENT_KEY_SWITCH_STEREO_MONO
  460            #ifdef SUPPORT_MIC_IN_A2DP_MODE
  461            {MMI_DRV_KeyAudioTransparency}, //SYSTEM_KEY_EVENT_KEY_AUDIO_TRANSPARENCY
  462            #else
                 {NULL},//SYSTEM_KEY_EVENT_KEY_AUDIO_TRANSPARENCY
                 #endif
  465            {MMI_DRV_KeyRoleChange}, //SYSTEM_KEY_EVENT_KEY_ROLE_CHANGE
  466          };
  467          
  468          static MMI_KEY_CHECK CODE MMI_DRV_KeyCheckValidHandler[SYSTEM_KEY_EVENT_NO] =
  469          {
  470            {MMI_DRV_CheckKeyReconnect}, //SYSTEM_KEY_EVENT_KEY_RECONNECT_USER_INIT
  471            {MMI_DRV_CheckKeyDiscoverable}, //SYSTEM_KEY_EVENT_KEY_DISCOVERABLE,
  472            {NULL}, //SYSTEM_KEY_EVENT_KEY_NONDISCOVERABLE,
  473            {NULL}, //SYSTEM_KEY_EVENT_KEY_CONNECTED_TO_DISCOVERABLE,
  474            {NULL}, //SYSTEM_KEY_EVENT_KEY_CONNECTED_TO_CONNECTABLE,   //0x05
  475            {NULL}, //SYSTEM_KEY_EVENT_KEY_NFC_DISCOVREABLE,
  476            {NULL}, //SYSTEM_KEY_EVENT_KEY_CONFIRMATION_ACCEPT,
  477            {NULL}, //SYSTEM_KEY_EVENT_KEY_CONFIRMATION_REJECT,
  478            {NULL}, //SYSTEM_KEY_EVENT_KEY_DEBUG_KEY_TOGGLE,
  479            {MMI_DRV_CheckKeyVoiceDown}, //SYSTEM_KEY_EVENT_KEY_VOICEUP,    //0x0a
  480            {MMI_DRV_CheckKeyVoiceDown}, //SYSTEM_KEY_EVENT_KEY_VOICEDN,
  481            {NULL}, //SYSTEM_KEY_EVENT_KEY_CHECK_BATTERY_STATUS,
  482            {NULL}, //SYSTEM_KEY_EVENT_KEY_BUZZER_MUTE_TOGGLE,
  483            {NULL}, //SYSTEM_KEY_EVENT_KEY_TOGGLE_VOLUME,
  484            {NULL}, //SYSTEM_KEY_EVENT_KEY_VOLUME_ORIENTATION_NORMAL,    //0x0F
  485            {NULL}, //SYSTEM_KEY_EVENT_KEY_VOLUME_ORIENTATION_INVERT,   //0x10
  486            {NULL}, //SYSTEM_KEY_EVENT_KEY_TOGGLE_LED,
  487            {NULL}, //SYSTEM_KEY_EVENT_KEY_ENABLE_LED,
  488            {NULL}, //SYSTEM_KEY_EVENT_KEY_DISABLE_LED,
  489            {NULL}, //SYSTEM_KEY_EVENT_KEY_CANCEL_LED_INDICATION,
  490            {NULL}, //SYSTEM_KEY_EVENT_KEY_MEDIA_TRIGGER_1, //0x15
  491            {NULL}, //SYSTEM_KEY_EVENT_KEY_MEDIA_TRIGGER_2,
  492            {NULL}, //SYSTEM_KEY_EVENT_KEY_POWER_ON_THEN_ENTERDISCOVERABLE, // For NFC
  493            {NULL}, //SYSTEM_KEY_EVENT_KEY_POWER_ON,
  494            {MMI_DRV_CheckKeyPowerOff}, //SYSTEM_KEY_EVENT_KEY_POWER_OFF,
  495            {NULL}, //SYSTEM_KEY_EVENT_KEY_RESET,   //0x1a
  496            {NULL}, //SYSTEM_KEY_EVENT_KEY_RESET_PAIRED_DEVICES,
  497            {NULL}, //SYSTEM_KEY_EVENT_KEY_MAX_DEVICE_ALLOWED_UP,
  498            {NULL}, //SYSTEM_KEY_EVENT_KEY_MAX_DEVICE_ALLOWED_DOWN,
  499            {NULL}, //SYSTEM_KEY_EVENT_KEY_MAX_DEVICE_ALLOWED_TOGGLE,
  500            {MMI_DRV_CheckKeyReconnect}, //SYSTEM_KEY_EVENT_KEY_RECONNECT_AFTER_POWER_ON,   //0x1F
  501            {MMI_DRV_CheckKeyVoicePrompt}, //SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_TOGGLE,    //0x20
  502            {MMI_DRV_CheckKeyVoicePrompt}, //SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_ENABLE,
  503            {MMI_DRV_CheckKeyVoicePrompt}, //SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_DISABLE,
  504            {MMI_DRV_CheckKeyVoicePrompt}, //SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_LANG_CHANGE,
  505            {MMI_DRV_CheckKeyVoicePrompt}, //SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_LANG_SELECT,
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 9   

  506            {MMI_DRV_CheckKeyVoicePrompt}, //SYSTEM_KEY_EVENT_KEY_VOICE_PROMPT_LANG_CONFIRM,    //0x25
  507            {NULL}, //SYSTEM_KEY_EVENT_KEY_TEST_VOICE_PROMPT_PLAY,
  508            {NULL}, //SYSTEM_KEY_EVENT_KEY_TEST_VOICE_PROMPT_NEXT,
  509            {NULL}, //SYSTEM_KEY_EVENT_KEY_BUTTONLOCKON,
  510            {NULL}, //SYSTEM_KEY_EVENT_KEY_BUTTONLOCKOFF,
  511            {NULL}, //SYSTEM_KEY_EVENT_KEY_BUTTONLOCKTOGGLE,      //0x2a
  512            {MMI_DRV_CheckKeyVoiceCommandEnable}, //SYSTEM_KEY_EVENT_KEY_VOICE_COMMAND_ENABLE,
  513            {NULL}, //SYSTEM_KEY_EVENT_KEY_MICUP,   //0x40
  514            {NULL}, //SYSTEM_KEY_EVENT_KEY_MICDN,    //0x41
  515            {MMI_DRV_CheckKeyMuteOnOff}, //SYSTEM_KEY_EVENT_KEY_MIC_MUTE_TOGGLE,
  516            {MMI_DRV_CheckKeyMuteOnOff}, //SYSTEM_KEY_EVENT_KEY_MIC_MUTE_ON,
  517            {MMI_DRV_CheckKeyMuteOnOff}, //SYSTEM_KEY_EVENT_KEY_MIC_MUTE_OFF,
  518            {MMI_DRV_CheckKeySCOSwitch},  //SYSTEM_KEY_EVENT_KEY_SCO_SWITCH
  519            {NULL}, //SYSTEM_KEY_EVENT_KEY_PEQ_MODE_CHANGE
  520            {MMI_DRV_CheckKeyUnderA2DP}, //SYSTEM_KEY_EVENT_KEY_MULTI_A2DP_PLAY_MODE_TOGGLE
  521            {NULL}, //SYSTEM_KEY_EVENT_KEY_CHECK_STATUS_OF_CONNECTION
  522            {NULL}, //SYSTEM_KEY_EVENT_KEY_WHAT_CAN_I_SAY
  523            {NULL},//SYSTEM_KEY_EVENT_KEY_VOICE_COMMAND_CANCEL
  524            {NULL},//SYSTEM_KEY_EVENT_KEY_VOICE_MAKE_A_CALL
  525            {NULL},//SYSTEM_KEY_EVENT_KEY_CHECK_STATUS
  526            {NULL},//SYSTEM_KEY_EVENT_KEY_CHANGE_SOUND_EFFECT
  527            {NULL},//SYSTEM_KEY_EVENT_KEY_CONTROL_DBB_ON_OFF
  528            {NULL}, //SYSTEM_KEY_CONTROL_MIC_A2DP_MODE
  529            {NULL}, //SYSTEM_KEY_ENABLE_DUT_MODE_COMMAND
  530            {NULL}, //SYSTEM_KEY_EVENT_KEY_MIC_L_ENABLE
  531            {NULL}, //SYSTEM_KEY_EVENT_KEY_MIC_R_ENABLE
  532            {NULL}, //SYSTEM_KEY_EVENT_KEY_MIC_TO_SPK_ENABLE
  533            {NULL}, //SYSTEM_KEY_EVENT_KEY_MIC_TO_SPK_DISABLE
  534            {NULL}, //SYSTEM_KEY_EVENT_KEY_ENABLE_EC_NR
  535            {NULL}, //SYSTEM_KEY_EVENT_KEY_DISABLE_EC_NR
  536            {NULL}, //SYSTEM_KEY_EVENT_KEY_2K_TONE_ENABLE
  537            {NULL}, //SYSTEM_KEY_EVENT_KEY_2K_TONE_DISABLE
  538            {NULL}, //SYSTEM_KEY_EVENT_KEY_SWITCH_STEREO_MONO
  539            {MMI_DRV_CheckKeyAudioTransparency}, //SYSTEM_KEY_EVENT_KEY_AUDIO_TRANSPARENCY
  540            {NULL}, //SYSTEM_KEY_EVENT_KEY_ROLE_CHANGE
  541          };
  542          
  543          PUBLIC void MMI_DRV_Init(void)
  544          {
  545   1        U8 pmu;
  546   1      
  547   1        DRIVER_Key_Update();
  548   1      #if !defined AB1520S && !defined AB1525S && !defined AB1520U
  549   1        DRIVER_LED_MapGpioSetup();
  550   1      #endif
  551   1        MMI_DRV_KeyEvtMapInit();
  552   1        MMI_DRV_ADDAInit();
  553   1        MMI_DRV_AudioSettingsInit();
  554   1        MMI_DRV_ParaInit();
  555   1      #ifdef SUPPORT_VOICE_PROMPT
  556   1        MMI_DRV_LoadVoiceLangCtl(gMMI_driver_variation_nvram.misc_para.init.vpLangIndex);
  557   1      #endif
  558   1        //Record booting Status: mcu_ctrl_reg2[4] : used to enable GPIO interrupt during S_NORMAL
  559   1        OS_ENTER_CRITICAL ();
  560   1        pmu = PMU_SYS_GET_BOOT_SW_STATUS_B1 () | SYS_SW1_CTL_ENABLE_GPIO_INT_FOR_S_NORMAL;
  561   1        PMU_SYS_SET_BOOT_SW_STATUS_B1(pmu);
  562   1        OS_EXIT_CRITICAL ();
  563   1      
  564   1        if(MMI_CC_UART_ENABLE || MMI_SPP_DATA_TO_UART_FEAT)
  565   1        {
  566   2          SetPowerSavingForDevice(FALSE, PWRSAV_BAT);
  567   2          gOS_PowerSavingForceMCUPauseOnly  = TRUE;
  568   2        }
  569   1      }
  570          
  571          PRIVATE void MMI_DRV_ProcessKeyEvent(U8 linkIndex, U8 index)
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 10  

  572          {
  573   1        if(MMI_DRV_KeyEvtHandler[index].fKeyEvt)
  574   1        {
  575   2          MMI_DRV_KeyEvtHandler[index].fKeyEvt(linkIndex);
  576   2        }
  577   1      }
  578          
  579          PRIVATE U16 MMI_DRV_CheckValidKey(U8 index, U16 keyCode)
  580          {
  581   1        if(MMI_DRV_KeyCheckValidHandler[index].fKeyCheckValid)
  582   1        {
  583   2          keyCode = MMI_DRV_KeyCheckValidHandler[index].fKeyCheckValid(keyCode);
  584   2        }
  585   1        return keyCode;
  586   1      }
  587          
  588          extern VFUN XDATA api_iosys_evt_func[API_GRP_IOSYS_CB_CNT];
  589          PRIVATE void MMI_DRV_Key_Event(KeyIndex keyIndex, U8 keyAction)
  590          {
  591   1        MMI_TIMER_ResetAutoSwitchOffTimer();
  592   1      
  593   1        if(api_iosys_evt_func[API_GRP_IOSYS_CB_KEY])
  594   1        {
  595   2          if(((API_IOSYS_KEY_CB_FUNC)api_iosys_evt_func[API_GRP_IOSYS_CB_KEY])((U8)keyIndex, keyAction, gMMI_ctl.
             -serviceInd))
  596   2          {
  597   3            goto KEY_PWRSAVING;
  598   3          }
  599   2        }
  600   1        #ifdef AIR_MODULE
  601   1        if(MMI_AIR_Key_Event(keyIndex, keyAction))
  602   1          goto KEY_PWRSAVING;
  603   1        #endif
  604   1      
  605   1        if(!MMI_DRV_CheckBtnSequence(keyIndex, keyAction)) // if mapping btnSequence, end this switch
  606   1        {
  607   2          MMI_DRV_KeyHandler(MMI_DRV_KeyParser(keyIndex, keyAction, MMI_GetTopStateByLink(gMMI_ctl.serviceInd), T
             -RUE)); //parser keyevent code
  608   2        }
  609   1      
  610   1      
  611   1        KEY_PWRSAVING:
  612   1        if(!MMI_DRV_IsButtonLocked())
  613   1        {
  614   2          SetPowerSavingForDevice(TRUE, PWRSAV_KEY);
  615   2        }
  616   1      }
  617          
  618          PRIVATE void MMI_DRV_MuteReminder_Event(void)
  619          {
  620   1        if(MMI_AllLinksInCallActiveState())
  621   1        {
  622   2          MMI_PushMediaEvent(MEDIA_EVT_MUTE_REMINDER);
  623   2        }
  624   1      }
  625          
  626          PRIVATE void MMI_DRV_ReadyPowerOff_Event(void)
  627          {
  628   1        //1) User powers off complete(User released key, ringtone played finish)
  629   1        MMI_SECTOR_SaveData(SAVE_DATA_TYPE_POWER_OFF);
  630   1      
  631   1        if(MMI_DRV_IsReset())
  632   1        {
  633   2          MMI_Reset();
  634   2        }
  635   1        else
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 11  

  636   1        {
  637   2          MMI_SystemOff();
  638   2        }
  639   1      }
  640          
  641          PRIVATE void MMI_DRV_FGLedEnd_Event(U16 id)
  642          {
  643   1        MMI_PushMediaEvent(MEDIA_EVT_FG_LED_DISPLAY_OVER);
  644   1        MMI_DRV_CheckResetPairedDevice(id);
  645   1      }
  646          
  647          PRIVATE void MMI_DRV_RingtoneEnd_Event(U16 id)
  648          {
  649   1        UNUSED(id);
  650   1      }
  651          
  652          #ifdef SUPPORT_VOICE_PROMPT
  653          PRIVATE void MMI_DRV_VoicePromptEnd_Event(U16 id)
  654          {
  655   1        UNUSED(id);
  656   1        /*
  657   1        if (id == MEDIA_EVT_KEY_TEST_VOICE_PROMPT_PLAY || id == MEDIA_EVT_KEY_TEST_VOICE_PROMPT_NEXT)
  658   1        {
  659   1          MMI_PushMediaEvent(MEDIA_EVT_KEY_TEST_VOICE_PROMPT_NEXT);
  660   1        }*/
  661   1      }
  662          #endif
  663          
  664          #ifdef SUPPORT_VOICE_COMMAND
  665          PRIVATE void MMI_DRV_VoiceCommand_ResultProcessed(U16 keyEventCode)
  666          {
  667   1        #ifdef VC_MULTI_LAYER
                 U8 vcMultiLayerEvt0, vcMultiLayerEvt1, vcMultiLayerEvt2;
               
                 vcMultiLayerEvt0=VoiceCommand_MultiLayerRootEvt(VC_MULTI_LAYER_SET_0);
                 vcMultiLayerEvt1=VoiceCommand_MultiLayerRootEvt(VC_MULTI_LAYER_SET_1);
                 vcMultiLayerEvt2=VoiceCommand_MultiLayerRootEvt(VC_MULTI_LAYER_SET_2);
               
                 if (keyEventCode ==vcMultiLayerEvt1 ||keyEventCode ==  vcMultiLayerEvt2 || keyEventCode == vcMultiLayerE
             -vt0 )
                 {
                   MMI_PushMediaEvent(keyEventCode);
                   MMI_PushMediaEvent(MEDIA_EVT_VOICE_COMMAND_MULTILAYER_TRIGGER);
                 }
                 else
                 {
                   MMI_PushMediaEvent(keyEventCode);
                   MMI_DRV_KeyEventHandler(gMMI_ctl.serviceInd, (U8)keyEventCode);
                 }
                 #else
  685   1      
  686   1        U8 vcMultiLayerEvt0;
  687   1        vcMultiLayerEvt0=VoiceCommand_MultiLayerRootEvt(VC_MULTI_LAYER_SET_0);
  688   1        if (keyEventCode == vcMultiLayerEvt0)
  689   1        {
  690   2          MMI_PushMediaEvent(keyEventCode);
  691   2          MMI_PushMediaEvent(MEDIA_EVT_VOICE_COMMAND_MULTILAYER_TRIGGER);
  692   2        }
  693   1        else
  694   1        {
  695   2          MMI_PushMediaEvent(keyEventCode);
  696   2          MMI_DRV_KeyEventHandler(gMMI_ctl.serviceInd, (U8)keyEventCode);
  697   2        }
  698   1        #endif
  699   1      }
  700          
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 12  

  701          PRIVATE BOOL MMI_DRV_IsVoiceCommandCarry(U16 keyEventCode)
  702          {
  703   1        if(keyEventCode == KEY_VOICE_MAKE_A_CALL || keyEventCode == KEY_CHECK_STATUS)
  704   1        {
  705   2          return FALSE;
  706   2        }
  707   1        else
  708   1          return TRUE;
  709   1      }
  710          
  711          PRIVATE void MMI_DRV_VoiceCommandEnd_Event(U8 id, U8 matchedNo, U8 stoppedByUser)
  712          {
  713   1        U8 i;
  714   1        U16 keyEventCode;
  715   1        gMMI_ctl.msgHandled = PROCD_RELEASE;
  716   1      
  717   1        LightDbgPrint("MMI - [VCStop]Result:%d,%d", (U8)matchedNo, (U8)stoppedByUser);
  718   1      
  719   1        if(!stoppedByUser)
  720   1        {
  721   2          if(gVC_ctl.vcIdentificationMode == APD_VC_IDENTIFY)
  722   2          {
  723   3            for(i = 0; i < TOTAL_APD_VOICE_COMMAND_EVENTS; i++)
  724   3            {
  725   4              if(((DRIVER_VOICE_COMMAND_APD_DATA_TYPE CODE_PTR)GET_SECTOR_BOUNDARY_ADDR(SECTOR_VOICE_COMMAND_APD_DA
             -TA))->vcEventTable[i].mediaEvent == id)
  726   4              {
  727   5                break;
  728   5              }
  729   4            }
  730   3          }
  731   2          else
  732   2          {
  733   3            for(i = 0; i < TOTAL_VOICE_COMMAND_EVENTS; i++)
  734   3            {
  735   4              if(((DRIVER_VOICE_COMMAND_DATA_TYPE CODE_PTR)GET_SECTOR_VOICE_DATA_ADDR(SECTOR_VOICE_COMMAND_DATA))->
             -vcEventTable[i].mediaEvent == id)
  736   4              {
  737   5                break;
  738   5              }
  739   4            }
  740   3          }
  741   2      
  742   2          if(matchedNo !=  MMI_EOF)
  743   2          {
  744   3            if(gVC_ctl.vcIdentificationMode == APD_VC_IDENTIFY)
  745   3            {
  746   4              keyEventCode = MMI_DRV_CheckKeyValid(MMI_DRV_LookUpKeyMapTable((VoiceCommand_GetAPDActionTable(((DRIV
             -ER_VOICE_COMMAND_APD_DATA_TYPE CODE_PTR)GET_SECTOR_BOUNDARY_ADDR(SECTOR_VOICE_COMMAND_APD_DATA))->vcEventTable[i].action
             -Index))->triggeredAction[matchedNo]));
  747   4              if (keyEventCode != KEY_INVALID)
  748   4              {
  749   5                //pass key event to msg handler of each mmi state. * only top state has the ctrl right of key event
  750   5                if(MMI_DRV_IsVoiceCommandCarry(keyEventCode))
  751   5                {
  752   6                  MMI_PushMediaEvent(keyEventCode);
  753   6                  MMI_DRV_KeyEventHandler(gMMI_ctl.serviceInd, (U8)keyEventCode);
  754   6                }
  755   5              }
  756   4            }
  757   3            else
  758   3            {
  759   4              keyEventCode = MMI_DRV_CheckKeyValid(MMI_DRV_LookUpKeyMapTable((VoiceCommand_GetActionTable(((DRIVER_
             -VOICE_COMMAND_DATA_TYPE CODE_PTR)GET_SECTOR_VOICE_DATA_ADDR(SECTOR_VOICE_COMMAND_DATA))->vcEventTable[i].actionIndex))->
             -triggeredAction[matchedNo]));
  760   4              if (keyEventCode != KEY_INVALID)
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 13  

  761   4              {
  762   5                //pass key event to msg handler of each mmi state. * only top state has the ctrl right of key event
  763   5                  if(MMI_DRV_IsVoiceCommandCarry(keyEventCode))
  764   5                  {
  765   6                    MMI_DRV_VoiceCommand_ResultProcessed(keyEventCode);
  766   6                  }
  767   5              }
  768   4            }
  769   3            LightDbgPrint("keyEvent code %d", (U8)keyEventCode);
  770   3            return;
  771   3          }
  772   2      
  773   2          if(!MMI_AllLinksInCallActiveState())
  774   2          {
  775   3            MMI_PushMediaEvent(MEDIA_EVT_VOICE_COMMAND_FAIL);
  776   3          }
  777   2          if(((DRIVER_VOICE_COMMAND_DATA_TYPE CODE_PTR)GET_SECTOR_VOICE_DATA_ADDR(SECTOR_VOICE_COMMAND_DATA))->vc
             -EventTable[i].continueTriggered)
  778   2          {
  779   3            if((0x1L << MMI_GetTopStateByLink(gMMI_ctl.serviceInd))&(((DRIVER_VOICE_COMMAND_DATA_TYPE CODE_PTR)GET
             -_SECTOR_VOICE_DATA_ADDR(SECTOR_VOICE_COMMAND_DATA))->vcEventTable[i].triggeredState))
  780   3            {
  781   4              //MMI_PushMediaEvent(id);
  782   4            }
  783   3          }
  784   2        }
  785   1      }
  786          #endif
  787          
  788          PRIVATE void MMI_DRV_FakeMedia_Event(MMIMsgType XDATA_PTR msgPtr)
  789          {
  790   1        U16 id = msgPtr->msgBodyPtr.driverEvt.fakeMediaEvt.id;
  791   1      
  792   1        #ifdef AIRAPP_Profile
  793   1        AirApp_FakeMedia_Event(id);
  794   1        #endif
  795   1      
  796   1        #ifdef AIR_MODULE
  797   1        MMI_AIR_FakeMediaEvt(id);
  798   1        #endif
  799   1      
  800   1        #ifdef HFP_Profile
  801   1        MMI_HFP_FakeMediaEvt(id);
  802   1        #endif
  803   1      
  804   1        gMMI_ctl.msgHandled = PROCD_RELEASE;
  805   1      
  806   1        #ifdef SUPPORT_VOICE_COMMAND
  807   1        if (id ==MEDIA_EVT_KEY_WHAT_CAN_I_SAY)
  808   1        {
  809   2          MMI_DRV_SendVoiceCommandCmd(MEDIA_EVT_KEY_VOICE_COMMAND_ENABLE);
  810   2        }
  811   1        #endif
  812   1      
  813   1        MMI_DRV_CheckResetPairedDevice(id);
  814   1      
  815   1        if( id == MEDIA_EVT_KEY_MIC_MUTE_ON || id == MEDIA_EVT_KEY_MIC_MUTE_OFF)
  816   1        {
  817   2          MMI_DRV_MicMuteHandler(gMMI_ctl.serviceInd, (id == MEDIA_EVT_KEY_MIC_MUTE_ON) ? SET_MUTE_ON : SET_MUTE_
             -OFF);
  818   2        }
  819   1        else if(id == MEDIA_EVT_KEY_CONTROL_DBB_ON_OFF)
  820   1        {
  821   2          MMI_DRV_KeyControlDBBOnOff(gMMI_ctl.serviceInd);
  822   2        }
  823   1        else if(id == MEDIA_EVT_KEY_CHANGE_SOUND_EFFECT)
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 14  

  824   1        {
  825   2          MMI_DRV_KeyChangeSoundEffect(gMMI_ctl.serviceInd);
  826   2        }
  827   1      
  828   1        gMMI_ctl.msgHandled = NOTPROCD;
  829   1        MMI_STATE_PassThruMsg(gMMI_ctl.serviceInd, msgPtr);
  830   1      
  831   1        if (gMMI_ctl.msgHandled != PROCD_TRANSIT)
  832   1        {
  833   2          OSMEM_Put ((U8 XDATA_PTR)msgPtr);
  834   2        }
  835   1      }
  836          
  837          PRIVATE void MMI_DRV_A2DPStartAnchor_Event(void)
  838          {
  839   1        #ifdef A2DP_Profile
  840   1        //MMI_A2DP_SendDriverVolCmd(CURRENT_A2DP_SOUND_LEVEL(gMMI_ctl.serviceInd), CURRENT_A2DP_SMALL_STEP(gMMI_
             -ctl.serviceInd));
  841   1        #endif
  842   1      }
  843          
  844          PRIVATE void MMI_DRV_DSPA2DPEnabled_Event(U8 linkIndex)
  845          {
  846   1      #ifdef A2DP_Profile
  847   1        MMI_A2DP_NotifyDSPStatus(TRUE, linkIndex);
  848   1      #else
                 UNUSED(linkIndex);
               #endif
  851   1      }
  852          
  853          PRIVATE void MMI_DRV_DSPA2DPDisabled_Event(U8 linkIndex)
  854          {
  855   1      #ifdef A2DP_Profile
  856   1        MMI_A2DP_NotifyDSPStatus(FALSE, linkIndex);
  857   1      #else
                 UNUSED(linkIndex);
               #endif
  860   1      }
  861          
  862          PRIVATE void MMI_DRV_SetAudioSCOLink(BOOL isEnable, U8 linkIndex)
  863          {
  864   1        if(isEnable)
  865   1        {
  866   2          gMMI_ctl.audioableSCOLink = linkIndex;
  867   2          MMI_DRV_SetSwitchingSCO(FALSE);
  868   2        }
  869   1        else
  870   1        {
  871   2          gMMI_ctl.audioableSCOLink = MMI_EOF;
  872   2        }
  873   1      }
  874          
  875          PRIVATE void MMI_DRV_DSPSCOEnabled_Event(U8 linkIndex, BOOL isLightMono)
  876          {
  877   1        #ifdef AIR_MODULE
  878   1        if(!MMI_AIR_DSPSCOEnabled_Event(linkIndex, isLightMono))
  879   1        #else
                 UNUSED(isLightMono);
                 #endif
  882   1        {
  883   2          DriverVolumeSetCmd LDATA volPAra;
  884   2          MMI_DRV_SetSCODriverVolPara(CURRENT_SCO_SOUND_LEVEL(linkIndex), GET_SCO_MIC_GAIN_BY_LEVEL(CURRENT_SCO_S
             -OUND_LEVEL(linkIndex)), CURRENT_SCO_SMALL_STEP(linkIndex),
  885   2                        (gMMI_ctl.mmiInfo[linkIndex].linkPara.scoCodecType == SCO_CODEC_MSBC) ? TRUE : FALSE, &volPAra);
  886   2          DRIVER_SetNormalVolPara(&volPAra);
  887   2        }
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 15  

  888   1        MMI_DRV_SetAudioSCOLink(TRUE, linkIndex);
  889   1        #ifdef AUDIO_BIST
  890   1        MMI_DRV_AudioBistSetTimer();
  891   1        #endif
  892   1      }
  893          
  894          PRIVATE void MMI_DRV_DSPSCODisabled_Event(U8 linkIndex)
  895          {
  896   1        MMI_DRV_SetAudioSCOLink(FALSE, linkIndex);
  897   1        #ifdef AUDIO_BIST
  898   1        MMI_DRV_AudioBistSetResult(ENDIAN_TRANSFORM_U16(gAlignDSP.IC_BIST_SNR_RESULT), ENDIAN_TRANSFORM_U16(gAli
             -gnDSP.IC_BIST_SNDR_RESULT));//[bbbist]
  899   1        #endif
  900   1      
  901   1        #ifdef AIR_MODULE
  902   1        MMI_AIR_DSPSCODisabled_Event(linkIndex);
  903   1        #endif
  904   1      }
  905          
  906          PRIVATE void MMI_DRV_DSPLineInEnabled_Event(void)
  907          {
  908   1        #ifdef LINEIN_ENABLE
  909   1        MMI_LineIn_NotifyDSPStatus(TRUE);
  910   1        #endif
  911   1        #ifdef AIR_MODULE
  912   1        MMI_AIR_LineInEnableNotify();
  913   1        #endif
  914   1        #ifdef AUDIO_BIST
  915   1        MMI_DRV_AudioBistSetTimer();
  916   1        #endif
  917   1        #ifdef A2DP_SRC_Profile
                 MMI_A2DP_LineInEnableNotify();
                 #endif
  920   1      }
  921          
  922          PRIVATE void MMI_DRV_DSPLineInDisabled_Event(void)
  923          {
  924   1        #ifdef LINEIN_ENABLE
  925   1        MMI_LineIn_NotifyDSPStatus(FALSE);
  926   1        MMI_LineIn_MuteControl(FALSE);
  927   1        #endif
  928   1        #ifdef AIR_MODULE
  929   1        MMI_AIR_LineInDisableNotify();
  930   1        #endif
  931   1        #ifdef AUDIO_BIST
  932   1          #ifndef FT_AUDIO_BIST
  933   1          MMI_DRV_AudioBistSetResult(ENDIAN_TRANSFORM_U16(gAlignDSP.IC_BIST_SNR_RESULT), ENDIAN_TRANSFORM_U16(gAl
             -ignDSP.IC_BIST_SNDR_RESULT));
  934   1          #endif
  935   1        #endif
  936   1      }
  937          
  938          PRIVATE void MMI_DRV_RequestCloseFM_Event(void)
  939          {
  940   1        #ifdef FM_ENABLE
  941   1          MMI_FM_DriverCmd(DRIVER_FM_POWEROFF_CMD);
  942   1        #endif
  943   1      }
  944          
  945          PRIVATE void MMI_DRV_ATSwitch_Event(void)
  946          {
  947   1        #ifdef AIR_MODULE
  948   1        U8 airlink;
  949   1        if((airlink = MMI_AIR_GetAirLink(PRODUCT_AIR_TWS)) != MMI_EOF)
  950   1        {
  951   2          if(A2DP_IsLinkRelayer(airlink))
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 16  

  952   2          {
  953   3            MMI_AVRCP_SendVendorUnique(airlink, AVRCP_VENDOR_UNIQ_SYNC_AND_SWITCH_AUDIO_TRANSPARENCY, TRUE);
  954   3          }
  955   2        }
  956   1        #endif
  957   1      }
  958          
  959          PRIVATE void MMI_DRV_AsyncSCOEnabled_Event(U8 linkIndex)
  960          {
  961   1        DriverVolumeSetCmd LDATA volPAra;
  962   1        MMI_DRV_SetSCODriverVolPara(CURRENT_SCO_SOUND_LEVEL(linkIndex), GET_SCO_MIC_GAIN_BY_LEVEL(CURRENT_SCO_SO
             -UND_LEVEL(linkIndex)), CURRENT_SCO_SMALL_STEP(linkIndex),
  963   1                      (gMMI_ctl.mmiInfo[linkIndex].linkPara.scoCodecType == SCO_CODEC_MSBC) ? TRUE : FALSE, &volPAra);
  964   1        DRIVER_SetNormalVolPara(&volPAra);
  965   1      
  966   1        gMMI_ctl.driverCtl.isAsyncSCOOn = TRUE;
  967   1      }
  968          
  969          PRIVATE void MMI_DRV_AsyncSCODisabled_Event(U8 linkIndex)
  970          {
  971   1        UNUSED(linkIndex);
  972   1        gMMI_ctl.driverCtl.isAsyncSCOOn = FALSE;
  973   1      }
  974          
  975          MMI_DRV_HANDLE_TYPE CODE gMMI_Drv_Handler =
  976          {
  977            MMI_DRV_Key_Event,        //fDriverKeyEvent,
  978            MMI_DRV_MuteReminder_Event,   //fDriverMuteReminderEvent,
  979            MMI_DRV_ReadyPowerOff_Event,  //fDriverReadyPowerOffEvent,
  980            MMI_DRV_FGLedEnd_Event,     //fDriverFGLedEndEvent,
  981            MMI_DRV_RingtoneEnd_Event,    //fDriverRingtoneEndEvent,
  982          #ifdef SUPPORT_VOICE_PROMPT
  983            MMI_DRV_VoicePromptEnd_Event, //fDriverVoicePromptEndEvent,
  984          #endif
  985          #ifdef SUPPORT_VOICE_COMMAND
  986            MMI_DRV_VoiceCommandEnd_Event,  //fDriverVoiceCmdEndEvent,
  987          #endif
  988            MMI_DRV_FakeMedia_Event,    //fDriverFakeMediaEvent,
  989            MMI_DRV_A2DPStartAnchor_Event,  //fDriverA2DPStartAnchorEvent,
  990            MMI_DRV_DSPA2DPEnabled_Event, //fDriverDSPA2DPEnabledEvent,
  991            MMI_DRV_DSPA2DPDisabled_Event,  //fDriverDSPA2DPDisabledEvent,
  992            MMI_DRV_DSPSCOEnabled_Event,  //fDriverDSPSCOEnabledEvent,
  993            MMI_DRV_DSPSCODisabled_Event, //fDriverDSPSCODisabledEvent,
  994            MMI_DRV_DSPLineInEnabled_Event, //fDriverDSPLineInEnabledEvent,
  995            MMI_DRV_DSPLineInDisabled_Event,//fDriverDSPLineInDisabledEvent,
  996            MMI_DRV_RequestCloseFM_Event, //fDriverReqCloseFMEvent,
  997            MMI_DRV_ATSwitch_Event,     //fDriverATSwitchEvent,
  998            MMI_DRV_AsyncSCOEnabled_Event,  //fDriverAsyncSCOEnabledEvent,
  999            MMI_DRV_AsyncSCODisabled_Event, //fDriverAsyncSCODisabledEvent,
 1000          };
 1001          
 1002          PUBLIC void MMI_DRV_EventHandler(void)
 1003          {
 1004   1        MMIMsgType XDATA_PTR msgPtr;
 1005   1      
 1006   1        if ((msgPtr = (MMIMsgType XDATA_PTR)OSMQ_Get (OSMQ_MMI_Internal_ptr)) != (MMIMsgType XDATA_PTR)NULL)
 1007   1        {
 1008   2          gMMI_ctl.msgHandled = NOTPROCD;
 1009   2      
 1010   2          if(msgPtr->eventCode == MMI_RESET_PAIRED_DEVICE_CMD)
 1011   2          {
 1012   3            if(CURRENT_ACTIVE_LINK_CNT)
 1013   3            {
 1014   4              gMMI_ctl.msgHandled = PROCD_TRANSIT;
 1015   4              OSMQ_Put(OSMQ_MMI_Internal_ptr, (U8 XDATA_PTR)msgPtr);
 1016   4            }
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 17  

 1017   3            else
 1018   3            {
 1019   4              if(!gMMI_ctl.driverCtl.resetPairedDeviceMediaCount)
 1020   4              {
 1021   5                MMI_SECTOR_ResetPairedDevices();
 1022   5              }
 1023   4            }
 1024   3          }
 1025   2          else
 1026   2          {
 1027   3            MMI_STATE_PassThruMsg(gMMI_ctl.serviceInd, msgPtr);
 1028   3          }
 1029   2      
 1030   2          if (gMMI_ctl.msgHandled != PROCD_TRANSIT)
 1031   2          {
 1032   3            OSMEM_Put ((U8 XDATA_PTR)msgPtr);
 1033   3          }
 1034   2        }
 1035   1      
 1036   1      #ifdef AUDIO_BIST
 1037   1        MMI_DRV_AudioBistCheckTimer();
 1038   1        #ifdef FT_AUDIO_BIST
                 MMI_DRV_AudioFTBIST();
                 #endif
 1041   1      #endif
 1042   1      }
 1043          
 1044          ////////////////////////////////////////////////////////////////////////////////
 1045          ////////////////////////////  KEY  /////////////////////////////////////////////
 1046          ////////////////////////////////////////////////////////////////////////////////
 1047          PUBLIC U8 MMI_DRV_GetKeyEventGroup(U16 keyCode)
 1048          {
 1049   1        if(keyCode < KEY_SECOND_TABLE_START_INDEX)
 1050   1          return keyEventMap[keyCode].group;
 1051   1        else
 1052   1          return keyEventMap2[keyCode-KEY_SECOND_TABLE_START_INDEX].group;
 1053   1      }
 1054          
 1055          PUBLIC U8 MMI_DRV_GetKeyEventIndex(U16 keyCode)
 1056          {
 1057   1        if(keyCode < KEY_SECOND_TABLE_START_INDEX)
 1058   1          return keyEventMap[keyCode].index;
 1059   1        else
 1060   1          return keyEventMap2[keyCode-KEY_SECOND_TABLE_START_INDEX].index;
 1061   1      }
 1062          
 1063          PUBLIC void MMI_DRV_KeyEventHandler(U8 linkIndex, U16 keyCode)
 1064          {
 1065   1        U8 index;
 1066   1      
 1067   1        if(keyCode < KEY_SECOND_TABLE_START_INDEX)
 1068   1          LightDbgPrintWithOpcode((U8)HCI_VEVT_OCF_MMI_DBGPRINT_KEYCODE_NEW, (U8)HCI_VENDOR_OGF_UART_MMI_DBGPRINT
             -, (U8)OCF_DBGPRINT_U8, (U8)keyCode);
 1069   1        else
 1070   1          LightDbgPrintWithOpcode((U8)HCI_VEVT_OCF_MMI_DBGPRINT_KEYCODE_NEW, (U8)HCI_VENDOR_OGF_UART_MMI_DBGPRINT
             -, (U8)OCF_DBFPRINT_U16, (U16)keyCode);
 1071   1      
 1072   1      
 1073   1        index = MMI_DRV_GetKeyEventIndex(keyCode);
 1074   1        switch(MMI_DRV_GetKeyEventGroup(keyCode))
 1075   1        {
 1076   2          case SYSTEM_KEY_EVENT:
 1077   2            MMI_DRV_ProcessKeyEvent(linkIndex, index);
 1078   2            break;
 1079   2          case AIR_KEY_EVENT:
 1080   2            #ifdef AIR_MODULE
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 18  

 1081   2            MMI_AIR_ProcessKeyEvent(linkIndex, index);
 1082   2            #endif
 1083   2            break;
 1084   2          case HFP_KEY_EVENT:
 1085   2            #ifdef HFP_Profile
 1086   2            MMI_HFP_ProcessKeyEvent(linkIndex, index);
 1087   2            #endif
 1088   2            break;
 1089   2          case AVRCP_KEY_EVENT:
 1090   2            #ifdef AVRCP_Profile
 1091   2            MMI_AVRCP_ProcessKeyEvent(linkIndex, index);
 1092   2            #endif
 1093   2            break;
 1094   2          case FM_KEY_EVENT:
 1095   2            #ifdef FM_ENABLE
 1096   2            MMI_FM_ProcessKeyEvent(linkIndex, index);
 1097   2            #endif
 1098   2            break;
 1099   2          case LINE_IN_KEY_EVENT:
 1100   2            #ifdef LINEIN_ENABLE
 1101   2            MMI_LineIn_ProcessKeyEvent(linkIndex, index);
 1102   2            #endif
 1103   2            break;
 1104   2          case TESTMODE_KEY_EVENT:
 1105   2            MMI_TestMode_ProcessKeyEvent(linkIndex, index);
 1106   2            break;
 1107   2          #ifdef HID_Profile
                   case HID_KEY_EVENT:
                     MMI_HID_ProcessKeyEvent(linkIndex, index);
                     break;
                   #endif
 1112   2        }
 1113   1      }
 1114          
 1115          
 1116          PUBLIC void MMI_DRV_KeyHandler(U16 keyEventCode)
 1117          {
 1118   1        if ( keyEventCode >= KEY_TOTAL_NO && keyEventCode < KEY_SECOND_TABLE_START_INDEX )
 1119   1        {
 1120   2          return;
 1121   2        }
 1122   1      
 1123   1        if (((keyEventCode != KEY_BUTTONLOCKTOGGLE) && MMI_DRV_IsButtonLocked())
 1124   1           || !MMI_DRV_IsButtonLocked() && MMI_IGNORE_KEYEVENT_JUST_ENABLE_LED_FEAT)
 1125   1        {
 1126   2          LightDbgPrint("key handler lock %X", (U32)keyEventCode);
 1127   2          return;
 1128   2        }
 1129   1      
 1130   1        keyEventCode = MMI_DRV_CheckKeyValid(keyEventCode);
 1131   1      
 1132   1        if (keyEventCode != KEY_INVALID)
 1133   1        {
 1134   2          if(keyEventCode != KEY_CNLOUTGOING)
 1135   2            MMI_PushMediaEvent(keyEventCode);
 1136   2      
 1137   2          MMI_DRV_KeyEventHandler(gMMI_ctl.serviceInd, keyEventCode);
 1138   2        }
 1139   1      }
 1140          
 1141          //////////////////////////////////////////////////////////////////////////////
 1142          //////////////////// Voice Prompt ////////////////////////////////////////////
 1143          //////////////////////////////////////////////////////////////////////////////
 1144          
 1145          PUBLIC void MMI_DRV_LoadVoiceLangCtl(U8 vpLangIndex)
 1146          {
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 19  

 1147   1      #ifdef SUPPORT_VOICE_PROMPT
 1148   1        DRIVER_LoadLanguageCtlFromROM(vpLangIndex);
 1149   1      #else
                 UNUSED(vpLangIndex);
               #endif
 1152   1      }
 1153          
 1154          #ifdef SUPPORT_VOICE_PROMPT
 1155          PUBLIC void MMI_DRV_ChangeVoicePromptLangCandidate(void)
 1156          {
 1157   1        SYS_SetTimer(&gMMI_ctl.vpRuntime.vpSelectTimerPtr, gMMI_nvram.vpConfig.LangSelectTime * 320L);
 1158   1      
 1159   1        MMI_DRV_LoadVoiceLangCtl(gMMI_ctl.vpRuntime.vpSelectIndex);
 1160   1        MMI_PushMediaEvent(MEDIA_EVT_VOICE_PROMPT_LANG_SELECT);
 1161   1      }
 1162          
 1163          PRIVATE void MMI_TestVoicePrompt_CallNumber(void)
 1164          {
 1165   1        MMIMsgType XDATA_PTR msgPtr;
 1166   1        U8 i;
 1167   1      
 1168   1        if ((msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_VOICEPROMPT_CMD)) == (MMIMsgType XDATA_PTR)NULL)
 1169   1          return;
 1170   1      
 1171   1        msgPtr->msgBodyPtr.driverCmd.voicePromptCmd.id = MEDIA_EVT_ENTER_INCOMING;
 1172   1        msgPtr->msgBodyPtr.driverCmd.voicePromptCmd.vpIndex = VP_EVT_CALLER_ID;
 1173   1      
 1174   1        msgPtr->msgBodyPtr.driverCmd.voicePromptCmd.vpData.callerIDData.callerIdLength = 10;
 1175   1      
 1176   1        for (i = 0; i < 10; i++)
 1177   1        {
 1178   2          msgPtr->msgBodyPtr.driverCmd.voicePromptCmd.vpData.callerIDData.callerID[i] = i;
 1179   2        }
 1180   1      
 1181   1        OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 1182   1      }
 1183          #endif
 1184          
 1185          PUBLIC void MMI_DRV_SendVoicepromptStopCmd(void)
 1186          {
 1187   1        MMIMsgType XDATA_PTR msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_STOP_VP_CMD);
 1188   1      
 1189   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 1190   1        {
 1191   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 1192   2        }
 1193   1      }
 1194          
 1195          PUBLIC void MMI_DRV_SpecificEventVPStopCmd(U16 id)
 1196          {
 1197   1        DRIVER_SendStopSpecificVPCmd(id);
 1198   1      }
 1199          
 1200          PUBLIC void MMI_DRV_SendVoicePromptCmd(U16 mediaEventIndex, U8 voicePromptIndex)
 1201          {
 1202   1        MMIMsgType XDATA_PTR msgPtr;
 1203   1      
 1204   1        if (!MMI_PlayVoicePromptIsAvailable(mediaEventIndex))
 1205   1          return;
 1206   1      
 1207   1        msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_VOICEPROMPT_CMD);
 1208   1      
 1209   1        if (msgPtr == (MMIMsgType XDATA_PTR)NULL)
 1210   1          return;
 1211   1      
 1212   1        msgPtr->msgBodyPtr.driverCmd.voicePromptCmd.id = mediaEventIndex;
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 20  

 1213   1        msgPtr->msgBodyPtr.driverCmd.voicePromptCmd.vpIndex = voicePromptIndex;
 1214   1        OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 1215   1      }
 1216          
 1217          
 1218          //////////////////////////////////////////////////////////////////////////////
 1219          //////////////////// Ring tone ////////////////////////////////////////////
 1220          //////////////////////////////////////////////////////////////////////////////
 1221          PUBLIC void MMI_DRV_SendRingtoneCmd(U16 mediaEventIndex, U8 beepPattern)
 1222          {
 1223   1        MMIMsgType XDATA_PTR msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_RINGTONE_CMD);
 1224   1      
 1225   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 1226   1        {
 1227   2          msgPtr->msgBodyPtr.driverCmd.ringtoneCmd.beepIndex = beepPattern;
 1228   2          msgPtr->msgBodyPtr.driverCmd.ringtoneCmd.id = mediaEventIndex;
 1229   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 1230   2        }
 1231   1      }
 1232          
 1233          PUBLIC void MMI_DRV_SendRingtoneStopCmd()
 1234          {
 1235   1        MMIMsgType XDATA_PTR msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_STOP_RINGTONE_CMD);
 1236   1      
 1237   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 1238   1        {
 1239   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 1240   2        }
 1241   1      }
 1242          
 1243          PUBLIC void MMI_DRV_SpecificEventRingtoneStopCmd(U16 id)
 1244          {
 1245   1        DRIVER_SendStopSpecificRTCmd(id);
 1246   1      }
 1247          
 1248          PUBLIC void MMI_DRV_SendFakeMediaCmd(U16 mediaEventIndex)
 1249          {
 1250   1      
 1251   1        MMIMsgType XDATA_PTR msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_FAKE_MEDIA_VP_RINGTONE_CMD);
 1252   1      
 1253   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 1254   1        {
 1255   2          msgPtr->msgBodyPtr.driverCmd.fakeMediaCmd.id = mediaEventIndex;
 1256   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 1257   2        }
 1258   1      }
 1259          
 1260          PRIVATE void MMI_DRV_SetVprtVolBySoundLevel(U8 soundLevel)
 1261          {
 1262   1        MMIMsgType XDATA_PTR msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_VPRT_VOLUME_SET_CMD);
 1263   1      
 1264   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 1265   1        {
 1266   2          msgPtr->msgBodyPtr.driverCmd.volSetCmd.soundLevel = soundLevel;
 1267   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 1268   2      
 1269   2          LightDbgPrint("VPRT SoundLevel:%d", (U8)soundLevel);
 1270   2        }
 1271   1      }
 1272          
 1273          PUBLIC void MMI_DRV_SendDriverVolCmd(U8 linkIndex, U8 soundLevel, U8 smallStep, U8 micGainSetIndex)
 1274          {
 1275   1        MMIMsgType XDATA_PTR msgPtr;
 1276   1        BOOL isWideBand = FALSE;
 1277   1      
 1278   1        if(linkIndex != MMI_EOF && gMMI_ctl.mmiInfo[linkIndex].linkPara.scoCodecType == SCO_CODEC_MSBC)
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 21  

 1279   1          isWideBand = TRUE;
 1280   1      
 1281   1        if(micGainSetIndex == VOLUME_MIC_FOLLOW_SPK)
 1282   1        {
 1283   2          if(soundLevel == VOLUME_DONT_CARE)
 1284   2            return;
 1285   2      
 1286   2          micGainSetIndex = (MMI_ADJUST_MIC_LEVEL_AUTOMATICALLY_FEAT) ? GET_SCO_MIC_GAIN_BY_LEVEL(soundLevel) : V
             -OLUME_DONT_CARE;
 1287   2        }
 1288   1      
 1289   1        if((msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_VOLUME_SET_CMD)) != (MMIMsgType XDATA_PTR)NULL)
 1290   1        {
 1291   2          MMI_DRV_SetSCODriverVolPara(soundLevel, micGainSetIndex, smallStep, isWideBand, &msgPtr->msgBodyPtr.dri
             -verCmd.volSetCmd);
 1292   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 1293   2          #ifdef AIR_MODULE
 1294   2          MMI_AIR_SendDriverVolCmd(soundLevel, smallStep);
 1295   2          #endif
 1296   2          LightDbgPrint("SCO SoundLevel:%d,%d", (U8)soundLevel,(U8)smallStep);
 1297   2        }
 1298   1      }
 1299          
 1300          PUBLIC void MMI_DRV_SetSCODriverVolPara(U8 soundLevel, U8 micGainSetIndex, U8 smallStep, U8 isWideBand, D
             -riverVolumeSetCmd XDATA_PTR volPtr)
 1301          {
 1302   1        U8 deltaDigitalGainL, deltaAnalogGainL;
 1303   1        U8 spkGainSetIndex;
 1304   1      
 1305   1        spkGainSetIndex = (soundLevel != VOLUME_DONT_CARE)? GET_SCO_SPK_GAIN_BY_LEVEL(soundLevel) : VOLUME_DONT_
             -CARE;
 1306   1      
 1307   1        volPtr->soundLevel= soundLevel;
 1308   1      
 1309   1        // SPEAKER
 1310   1        if(spkGainSetIndex != VOLUME_DONT_CARE)
 1311   1        {
 1312   2          if(isWideBand)
 1313   2          {
 1314   3            volPtr->spkVols = MMI_SPK_GAINSET_SCOWB[spkGainSetIndex].digitalGainWB;
 1315   3            volPtr->analogDaGain = MMI_SPK_GAINSET_SCOWB[spkGainSetIndex].analogGainWB;
 1316   3            volPtr->smallStepLevel = smallStep;
 1317   3          }
 1318   2          else
 1319   2          {
 1320   3            volPtr->spkVols = MMI_SPK_GAINSET[spkGainSetIndex].digitalGain;
 1321   3            volPtr->analogDaGain = MMI_SPK_GAINSET[spkGainSetIndex].analogGain;
 1322   3            volPtr->smallStepLevel = smallStep;
 1323   3          }
 1324   2      
 1325   2          if(smallStep)
 1326   2          {
 1327   3            if(isWideBand)
 1328   3            {
 1329   4              deltaDigitalGainL = (U16)(MMI_SPK_GAINSET_SCOWB[GET_SCO_SPK_GAIN_BY_LEVEL(soundLevel+1)].digitalGainW
             -B - MMI_SPK_GAINSET_SCOWB[spkGainSetIndex].digitalGainWB)*smallStep/(gMMI_nvram.smallStepVolume.scoVolumeSmallStep+1);
 1330   4              deltaAnalogGainL = (U16)(MMI_SPK_GAINSET_SCOWB[GET_SCO_SPK_GAIN_BY_LEVEL(soundLevel+1)].analogGainWB 
             -- MMI_SPK_GAINSET_SCOWB[spkGainSetIndex].analogGainWB)*smallStep/(gMMI_nvram.smallStepVolume.scoVolumeSmallStep+1);
 1331   4            }
 1332   3            else
 1333   3            {
 1334   4              deltaDigitalGainL = (U16)(MMI_SPK_GAINSET[GET_SCO_SPK_GAIN_BY_LEVEL(soundLevel+1)].digitalGain - MMI_
             -SPK_GAINSET[spkGainSetIndex].digitalGain)*smallStep/(gMMI_nvram.smallStepVolume.scoVolumeSmallStep+1);
 1335   4              deltaAnalogGainL = (U16)(MMI_SPK_GAINSET[GET_SCO_SPK_GAIN_BY_LEVEL(soundLevel+1)].analogGain - MMI_SP
             -K_GAINSET[spkGainSetIndex].analogGain)*smallStep/(gMMI_nvram.smallStepVolume.scoVolumeSmallStep+1);
 1336   4            }
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 22  

 1337   3            volPtr->spkVols += deltaDigitalGainL;
 1338   3            volPtr->analogDaGain += deltaAnalogGainL;
 1339   3          }
 1340   2        }
 1341   1        else
 1342   1        {
 1343   2          volPtr->spkVols = VOLUME_DONT_CARE;
 1344   2          volPtr->analogDaGain = VOLUME_DONT_CARE;
 1345   2        }
 1346   1      
 1347   1        //MIC
 1348   1        if(micGainSetIndex != VOLUME_DONT_CARE)
 1349   1        {
 1350   2          if(isWideBand)
 1351   2          {
 1352   3            volPtr->micVols = MMI_MIC_GAINSET_SCOWB[micGainSetIndex].digitalGainWB;
 1353   3            volPtr->analogAdGain_R = MMI_MIC_GAINSET_SCOWB[micGainSetIndex].analogGainWB_R;
 1354   3            volPtr->analogAdGain_L = MMI_MIC_GAINSET_SCOWB[micGainSetIndex].analogGainWB_L;
 1355   3          }
 1356   2          else
 1357   2          {
 1358   3            volPtr->micVols = MMI_MIC_GAINSET[micGainSetIndex].digitalGain;
 1359   3            volPtr->analogAdGain_R = MMI_MIC_GAINSET[micGainSetIndex].analogGain_R;
 1360   3            volPtr->analogAdGain_L = MMI_MIC_GAINSET[micGainSetIndex].analogGain_L;
 1361   3          }
 1362   2        }
 1363   1        else
 1364   1        {
 1365   2          volPtr->micVols = VOLUME_DONT_CARE;
 1366   2          volPtr->analogAdGain_R = VOLUME_DONT_CARE;
 1367   2          volPtr->analogAdGain_L = VOLUME_DONT_CARE;
 1368   2        }
 1369   1      }
 1370          
 1371          PUBLIC void MMI_DRV_SetSCOVolValue(U8 linkIndex, U8 soundLevel, U8 smallStep)
 1372          {
 1373   1        CURRENT_SCO_SOUND_LEVEL(linkIndex) = soundLevel;
 1374   1        CURRENT_SCO_SMALL_STEP(linkIndex) = smallStep;
 1375   1        #ifdef AVRCP_Profile
 1376   1        gMMI_ctl.mmiInfo[linkIndex].linkPara.absVolume = MMI_AVRCP_SoundLevelToAbsoluteVol(soundLevel, (U8)MMI_M
             -AX_SCO_SOUND_LEVEL(), smallStep, MMI_SCO_SMALL_STEP_LEVELS());;
 1377   1        #endif
 1378   1      }
 1379          
 1380          PUBLIC void MMI_DRV_SCOAbsVolToSoundLevel(U8 linkIndex, U8 absVol)
 1381          {
 1382   1        U8 i;
 1383   1      
 1384   1        gMMI_ctl.mmiInfo[linkIndex].linkPara.absVolume = absVol;
 1385   1      
 1386   1        if(absVol == 0)
 1387   1          i = 0;
 1388   1        else if(absVol == AVRCP_ABSOLUTE_VOLUME_MAX)
 1389   1          i = MMI_MAX_MUSIC_SOUND_LEVEL();
 1390   1        else
 1391   1          i = ((U16)absVol * MMI_MAX_MUSIC_SOUND_LEVEL() + (AVRCP_ABSOLUTE_VOLUME_FULL_RANGE / 2))
 1392   1            /AVRCP_ABSOLUTE_VOLUME_FULL_RANGE;
 1393   1      
 1394   1        if(i != CURRENT_SCO_SOUND_LEVEL(linkIndex))
 1395   1        {
 1396   2          CURRENT_SCO_SOUND_LEVEL(linkIndex) = i;
 1397   2          CURRENT_SCO_SMALL_STEP(linkIndex) = 0;
 1398   2        }
 1399   1      }
 1400          
 1401          ////////////////////////////////////////////////////////////////////////
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 23  

 1402          ///////////////////////  PRIVATE FUNCTIONS /////////////////////////////
 1403          ////////////////////////////////////////////////////////////////////////
 1404          PRIVATE void MMI_DRV_KeyEvtMapInit(void)
 1405          {
 1406   1        U8 mainKeyActionInd, keyEventAccNo;
 1407   1        keyEventAccNo=0;
 1408   1        for( mainKeyActionInd=KEY_TAP;  mainKeyActionInd < KEY_ACTIONTOTALNUMBER;  mainKeyActionInd++)
 1409   1        {
 1410   2          MMI_KeyEvtMap[mainKeyActionInd].keyEventStartIndex = keyEventAccNo;
 1411   2          MMI_KeyEvtMap[mainKeyActionInd].keyEventNo = gMMI_nvram_keymap.mmiKeyMapPairNo[mainKeyActionInd];
 1412   2          keyEventAccNo += gMMI_nvram_keymap.mmiKeyMapPairNo[mainKeyActionInd];
 1413   2        }
 1414   1      }
 1415          
 1416          PRIVATE void MMI_DRV_ADDAInit(void)
 1417          {
 1418   1        MMIMsgType XDATA_PTR msgPtr;
 1419   1        if(MMI_CheckBootFlag(SYS_SW1_BOOT_FLAG_POWER_ON_READY))
 1420   1        {
 1421   2          msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_POWER_ON_CLOSE_ADDA_CMD);
 1422   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 1423   2        }
 1424   1      }
 1425          
 1426          PRIVATE void MMI_DRV_AudioSettingsInit(void)
 1427          {
 1428   1        MMI_DRV_SendDriverVolCmd(MMI_EOF, DEFAULT_SCO_SOUND_LEVEL, DEFAULT_IDLE_SMALL_STEP, GET_SCO_MIC_GAIN_BY_
             -LEVEL(DEFAULT_SCO_SOUND_LEVEL));
 1429   1        gMMI_ctl.idleStateSoundLevel = DEFAULT_SCO_SOUND_LEVEL;
 1430   1        gMMI_ctl.idleStateSmallStep = DEFAULT_IDLE_SMALL_STEP;
 1431   1        MMI_DRV_SetVprtVolBySoundLevel(gMMI_ctl.idleStateSoundLevel);
 1432   1      
 1433   1        gMMI_ctl.audioableSCOLink = MMI_EOF;
 1434   1        gMMI_ctl.audioableA2DPLink = MMI_EOF;
 1435   1        gMMI_ctl.driverCtl.audioSwitchHandler = MMI_EOF_HANDLER;
 1436   1        #ifdef DEMOSOUND
                 gMMI_A2DP_ctl.demoSoundCtl.soundLevel = DEFAULT_A2DP_SOUND_LEVEL;
                 gMMI_A2DP_ctl.demoSoundCtl.smallStep = DEFAULT_IDLE_SMALL_STEP;
                 #endif
 1440   1      }
 1441          
 1442          PRIVATE void MMI_DRV_ParaInit(void)
 1443          {
 1444   1        gMMI_DRV_ctl.isMiscEnabled = gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled;
 1445   1      }
 1446          
 1447          PRIVATE BOOL MMI_DRV_CheckBtnSequence(KeyIndex keyIndex, U8 keyAction)
 1448          {
 1449   1        U8 i;
 1450   1        U8 unmappedBtnSeqNo;
 1451   1        BOOL isMatchBtnSeq;
 1452   1      
 1453   1        isMatchBtnSeq = FALSE;
 1454   1      
 1455   1        if (keyAction == KEY_TAP || keyAction == KEY_PRESS_RELEASE || keyAction == KEY_LONGPRESS_RELEASE ||
 1456   1          keyAction == KEY_DOUBLE || keyAction == KEY_TRIPLE || keyAction == KEY_LONGLONGPRESS_RELEASE ||
 1457   1          keyAction == KEY_EXTREMELY_LONGPRESS_RELEASE)
 1458   1        {
 1459   2          //i from 0 to MAX_BTN_SEQ_NO
 1460   2          for(i = 0 , unmappedBtnSeqNo =0 ; i < MAX_BTN_SEQ_NO; i++)
 1461   2          {
 1462   3            if( keyIndex ==gMMI_nvram.mmiBtnSeqInfo[i].keyEvent[gMMI_ctl.driverCtl.btnSeqRecord[i]].keyIndex  &&
 1463   3              keyAction == gMMI_nvram.mmiBtnSeqInfo[i].keyEvent[gMMI_ctl.driverCtl.btnSeqRecord[i]].keyAction )
 1464   3            {
 1465   4              gMMI_ctl.driverCtl.btnSeqRecord[i]++;
 1466   4      
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 24  

 1467   4              if(gMMI_ctl.driverCtl.btnSeqRecord[i] == MAX_KEY_MATCH_SEQ_NO ||gMMI_nvram.mmiBtnSeqInfo[i].keyEvent[
             -gMMI_ctl.driverCtl.btnSeqRecord[i]+1].keyIndex == KEYNONE ) // Match case --> trigger keyevent
 1468   4              {
 1469   5                gMMI_ctl.driverCtl.btnSeqRecord[i] = MMI_BEGINNING_BTN_SEQ_INDEX;
 1470   5                MMI_PushMediaEvent(gMMI_nvram.mmiBtnSeqInfo[i].mmiKeyCode);
 1471   5                MMI_DRV_KeyEventHandler(gMMI_ctl.serviceInd, gMMI_nvram.mmiBtnSeqInfo[i].mmiKeyCode);
 1472   5                isMatchBtnSeq = TRUE;
 1473   5                SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.sysTimer.btnSequenceTimer, 10); // T.O. to clear the ctl data
 1474   5              }
 1475   4              else
 1476   4              {
 1477   5                SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.sysTimer.btnSequenceTimer, 7* ONE_SEC);
 1478   5              }
 1479   4      
 1480   4            }
 1481   3            else
 1482   3            {
 1483   4              gMMI_ctl.driverCtl.btnSeqRecord[i] = MMI_BEGINNING_BTN_SEQ_INDEX;
 1484   4              unmappedBtnSeqNo++;
 1485   4            }
 1486   3          }
 1487   2      
 1488   2          if(unmappedBtnSeqNo == MAX_BTN_SEQ_NO)
 1489   2            SYS_ReleaseTimer(&gMMI_ctl.mmiTimerInfo.sysTimer.btnSequenceTimer);
 1490   2        }
 1491   1      
 1492   1        return isMatchBtnSeq;
 1493   1      }
 1494          
 1495          PUBLIC U16 MMI_DRV_KeyParser(KeyIndex keyIndex, U8 keyAction, U8 state, BOOL isLocalParser)
 1496          {
 1497   1        U8 keyEventInd;
 1498   1        U32 stateBitMask;
 1499   1      
 1500   1        if(isLocalParser)
 1501   1        {
 1502   2          if(MMI_KEY_MAP_MAPPING_BY_KEY_DOWN_STATE_FEAT)
 1503   2          {
 1504   3            if(keyAction == KEY_DOWN)
 1505   3              gMMI_ctl.driverCtl.keyDownState = state;
 1506   3          }
 1507   2          else
 1508   2          {
 1509   3            gMMI_ctl.driverCtl.keyDownState = state;
 1510   3          }
 1511   2          stateBitMask = 1L << (gMMI_ctl.driverCtl.keyDownState);
 1512   2        }
 1513   1        else
 1514   1        {
 1515   2          if(MMI_KEY_MAP_MAPPING_BY_KEY_DOWN_STATE_FEAT)
 1516   2          {
 1517   3            if(keyAction != KEY_DOWN)
 1518   3              state = gMMI_ctl.driverCtl.keyDownState;
 1519   3          }
 1520   2          stateBitMask = 1L << state;
 1521   2        }
 1522   1      
 1523   1        //REMARK: ONLY TOP handler can handle KEY_EVENT
 1524   1        for (keyEventInd = MMI_KeyEvtMap[keyAction].keyEventStartIndex; keyEventInd < (MMI_KeyEvtMap[keyAction].
             -keyEventNo+MMI_KeyEvtMap[keyAction].keyEventStartIndex); keyEventInd++)
 1525   1        {
 1526   2          if (((keyIndex == gMMI_nvram_keymap.mmiKeyMapTbl[keyEventInd].keyCode) ||
 1527   2            (gMMI_nvram_keymap.mmiKeyMapTbl[keyEventInd].keyCode == KEYALL))&&
 1528   2            ((stateBitMask & gMMI_nvram_keymap.mmiKeyMapTbl[keyEventInd].keySuppotedState)))
 1529   2          {
 1530   3            return gMMI_nvram_keymap.mmiKeyMapTbl[keyEventInd].mmiKeyEvent;
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 25  

 1531   3          }
 1532   2        }
 1533   1        return KEY_INVALID;
 1534   1      }
 1535          
 1536          PUBLIC U16 MMI_DRV_CheckKeyValid(U16 keyCode)
 1537          {
 1538   1        U8 index;
 1539   1      
 1540   1        if(MMI_DRV_IsKeyInvalidPwOnLowBat())
 1541   1        {
 1542   2          if(keyCode != KEY_POWER_OFF && keyCode != KEY_RESET)
 1543   2            return KEY_INVALID;
 1544   2        }
 1545   1      
 1546   1        switch(keyCode)
 1547   1        {
 1548   2          case KEY_POWER_ON_THEN_ENTERDISCOVERABLE:
 1549   2          case KEY_POWER_ON:
 1550   2          case KEY_RESET_PAIRED_DEVICES:
 1551   2          case KEY_CHECK_BATTERY_STATUS:
 1552   2          case KEY_RESET:
 1553   2          case KEY_VOICE_PROMPT_TOGGLE:
 1554   2          case KEY_VOICE_PROMPT_DISABLE:
 1555   2          case KEY_VOICE_PROMPT_ENABLE:
 1556   2          case KEY_VOICE_PROMPT_LANG_CHANGE:
 1557   2          case KEY_VOICE_PROMPT_LANG_SELECT:
 1558   2          case KEY_VOICE_PROMPT_LANG_CONFIRM:
 1559   2          case KEY_TOGGLE_LED:
 1560   2          case KEY_ENABLE_LED:
 1561   2          case KEY_DISABLE_LED:
 1562   2          case KEY_CANCEL_LED_INDICATION:
 1563   2          case KEY_TOGGLE_VOLUME:
 1564   2          case KEY_VOLUME_ORIENTATION_NORMAL:
 1565   2          case KEY_VOLUME_ORIENTATION_INVERT:
 1566   2          case KEY_BUZZER_MUTE_TOGGLE:
 1567   2          case KEY_ENTER_TESTMODE:
 1568   2          case KEY_MAX_DEVICE_ALLOWED_UP:
 1569   2          case KEY_MAX_DEVICE_ALLOWED_DOWN:
 1570   2          case KEY_MAX_DEVICE_ALLOWED_TOGGLE:
 1571   2          case KEY_DEBUG_KEY_TOGGLE:
 1572   2          case KEY_BUTTONLOCKTOGGLE:
 1573   2          case KEY_POWER_OFF:
 1574   2            break;
 1575   2      
 1576   2          default:
 1577   2            if(MMI_KEY_STATE_POWER_OFF == MMI_GetKeyState())
 1578   2              keyCode = KEY_INVALID;
 1579   2            break;
 1580   2        }
 1581   1      
 1582   1        if(keyCode == KEY_INVALID)
 1583   1          return keyCode;
 1584   1      
 1585   1        index = MMI_DRV_GetKeyEventIndex(keyCode);
 1586   1        switch(MMI_DRV_GetKeyEventGroup(keyCode))
 1587   1        {
 1588   2          case SYSTEM_KEY_EVENT:
 1589   2            keyCode = MMI_DRV_CheckValidKey(index, keyCode);
 1590   2            break;
 1591   2          #ifdef AIR_MODULE
 1592   2          case AIR_KEY_EVENT:
 1593   2            keyCode = MMI_AIR_CheckValidKey(index, keyCode);
 1594   2            break;
 1595   2          #endif
 1596   2          case HFP_KEY_EVENT:
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 26  

 1597   2            #ifdef AIR_MODULE
 1598   2            if(!MMI_AIR_CheckHFPKeyValid())
 1599   2              return KEY_INVALID;
 1600   2            #endif
 1601   2            #ifdef HFP_Profile
 1602   2            keyCode = MMI_HFP_CheckValidKey(index, keyCode);
 1603   2            #else
                     keyCode = KEY_INVALID;
                     #endif
 1606   2            break;
 1607   2          case AVRCP_KEY_EVENT:
 1608   2            #ifdef AIR_MODULE
 1609   2            if(!MMI_AIR_CheckAVRCPKeyValid(keyCode))
 1610   2              return KEY_INVALID;
 1611   2            #endif
 1612   2            #ifdef AVRCP_Profile
 1613   2      
 1614   2            #else
                     keyCode = KEY_INVALID;
                     #endif
 1617   2            break;
 1618   2          case FM_KEY_EVENT:
 1619   2            #ifdef FM_ENABLE
 1620   2            keyCode = MMI_FM_CheckValidKey(index, keyCode);
 1621   2            #else
                     keyCode = KEY_INVALID;
                     #endif
 1624   2            break;
 1625   2          case LINE_IN_KEY_EVENT:
 1626   2            #ifdef LINEIN_ENABLE
 1627   2            keyCode = MMI_LineIn_CheckValidKey(index, keyCode);
 1628   2            #else
                     keyCode = KEY_INVALID;
                     #endif
 1631   2            break;
 1632   2          case TESTMODE_KEY_EVENT:
 1633   2      
 1634   2            break;
 1635   2        }
 1636   1        return keyCode;
 1637   1      }
 1638          
 1639          
 1640          PRIVATE void MMI_DRV_CheckResetPairedDevice(U16 eventCode)
 1641          {
 1642   1        if(eventCode != MEDIA_EVT_KEY_RESET_PAIRED_DEVICES)
 1643   1          return;
 1644   1      
 1645   1        gMMI_ctl.driverCtl.resetPairedDeviceMediaCount --;
 1646   1        if(!gMMI_ctl.driverCtl.resetPairedDeviceMediaCount && CURRENT_ACTIVE_LINK_CNT == 0)
 1647   1        {
 1648   2          U8 i;
 1649   2          MMI_SECTOR_ResetPairedDevices();
 1650   2          i = OSMQ_Entries(OSMQ_MMI_Internal_ptr);
 1651   2          while(i--)
 1652   2          {
 1653   3            MMIMsgType XDATA_PTR msgPtr = (MMIMsgType XDATA_PTR)OSMQ_Get (OSMQ_MMI_Internal_ptr);
 1654   3            if(msgPtr->eventCode == MMI_RESET_PAIRED_DEVICE_CMD)
 1655   3              OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1656   3            else
 1657   3              OSMQ_Put(OSMQ_MMI_Internal_ptr, (U8 XDATA_PTR)msgPtr);
 1658   3          }
 1659   2        }
 1660   1      }
 1661          
 1662          PRIVATE void _SetMicMuteByLink(U8 muteCmd)//Mantis 8599 - avoid Warning C183 : Dead Assignment Eliminated
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 27  

 1663          {
 1664   1        U8 i;
 1665   1        for(i = 0; i < MAX_MULTI_POINT_NO; i++)
 1666   1        {
 1667   2          MMI_DRV_SetMicMuteByLink(muteCmd, i);
 1668   2        }
 1669   1      }
 1670          
 1671          PUBLIC void MMI_DRV_MicMuteHandler(U8 linkIndex, U8 muteCmd)
 1672          {
 1673   1        MMI_DRV_SetMicMuteByLink(muteCmd, linkIndex);
 1674   1      
 1675   1        if (MMI_ENABLE_SYNC_MUTE_MIC_TO_ALL_LINK_FEAT)
 1676   1        {
 1677   2          _SetMicMuteByLink(muteCmd);
 1678   2        }
 1679   1      
 1680   1        if(muteCmd == TOGGLE_MUTE_ON_OFF)
 1681   1        {
 1682   2          if (gMMI_ctl.mmiInfo[linkIndex].linkPara.isMicMute)
 1683   2          {
 1684   3            MMI_PushMediaEvent(MEDIA_EVT_KEY_MIC_MUTE_ON);
 1685   3          }
 1686   2          else
 1687   2          {
 1688   3            MMI_PushMediaEvent(MEDIA_EVT_KEY_MIC_MUTE_OFF);
 1689   3          }
 1690   2        }
 1691   1      }
 1692          
 1693          #ifdef A2DP_Profile
 1694          PRIVATE void MMI_DRV_MicVolA2DPHandler(U8 linkIndex, U16 keyCode)
 1695          {
 1696   1      
 1697   1        BOOL isVolumeUp;
 1698   1        U8 vgm;
 1699   1      
 1700   1        if (keyCode == KEY_MICUP)
 1701   1          isVolumeUp = TRUE;
 1702   1        else
 1703   1          isVolumeUp = FALSE;
 1704   1      
 1705   1        gMMI_ctl.isMicAdjsutInA2DP = TRUE;
 1706   1        gMMI_ctl.linkIndexMicCtlInA2DP = linkIndex;
 1707   1        vgm=CURRENT_MIC_SOUND_LEVEL_IN_A2DP(linkIndex);
 1708   1      
 1709   1        if (isVolumeUp)
 1710   1        {
 1711   2          if (vgm < (MMI_MAX_MUSIC_SOUND_LEVEL()))
 1712   2          {
 1713   3            vgm++;
 1714   3          }
 1715   2          else if(MMI_CYCLIC_VOLUME_ENABLED_FEAT)
 1716   2          {
 1717   3            vgm = 0;
 1718   3          }
 1719   2        }
 1720   1        else
 1721   1        {
 1722   2          if (vgm > 1)
 1723   2          {
 1724   3            vgm--;
 1725   3          }
 1726   2          else if(MMI_CYCLIC_VOLUME_ENABLED_FEAT)
 1727   2          {
 1728   3            vgm = (MMI_MAX_MUSIC_SOUND_LEVEL());
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 28  

 1729   3          }
 1730   2        }
 1731   1      
 1732   1        CURRENT_MIC_SOUND_LEVEL_IN_A2DP(linkIndex) = vgm;
 1733   1        MMI_A2DP_SendDriverVolCmd( vgm, 0/*CURRENT_A2DP_SMALL_STEP(linkIndex)*/);
 1734   1      
 1735   1      }
 1736          #endif
 1737          
 1738          PRIVATE void MMI_DRV_MicVolSCOHandler(U8 linkIndex, U16 keyCode)
 1739          {
 1740   1        BOOL isVolumeUp;
 1741   1        U8 vgm;
 1742   1        #ifdef HFP_Profile
 1743   1        U8 tempGainIndex;
 1744   1        #endif
 1745   1      
 1746   1        if( keyCode == KEY_MICUP )
 1747   1          isVolumeUp = TRUE;
 1748   1        else
 1749   1          isVolumeUp = FALSE;
 1750   1      
 1751   1        //Reversed Volume Control
 1752   1        isVolumeUp = (gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled & IS_VOLUME_ORIENTATION_REVERSED)
             - ? !isVolumeUp : isVolumeUp;
 1753   1      
 1754   1        #ifdef HFP_Profile
 1755   1        if(gMMI_HFP_ctl.HfpCtl[linkIndex].sendingVGSVGM)
 1756   1          return;
 1757   1        #endif
 1758   1      
 1759   1        vgm = CURRENT_SCO_VGM(linkIndex);
 1760   1        #ifdef HFP_Profile
 1761   1        tempGainIndex = vgm;
 1762   1        #endif
 1763   1      
 1764   1        if (isVolumeUp)
 1765   1        {
 1766   2          if (vgm < (SOUND_LEVEL_NO-1))
 1767   2          {
 1768   3            vgm++;
 1769   3          }
 1770   2          else if(MMI_CYCLIC_VOLUME_ENABLED_FEAT)
 1771   2          {
 1772   3            vgm = 0;
 1773   3          }
 1774   2        }
 1775   1        else
 1776   1        {
 1777   2          if (vgm > 0)
 1778   2          {
 1779   3            vgm--;
 1780   3          }
 1781   2          else if(MMI_CYCLIC_VOLUME_ENABLED_FEAT)
 1782   2          {
 1783   3            vgm = (SOUND_LEVEL_NO-1);
 1784   3          }
 1785   2        }
 1786   1        CURRENT_SCO_VGM(linkIndex) = vgm;
 1787   1        #ifdef HFP_Profile
 1788   1        if(MMI_SendATCmdUnderConnection(linkIndex, HFP_ATCMD_ADJUST_MIC_GAIN))
 1789   1        {
 1790   2          //Send VGM
 1791   2          CURRENT_SCO_VGM(linkIndex) = tempGainIndex;
 1792   2        }
 1793   1        else
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 29  

 1794   1        #endif
 1795   1        {
 1796   2          //Notify driver
 1797   2          MMI_DRV_SendDriverVolCmd(linkIndex, VOLUME_DONT_CARE, VOLUME_DONT_CARE, GET_SCO_MIC_GAIN_BY_VGM(vgm));
 1798   2        }
 1799   1      }
 1800          
 1801          #ifdef LINEIN_ENABLE
 1802          extern MmiLineInInfoCtrl XDATA gMMI_LineIn_ctl;
 1803          #endif
 1804          
 1805          PUBLIC void MMI_DRV_SetMicSoundLevelInA2DP(U8 soundLevel)
 1806          {
 1807   1        U8 linkIndex;
 1808   1        for(linkIndex = 0; linkIndex < MAX_MULTI_POINT_NO; linkIndex++)
 1809   1        {
 1810   2          CURRENT_MIC_SOUND_LEVEL_IN_A2DP(linkIndex) = soundLevel;
 1811   2        }
 1812   1      }
 1813          
 1814          PUBLIC void MMI_DRV_MicVolHandler(U8 linkIndex, U16 keyCode)
 1815          {
 1816   1        #ifdef A2DP_Profile
 1817   1        if(MUSIC_EXISTS(linkIndex))
 1818   1        {
 1819   2          MMI_DRV_MicVolA2DPHandler(linkIndex, keyCode);
 1820   2      
 1821   2          #ifdef LINEIN_ENABLE
 1822   2          if(gMMI_ctl.isAudioTransparencyEnable)
 1823   2          {
 1824   3            gMMI_LineIn_ctl.currentsoundLevel = CURRENT_MIC_SOUND_LEVEL_IN_A2DP(linkIndex);
 1825   3            LightDbgPrint("line-in[%d]",gMMI_LineIn_ctl.currentsoundLevel);
 1826   3            LightDbgPrint("A2DP[%d]",CURRENT_MIC_SOUND_LEVEL_IN_A2DP(linkIndex));
 1827   3          }
 1828   2          #endif
 1829   2        }
 1830   1        else
 1831   1        #endif
 1832   1        {
 1833   2          if(MMI_DRV_IsActiveAudioDevInCall())
 1834   2          {
 1835   3            MMI_DRV_MicVolSCOHandler(linkIndex, keyCode);
 1836   3            MMI_PushMediaEvent(MEDIA_EVT_MIC_UPDN);
 1837   3          }
 1838   2          else
 1839   2          {
 1840   3            #ifdef LINEIN_ENABLE
 1841   3            if(gMMI_ctl.isAudioTransparencyEnable)
 1842   3            {
 1843   4              BOOL isVolumeUp;
 1844   4              if(keyCode==KEY_MICUP)
 1845   4              {
 1846   5                isVolumeUp=TRUE;
 1847   5              }
 1848   4              else
 1849   4              {
 1850   5                isVolumeUp=FALSE;
 1851   5              }
 1852   4      
 1853   4              MMI_LineIn_VolumeControl(isVolumeUp);
 1854   4      
 1855   4              MMI_DRV_SetMicSoundLevelInA2DP(gMMI_LineIn_ctl.currentsoundLevel);
 1856   4              LightDbgPrint("line-in[%d]",gMMI_LineIn_ctl.currentsoundLevel);
 1857   4              LightDbgPrint("A2DP[%d]",CURRENT_MIC_SOUND_LEVEL_IN_A2DP(linkIndex));
 1858   4            }
 1859   3            #endif
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 30  

 1860   3          }
 1861   2        }
 1862   1        //MMI_PushMediaEvent(MEDIA_EVT_MIC_UPDN);
 1863   1      }
 1864          
 1865          extern PUBLIC void DRIVER_SetMicMuteUnMute(BOOL isMute);
 1866          PUBLIC void MMI_DRV_SetMicMuteByLink(U8 muteCmd, U8 linkIndex)
 1867          {
 1868   1        if(muteCmd == SET_MUTE_ON)
 1869   1        {
 1870   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.isMicMute = TRUE;
 1871   2        }
 1872   1        else if(muteCmd== SET_MUTE_OFF )
 1873   1        {
 1874   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.isMicMute = FALSE;
 1875   2        }
 1876   1        else if(muteCmd== TOGGLE_MUTE_ON_OFF )
 1877   1        {
 1878   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.isMicMute = !gMMI_ctl.mmiInfo[linkIndex].linkPara.isMicMute;
 1879   2        }
 1880   1      
 1881   1        if(MMI_MUTE_SPEAKER_AS_MICROPHONE_FEAT)
 1882   1          gMMI_ctl.mmiInfo[linkIndex].linkPara.isSpkMuteForMicMute = gMMI_ctl.mmiInfo[linkIndex].linkPara.isMicMu
             -te;
 1883   1      
 1884   1        DRIVER_SetMicMuteUnMute(gMMI_ctl.mmiInfo[linkIndex].linkPara.isMicMute);
 1885   1      }
 1886          
 1887          PUBLIC void MMI_DRV_AutoMICMuteOff(U8 linkIndex)
 1888          {
 1889   1        if(gMMI_ctl.mmiInfo[linkIndex].linkPara.isMicMute)
 1890   1        {
 1891   2          MMI_PushMediaEvent(MEDIA_EVT_KEY_MIC_MUTE_OFF);
 1892   2          MMI_DRV_MicMuteHandler(linkIndex, SET_MUTE_OFF);
 1893   2        }
 1894   1      }
 1895          
 1896          extern PUBLIC void DRIVER_SetInbandSCOMuteUnMute(BOOL isMute);
 1897          PUBLIC void MMI_DRV_SetSpkMuteByLink(U8 muteCmd, U8 linkIndex)
 1898          {
 1899   1        if(muteCmd == SET_MUTE_ON)
 1900   1        {
 1901   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.isSpkMuteForSCO = TRUE;
 1902   2        }
 1903   1        else if(muteCmd== SET_MUTE_OFF )
 1904   1        {
 1905   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.isSpkMuteForSCO = FALSE;
 1906   2        }
 1907   1        else if(muteCmd== TOGGLE_MUTE_ON_OFF )
 1908   1        {
 1909   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.isSpkMuteForSCO = !gMMI_ctl.mmiInfo[linkIndex].linkPara.isSpkMuteF
             -orSCO;
 1910   2        }
 1911   1        DRIVER_SetInbandSCOMuteUnMute(gMMI_ctl.mmiInfo[linkIndex].linkPara.isSpkMuteForSCO);
 1912   1      }
 1913          
 1914          PUBLIC BOOL MMI_DRV_IsMicMute(U8 linkIndex)
 1915          {
 1916   1        return (linkIndex < MAX_MULTI_POINT_NO) ? gMMI_ctl.mmiInfo[linkIndex].linkPara.isMicMute : FALSE;
 1917   1      }
 1918          
 1919          PUBLIC BOOL MMI_DRV_IsSpeakerMuteByLink(U8 linkIndex)
 1920          {
 1921   1        return (linkIndex < MAX_MULTI_POINT_NO) ? (gMMI_ctl.mmiInfo[linkIndex].linkPara.isSpkMuteForMicMute || g
             -MMI_ctl.mmiInfo[linkIndex].linkPara.isSpkMuteForSCO) : FALSE;
 1922   1      }
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 31  

 1923          
 1924          PUBLIC BOOL MMI_DRV_IsSpeakerMute(void)
 1925          {
 1926   1        U8 linkIndex;
 1927   1        for(linkIndex = 0; linkIndex < MAX_MULTI_POINT_NO; linkIndex++)
 1928   1        {
 1929   2          if(MMI_DRV_IsSpeakerMuteByLink(linkIndex))
 1930   2            return TRUE;
 1931   2        }
 1932   1        return FALSE;
 1933   1      }
 1934          
 1935          PUBLIC BOOL MMI_DRV_A2DPDSPEnable(void)
 1936          {
 1937   1        return (gMMI_ctl.audioableA2DPLink == MMI_EOF)? FALSE: TRUE;
 1938   1      }
 1939          
 1940          PUBLIC U8 MMI_DRV_GetA2DPEnabledLinkIndex(void)
 1941          {
 1942   1        return gMMI_ctl.audioableA2DPLink;
 1943   1      }
 1944          
 1945          #ifdef SUPPORT_VOICE_COMMAND
 1946          PUBLIC void MMI_DRV_SendVoiceCommandCmd(U16 mediaEvent)
 1947          {
 1948   1        U8 i, actionIndex;
 1949   1        MMIMsgType XDATA_PTR msgPtr;
 1950   1      
 1951   1        if(APD_VC_IDENTIFY != (((DRIVER_VOICE_COMMAND_APD_DATA_TYPE CODE_PTR)GET_SECTOR_BOUNDARY_ADDR(SECTOR_VOI
             -CE_COMMAND_APD_DATA))->vcMode))
 1952   1        {
 1953   2      
 1954   2          for(i = 0; i < TOTAL_VOICE_COMMAND_EVENTS; i++)
 1955   2          {
 1956   3            if(((DRIVER_VOICE_COMMAND_DATA_TYPE CODE_PTR)GET_SECTOR_VOICE_DATA_ADDR(SECTOR_VOICE_COMMAND_DATA))->v
             -cEventTable[i].mediaEvent == mediaEvent)
 1957   3            {
 1958   4              break;
 1959   4            }
 1960   3          }
 1961   2          if(i == TOTAL_VOICE_COMMAND_EVENTS)
 1962   2            return;
 1963   2      
 1964   2          if(!((0x1L << MMI_GetTopStateByLink(gMMI_ctl.serviceInd)) &
 1965   2          ((DRIVER_VOICE_COMMAND_DATA_TYPE CODE_PTR)GET_SECTOR_VOICE_DATA_ADDR(SECTOR_VOICE_COMMAND_DATA))->vcEve
             -ntTable[i].triggeredState))
 1966   2          {
 1967   3            return;
 1968   3          }
 1969   2      
 1970   2          actionIndex = ((DRIVER_VOICE_COMMAND_DATA_TYPE CODE_PTR)GET_SECTOR_VOICE_DATA_ADDR(SECTOR_VOICE_COMMAND
             -_DATA))->vcEventTable[i].actionIndex;
 1971   2          if(actionIndex >= ((DRIVER_VOICE_COMMAND_DATA_TYPE CODE_PTR)GET_SECTOR_VOICE_DATA_ADDR(SECTOR_VOICE_COM
             -MAND_DATA))->actionPatternNo)
 1972   2            return;
 1973   2        }
 1974   1        else
 1975   1        {
 1976   2          LightDbgPrint("VC APD mode %d", (U8) (((DRIVER_VOICE_COMMAND_APD_DATA_TYPE CODE_PTR)GET_SECTOR_BOUNDARY
             -_ADDR(SECTOR_VOICE_COMMAND_APD_DATA))->vcMode));
 1977   2      
 1978   2          for(i = 0; i < TOTAL_APD_VOICE_COMMAND_EVENTS; i++)
 1979   2          {
 1980   3            if(((DRIVER_VOICE_COMMAND_APD_DATA_TYPE CODE_PTR)GET_SECTOR_BOUNDARY_ADDR(SECTOR_VOICE_COMMAND_APD_DAT
             -A))->vcEventTable[i].mediaEvent == mediaEvent)
 1981   3            {
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 32  

 1982   4              break;
 1983   4            }
 1984   3          }
 1985   2          if(i == TOTAL_APD_VOICE_COMMAND_EVENTS)
 1986   2            return;
 1987   2      
 1988   2          if(!((0x1L << MMI_GetTopStateByLink(gMMI_ctl.serviceInd)) &
 1989   2          ((DRIVER_VOICE_COMMAND_APD_DATA_TYPE CODE_PTR)GET_SECTOR_BOUNDARY_ADDR(SECTOR_VOICE_COMMAND_APD_DATA))-
             ->vcEventTable[i].triggeredState))
 1990   2          {
 1991   3            return;
 1992   3          }
 1993   2      
 1994   2          actionIndex = ((DRIVER_VOICE_COMMAND_APD_DATA_TYPE CODE_PTR)GET_SECTOR_BOUNDARY_ADDR(SECTOR_VOICE_COMMA
             -ND_APD_DATA))->vcEventTable[i].actionIndex;
 1995   2      
 1996   2          LightDbgPrint("action index %d", (U8)actionIndex);
 1997   2      
 1998   2      
 1999   2          if(actionIndex >= ((DRIVER_VOICE_COMMAND_APD_DATA_TYPE CODE_PTR)GET_SECTOR_BOUNDARY_ADDR(SECTOR_VOICE_C
             -OMMAND_APD_DATA))->actionPatternNo)
 2000   2            return;
 2001   2        }
 2002   1      
 2003   1        MMI_SetVoiceCommandVol();
 2004   1        MMI_DRV_SetVoiceCommandTimer(mediaEvent);
 2005   1      
 2006   1        msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_VOICE_COMMAND_CMD);
 2007   1        if(msgPtr)
 2008   1        {
 2009   2          msgPtr->msgBodyPtr.driverCmd.vcCmd.id = mediaEvent;
 2010   2          msgPtr->msgBodyPtr.driverCmd.vcCmd.actionIndex = actionIndex;
 2011   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 2012   2        }
 2013   1      }
 2014          
 2015          PUBLIC void MMI_DRV_SendStopVoiceCommandCmd(void)
 2016          {
 2017   1        DRIVER_SendStopVoiceCommandCmd();
 2018   1      }
 2019          
 2020          PRIVATE U16 MMI_DRV_LookUpKeyMapTable(U16 keyEvent)
 2021          {
 2022   1        U8 i;
 2023   1      
 2024   1        for(i = 0; i < MAX_KEY_ACTION_NUM; i++)
 2025   1        {
 2026   2          if(gMMI_nvram_keymap.mmiKeyMapTbl[i].mmiKeyEvent == keyEvent)
 2027   2          {
 2028   3            if((1L << MMI_GetTopStateByLink(gMMI_ctl.serviceInd)) & gMMI_nvram_keymap.mmiKeyMapTbl[i].keySuppotedS
             -tate)
 2029   3              return keyEvent;
 2030   3            else
 2031   3              return KEY_INVALID;
 2032   3          }
 2033   2        }
 2034   1        return keyEvent; //this key event is not found on key map table
 2035   1      }
 2036          #endif
 2037          
 2038          PRIVATE void MMI_DRV_KeyReconnectUserInit(U8 linkIndex)
 2039          {
 2040   1        UNUSED(linkIndex);
 2041   1        MMI_Reconnect(RECONNECT_USER_INIT);
 2042   1      }
 2043          
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 33  

 2044          PUBLIC void MMI_DRV_RejectCallMuteSCOCmd(BOOL value)
 2045          {
 2046   1        DRIVER_RejectCallMuteSCOCmd(value);
 2047   1      }
 2048          
 2049          PRIVATE void MMI_DRV_KeyDiscoverable(U8 linkIndex)
 2050          {
 2051   1        UNUSED(linkIndex);
 2052   1      
 2053   1        // Assume that user doesnt want to recoonect to phone
 2054   1        MMI_CancelCreateAcl();
 2055   1        MMI_Reconnect_ClearCtl();
 2056   1      
 2057   1        MMI_InsertState(MMI_EOF, MMI_CONDISCABLE, MMI_CONNECTABLE);
 2058   1      }
 2059          
 2060          PRIVATE void MMI_DRV_KeyNonDiscoverable(U8 linkIndex)
 2061          {
 2062   1        UNUSED(linkIndex);
 2063   1        MMI_SetEnterDiscoverable(FALSE);
 2064   1        if(MMI_CheckNestState(MMI_EOF, MMI_CONDISCABLE))
 2065   1        {
 2066   2          MMI_RmvState(MMI_EOF, MMI_CONDISCABLE);
 2067   2        }
 2068   1      }
 2069          
 2070          PRIVATE void MMI_DRV_KeyConnectedToDiscoverable(U8 linkIndex)
 2071          {
 2072   1        UNUSED(linkIndex);
 2073   1        MMI_CancelCreateAcl();
 2074   1        MMI_Reconnect_ClearCtl();
 2075   1        MMI_ReleaseMultiLink();
 2076   1        if(!gMMI_ctl.activeLinkRecord)
 2077   1        {
 2078   2          MMI_SetEnterDiscoverable(TRUE);
 2079   2        }
 2080   1        else
 2081   1        {
 2082   2          MMI_SetEnterDiscoverableAfterDisc(TRUE);
 2083   2        }
 2084   1      }
 2085          
 2086          PRIVATE void MMI_DRV_KeyConnectedToConnectable(U8 linkIndex)
 2087          {
 2088   1        UNUSED(linkIndex);
 2089   1        MMI_CancelCreateAcl();
 2090   1        MMI_Reconnect_ClearCtl();
 2091   1        MMI_ReleaseMultiLink();
 2092   1      }
 2093          
 2094          PRIVATE void _NFCDetachSetTimer(void)//Mantis 8599 - avoid Warning C183 : Dead Assignment Eliminated
 2095          {
 2096   1        U8 i;
 2097   1        for(i = 0; i < MAX_MULTI_POINT_NO; i++)
 2098   1        {
 2099   2          if(MMI_IsActiveLink(i))
 2100   2          {
 2101   3            SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.connTimer[i].nfcDetachIfNoProfileTimer,3*ONE_SEC);
 2102   3          }
 2103   2        }
 2104   1      }
 2105          
 2106          PRIVATE void MMI_DRV_KeyNFCDiscoverable(U8 linkIndex)
 2107          {
 2108   1        UNUSED(linkIndex);
 2109   1        if(gMMI_ctl.activeLinkRecord)
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 34  

 2110   1        {
 2111   2          _NFCDetachSetTimer();
 2112   2        }
 2113   1        MMI_InsertState(MMI_EOF, MMI_CONDISCABLE, MMI_CONNECTABLE);
 2114   1      }
 2115          
 2116          PRIVATE void MMI_DRV_KeyConfirmationAccept(U8 linkIndex)
 2117          {
 2118   1        MMI_HCI_SendConfirmationReply(TRUE, &gMMI_ctl.mmiInfo[linkIndex].bdAddr[0]);
 2119   1      }
 2120          
 2121          PRIVATE void MMI_DRV_KeyConfirmationReject(U8 linkIndex)
 2122          {
 2123   1        MMI_HCI_SendConfirmationReply(FALSE, &gMMI_ctl.mmiInfo[linkIndex].bdAddr[0]);
 2124   1      }
 2125          
 2126          PRIVATE void MMI_DRV_KeyDbgKeyToggle(U8 linkIndex)
 2127          {
 2128   1        UNUSED(linkIndex);
 2129   1        gMMI_ctl.driverCtl.dbgPrivateKey = ~gMMI_ctl.driverCtl.dbgPrivateKey;
 2130   1        MMI_HCI_SendWriteSimplePairingDebugMode(gMMI_ctl.driverCtl.dbgPrivateKey);
 2131   1      }
 2132          
 2133          PRIVATE void MMI_DRV_KeyVoiceUp(U8 linkIndex)
 2134          {
 2135   1        MMI_DRV_VoiceAdjustment(linkIndex, KEY_VOICEUP, FALSE);
 2136   1      }
 2137          
 2138          PRIVATE void MMI_DRV_KeyVoiceDown(U8 linkIndex)
 2139          {
 2140   1        MMI_DRV_VoiceAdjustment(linkIndex, KEY_VOICEDN, FALSE);
 2141   1      }
 2142          
 2143          PRIVATE void MMI_DRV_KeyCheckBatteryStatus(U8 linkIndex)
 2144          {
 2145   1        UNUSED(linkIndex);
 2146   1        MMI_CHGBAT_BatteryCheckPoint();
 2147   1      }
 2148          
 2149          PRIVATE void MMI_DRV_KeyBuzzerMuteToggle(U8 linkIndex)
 2150          {
 2151   1        UNUSED(linkIndex);
 2152   1      }
 2153          
 2154          PRIVATE void MMI_DRV_KeyToggleVolume(U8 linkIndex)
 2155          {
 2156   1        UNUSED(linkIndex);
 2157   1        gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled ^= IS_VOLUME_ORIENTATION_REVERSED;
 2158   1        MMI_SECTOR_SetUpdateFlag(TRUE);
 2159   1      }
 2160          
 2161          PRIVATE void MMI_DRV_KeyVolOrientationNormal(U8 linkIndex)
 2162          {
 2163   1        UNUSED(linkIndex);
 2164   1        gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled &= ~(IS_VOLUME_ORIENTATION_REVERSED);
 2165   1        MMI_SECTOR_SetUpdateFlag(TRUE);
 2166   1      }
 2167          
 2168          PRIVATE void MMI_DRV_KeyVolOrientationInvert(U8 linkIndex)
 2169          {
 2170   1        UNUSED(linkIndex);
 2171   1        gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled |= IS_VOLUME_ORIENTATION_REVERSED;
 2172   1        MMI_SECTOR_SetUpdateFlag(TRUE);
 2173   1      }
 2174          
 2175          
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 35  

 2176          PRIVATE void MMI_DRV_KeyToggleLED(U8 linkIndex)
 2177          {
 2178   1        UNUSED(linkIndex);
 2179   1        MMI_LED_KeyOnOffHandler(TOGGLE_LED);
 2180   1      }
 2181          
 2182          PRIVATE void MMI_DRV_KeyEnableLED(U8 linkIndex)
 2183          {
 2184   1        UNUSED(linkIndex);
 2185   1        MMI_LED_KeyOnOffHandler(ENABLE_LED);
 2186   1      }
 2187          
 2188          PRIVATE void MMI_DRV_KeyDisableLED(U8 linkIndex)
 2189          {
 2190   1        UNUSED(linkIndex);
 2191   1        MMI_LED_KeyOnOffHandler(DISABLE_LED);
 2192   1      }
 2193          
 2194          PRIVATE void MMI_DRV_KeyCancelLEDIndication(U8 linkIndex)
 2195          {
 2196   1        UNUSED(linkIndex);
 2197   1        DRIVER_Cmd_LED_Restart(DRIVER_CMD_LED_RESTART_PARA_ONLY_FG);
 2198   1      }
 2199          
 2200          PRIVATE void MMI_DRV_KeyMediaTrigger(U8 linkIndex)
 2201          {
 2202   1        #ifdef SUPPORT_VOICE_PROMPT
 2203   1        if (MMI_HFP_INCOMMING == MMI_GetTopStateByLink(linkIndex))
 2204   1          MMI_DRV_SpecificEventVPStopCmd(MEDIA_EVT_ENTER_INCOMING);
 2205   1        #else
                 UNUSED(linkIndex);
                 #endif
 2208   1      }
 2209          
 2210          PRIVATE void MMI_DRV_KeyPowerOnDiscoverable(U8 linkIndex)
 2211          {
 2212   1        UNUSED(linkIndex);
 2213   1        MMI_SetEnterDiscoverable(TRUE);
 2214   1        if(MMI_GetKeyState() == MMI_KEY_STATE_NONE)
 2215   1        {
 2216   2          MMI_PowerOnLoader();
 2217   2        }
 2218   1      }
 2219          
 2220          PRIVATE void MMI_DRV_KeyPowerOn(U8 linkIndex)
 2221          {
 2222   1        UNUSED(linkIndex);
 2223   1        if(MMI_GetKeyState() == MMI_KEY_STATE_NONE)
 2224   1        {
 2225   2          MMI_PowerOnLoader();
 2226   2          #ifdef OLED_ENABLE
                   OLED_DisplayOn(OLED_SHOW_START);
                   #endif
 2229   2      
 2230   2          if(gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled & IS_MP_TEST_MODE_ENABLE)
 2231   2          {
 2232   3            MMI_AddTopState(gMMI_ctl.serviceInd,MMI_MP_STATE);
 2233   3            gMMI_ctl.currentSupportDeviceNo = 1;
 2234   3            gMMI_nvram.timerCtl.PairModeTimeout = 0;
 2235   3            gMMI_nvram.timerCtl.PairModeTimeoutIfPDLIsEmpty = 0;
 2236   3            MMI_HCI_SendEnableDeviceUnderTestMode();
 2237   3            MMI_SetEnterDiscoverable(TRUE);
 2238   3          }
 2239   2        }
 2240   1      }
 2241          
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 36  

 2242          PRIVATE void MMI_DRV_KeyPowerOff(U8 linkIndex)
 2243          {
 2244   1        UNUSED(linkIndex);
 2245   1        MMI_PowerOffHandler(POWEROFF_REASON_KEY);
 2246   1        #ifdef OLED_ENABLE
                 OLED_DisplayOff();
                 #endif
 2249   1      }
 2250          
 2251          PRIVATE void MMI_DRV_KeyReset(U8 linkIndex)
 2252          {
 2253   1        U8 i;
 2254   1      
 2255   1        UNUSED(linkIndex);
 2256   1        for(i = 0; i < MAX_MULTI_POINT_NO; i++)
 2257   1        {
 2258   2          MMI_ReleaseProfileLinkAndDetach(i);
 2259   2        }
 2260   1        PMU_SYS_SET_BOOT_SW_STATUS_B1 (0);
 2261   1        MMI_LinkKey_ClearConnectedFlag();
 2262   1        MMI_DRV_SetReset(TRUE);
 2263   1      }
 2264          
 2265          PRIVATE void MMI_DRV_KeyResetPairedDevices(U8 linkIndex)
 2266          {
 2267   1        UNUSED(linkIndex);
 2268   1        MMI_CancelCreateAcl();
 2269   1        MMI_Reconnect_ClearCtl();
 2270   1        MMI_ReleaseMultiLink();
 2271   1      
 2272   1        if(gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled & IS_MP_TEST_MODE_ENABLE)
 2273   1        {
 2274   2          gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled &= ~IS_MP_TEST_MODE_ENABLE;
 2275   2          gMMI_ctl.driverCtl.resetLinkType = 0x3;
 2276   2        }
 2277   1        else if(!gMMI_ctl.driverCtl.resetLinkType)
 2278   1          gMMI_ctl.driverCtl.resetLinkType = 0xFF;
 2279   1      
 2280   1        MMI_SendInternalCmdToMMI(MMI_RESET_PAIRED_DEVICE_CMD);
 2281   1      }
 2282          
 2283          PRIVATE void MMI_DRV_KeyMaxDeviceAllowUp(U8 linkIndex)
 2284          {
 2285   1        UNUSED(linkIndex);
 2286   1        if (gMMI_ctl.currentSupportDeviceNo < MMI_MAX_PAGE_DEVICE)
 2287   1        {
 2288   2          gMMI_ctl.currentSupportDeviceNo++;
 2289   2          gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled |= IS_MULTIPOINTS_ENABLE;
 2290   2          MMI_SECTOR_SetUpdateFlag(TRUE);
 2291   2        }
 2292   1      }
 2293          
 2294          PRIVATE void MMI_DRV_KeyMaxDeviceAllowDown(U8 linkIndex)
 2295          {
 2296   1        UNUSED(linkIndex);
 2297   1        if (gMMI_ctl.currentSupportDeviceNo > 1)
 2298   1        {
 2299   2          gMMI_ctl.currentSupportDeviceNo--;
 2300   2          gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled &= (~IS_MULTIPOINTS_ENABLE);
 2301   2          MMI_SECTOR_SetUpdateFlag(TRUE);
 2302   2        }
 2303   1      }
 2304          
 2305          PRIVATE void MMI_DRV_KeyMaxDeviceAllowToggle(U8 linkIndex)
 2306          {
 2307   1        UNUSED(linkIndex);
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 37  

 2308   1        if (gMMI_ctl.currentSupportDeviceNo < MMI_MAX_PAGE_DEVICE)
 2309   1        {
 2310   2          gMMI_ctl.currentSupportDeviceNo ++;
 2311   2          gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled |= IS_MULTIPOINTS_ENABLE;
 2312   2          MMI_SECTOR_SetUpdateFlag(TRUE);
 2313   2          MMI_PushMediaEvent(MEDIA_EVT_KEY_MAX_DEVICE_ALLOWED_UP);
 2314   2        }
 2315   1        else
 2316   1        {
 2317   2          gMMI_ctl.currentSupportDeviceNo = 1;
 2318   2          gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled &= (~IS_MULTIPOINTS_ENABLE);
 2319   2          MMI_SECTOR_SetUpdateFlag(TRUE);
 2320   2          MMI_PushMediaEvent(MEDIA_EVT_KEY_MAX_DEVICE_ALLOWED_DOWN);
 2321   2        }
 2322   1      }
 2323          
 2324          PRIVATE void MMI_DRV_KeyReconnectAfterPowerOn(U8 linkIndex)
 2325          {
 2326   1        UNUSED(linkIndex);
 2327   1        MMI_Reconnect(RECONNECT_PWR_ON);
 2328   1      }
 2329          
 2330          PRIVATE void MMI_DRV_KeyVoicePromptToggle(U8 linkIndex)
 2331          {
 2332   1        if(MMI_DRV_IsVoicePromptEnabled())
 2333   1        {
 2334   2          MMI_DRV_DisableVoicePrompt();
 2335   2          MMI_PushMediaEvent(MEDIA_EVT_KEY_VOICE_PROMPT_DISABLE);
 2336   2        }
 2337   1        else
 2338   1        {
 2339   2          MMI_DRV_EnableVoicePrompt();
 2340   2          MMI_PushMediaEvent(MEDIA_EVT_KEY_VOICE_PROMPT_ENABLE);
 2341   2        }
 2342   1        UNUSED(linkIndex);
 2343   1      }
 2344          
 2345          PRIVATE void MMI_DRV_KeyVoicePromptEnable(U8 linkIndex)
 2346          {
 2347   1        UNUSED(linkIndex);
 2348   1        MMI_DRV_EnableVoicePrompt();
 2349   1      }
 2350          
 2351          PRIVATE void MMI_DRV_KeyVoicePromptDisable(U8 linkIndex)
 2352          {
 2353   1        UNUSED(linkIndex);
 2354   1        MMI_DRV_DisableVoicePrompt();
 2355   1      }
 2356          
 2357          #ifdef SUPPORT_VOICE_PROMPT
 2358          PRIVATE void MMI_DRV_KeyVoicePromptLanChange(U8 linkIndex)
 2359          {
 2360   1        #ifdef TWS_SETTINGS
 2361   1        U8 vplangIndex;
 2362   1        #endif
 2363   1      
 2364   1        UNUSED(linkIndex);
 2365   1        gMMI_driver_variation_nvram.misc_para.init.vpLangIndex++;
 2366   1        if(gMMI_driver_variation_nvram.misc_para.init.vpLangIndex >= gMMI_nvram.vpConfig.LangCount)
 2367   1          gMMI_driver_variation_nvram.misc_para.init.vpLangIndex = 0;
 2368   1      
 2369   1        #ifdef TWS_SETTINGS
 2370   1        vplangIndex = gMMI_driver_variation_nvram.misc_para.init.vpLangIndex;
 2371   1        #endif
 2372   1      
 2373   1        MMI_DRV_LoadVoiceLangCtl(gMMI_driver_variation_nvram.misc_para.init.vpLangIndex);
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 38  

 2374   1        MMI_PushMediaEvent(MEDIA_EVT_VOICE_PROMPT_LANG_CHANGE);
 2375   1        MMI_SECTOR_SetUpdateFlag(TRUE);
 2376   1      
 2377   1        #ifdef TWS_SETTINGS
 2378   1          MMI_AIR_AiroStereo_Sync(AIR_APP_SYNC_SHARE_VP_LANG_INDEX_AND_CHANG_NEXT,vplangIndex);
 2379   1        #endif
 2380   1      }
 2381          
 2382          PRIVATE void MMI_DRV_KeyVoicePromptLanSel(U8 linkIndex)
 2383          {
 2384   1        if(MMI_CONDISCABLE == MMI_GetTopStateByLink(linkIndex))
 2385   1        {
 2386   2          MMI_AddTopState(MMI_EOF, MMI_VOICE_PROMPT_LANG_SELECT);
 2387   2        }
 2388   1      }
 2389          
 2390          PRIVATE void MMI_DRV_KeyVoicePromptLanCfm(U8 linkIndex)
 2391          {
 2392   1        if(MMI_VOICE_PROMPT_LANG_SELECT == MMI_GetTopStateByLink(linkIndex))
 2393   1        {
 2394   2          gMMI_ctl.vpRuntime.vpLangStatus |= VP_STATUS_LANG_CONFIRM;
 2395   2          MMI_RmvState(MMI_EOF, MMI_VOICE_PROMPT_LANG_SELECT);
 2396   2        }
 2397   1      }
 2398          #endif
 2399          
 2400          PRIVATE void MMI_DRV_KeyButtonLockOn(U8 linkIndex)
 2401          {
 2402   1        UNUSED(linkIndex);
 2403   1        MMI_DRV_SetButtonLock(TRUE);
 2404   1      }
 2405          
 2406          PRIVATE void MMI_DRV_KeyButtonLockOff(U8 linkIndex)
 2407          {
 2408   1        UNUSED(linkIndex);
 2409   1        MMI_DRV_SetButtonLock(FALSE);
 2410   1      }
 2411          
 2412          PRIVATE void MMI_DRV_KeyButtonLockToggle(U8 linkIndex)
 2413          {
 2414   1        UNUSED(linkIndex);
 2415   1        if (MMI_DRV_IsButtonLocked())
 2416   1        {
 2417   2          MMI_DRV_SetButtonLock(FALSE);
 2418   2          MMI_PushMediaEvent(MEDIA_EVT_KEY_BUTTONLOCKOFF);
 2419   2        }
 2420   1        else
 2421   1        {
 2422   2          MMI_DRV_SetButtonLock(TRUE);
 2423   2          MMI_PushMediaEvent(MEDIA_EVT_KEY_BUTTONLOCKON);
 2424   2        }
 2425   1      }
 2426          
 2427          PRIVATE void MMI_DRV_KeyMicUp(U8 linkIndex)
 2428          {
 2429   1        #ifdef AIR_MODULE
 2430   1        if(gMMI_ctl.isAudioTransparencyEnable)
 2431   1        {
 2432   2          U8 airlink;
 2433   2          if((airlink = MMI_AIR_GetAirLink(PRODUCT_AIR_TWS)) != MMI_EOF && (A2DP_IsLinkFollower(airlink) || A2DP_
             -IsLinkRelayer(airlink)))
 2434   2          {
 2435   3            if(MMI_DRV_IsActiveAudioDevInMusic())
 2436   3            {
 2437   4              MMI_AVRCP_SendVendorUnique(airlink, AVRCP_VENDOR_UNIQ_SYNC_MIC_VOL_AND_UP, CURRENT_MIC_SOUND_LEVEL_IN
             -_A2DP(linkIndex));
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 39  

 2438   4            }
 2439   3            else
 2440   3            {
 2441   4              MMI_AVRCP_SendVendorUnique(airlink, AVRCP_VENDOR_UNIQ_SYNC_MIC_VOL_AND_UP, gMMI_LineIn_ctl.currentsou
             -ndLevel);
 2442   4            }
 2443   3          }
 2444   2        }
 2445   1        #endif
 2446   1      
 2447   1        MMI_DRV_MicVolHandler(linkIndex, KEY_MICUP);
 2448   1      }
 2449          
 2450          PRIVATE void MMI_DRV_KeyMicDown(U8 linkIndex)
 2451          {
 2452   1        #ifdef AIR_MODULE
 2453   1        if(gMMI_ctl.isAudioTransparencyEnable && !MMI_DRV_IsActiveAudioDevInCall())
 2454   1        {
 2455   2          U8 airlink;
 2456   2          if((airlink = MMI_AIR_GetAirLink(PRODUCT_AIR_TWS)) != MMI_EOF && (A2DP_IsLinkFollower(airlink) || A2DP_
             -IsLinkRelayer(airlink)))
 2457   2          {
 2458   3            if(MMI_DRV_IsActiveAudioDevInMusic())
 2459   3            {
 2460   4              MMI_AVRCP_SendVendorUnique(airlink, AVRCP_VENDOR_UNIQ_SYNC_MIC_VOL_AND_DN, CURRENT_MIC_SOUND_LEVEL_IN
             -_A2DP(linkIndex));
 2461   4            }
 2462   3            else
 2463   3            {
 2464   4              MMI_AVRCP_SendVendorUnique(airlink, AVRCP_VENDOR_UNIQ_SYNC_MIC_VOL_AND_DN, gMMI_LineIn_ctl.currentsou
             -ndLevel);
 2465   4            }
 2466   3          }
 2467   2        }
 2468   1        #endif
 2469   1        MMI_DRV_MicVolHandler(linkIndex, KEY_MICDN);
 2470   1      }
 2471          
 2472          PRIVATE void MMI_DRV_KeyMicMuteToggle(U8 linkIndex)
 2473          {
 2474   1        MMI_DRV_MicMuteHandler(linkIndex, TOGGLE_MUTE_ON_OFF);
 2475   1      }
 2476          
 2477          PRIVATE void MMI_DRV_KeyMicMuteOn(U8 linkIndex)
 2478          {
 2479   1        UNUSED(linkIndex);
 2480   1      }
 2481          
 2482          PRIVATE void MMI_DRV_KeyMicMuteOff(U8 linkIndex)
 2483          {
 2484   1        UNUSED(linkIndex);
 2485   1      }
 2486          
 2487          PRIVATE void MMI_DRV_KeySCOSwitch(U8 linkIndex)
 2488          {
 2489   1        U8 i;
 2490   1      
 2491   1        for(i = 0; i < MAX_MULTI_POINT_NO; i++)
 2492   1        {
 2493   2          linkIndex = (linkIndex+i)&MAX_MULTI_POINT_NO;
 2494   2          if(gMMI_ctl.audioDevCtl.registedDev[linkIndex] & ((1<<AUDIO_DEVICE_SCO)|(1<<AUDIO_DEVICE_SCO_HSP)|(1<<A
             -UDIO_DEVICE_SCO_IDLE)))
 2495   2          {
 2496   3            MMI_DRV_SetSwitchingSCO(TRUE);
 2497   3            MMI_SendDSPCmd(linkIndex, DSP_ENABLE_BY_SCO);
 2498   3            return;
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 40  

 2499   3          }
 2500   2        }
 2501   1      }
 2502          
 2503          #ifdef TWS_SETTINGS
 2504          extern PUBLIC void MMI_Share_KeyChangePEQCmd(U8 linkIndex);
 2505          #endif
 2506          PRIVATE void MMI_DRV_KeyPEQModeChange(U8 linkIndex)
 2507          {
 2508   1        UNUSED(linkIndex);
 2509   1      #ifdef PEQ_ENABLE
 2510   1        #ifdef TWS_SETTINGS
 2511   1        if(A2DP_IsLinkFollower(linkIndex))
 2512   1        {
 2513   2          MMI_Share_KeyChangePEQCmd(linkIndex);
 2514   2        }
 2515   1        else
 2516   1        #endif
 2517   1        {
 2518   2          MMI_DRV_PEQModeChange();
 2519   2        }
 2520   1      #endif
 2521   1      }
 2522          
 2523          PRIVATE void MMI_DRV_KeyMultiPlayModeToggle(U8 linkIndex)
 2524          {
 2525   1        UNUSED(linkIndex);
 2526   1        MMI_FEATURE_CTL_A2DP ^= 0x0202;
 2527   1        LightDbgPrint("USR - A2DP Feature:%X",(U32)MMI_FEATURE_CTL_A2DP);
 2528   1      }
 2529          
 2530          PRIVATE void MMI_DRV_KeyCheckStatusOfConnection(U8 linkIndex)
 2531          {
 2532   1        UNUSED(linkIndex);
 2533   1        for(linkIndex = 0; linkIndex < MAX_MULTI_POINT_NO; linkIndex++)
 2534   1        {
 2535   2          if(MMI_GetConnectedProfileCount(linkIndex, TRUE))
 2536   2          {
 2537   3            MMI_PushMediaEvent(MEDIA_EVT_SLC_CONNECTED);
 2538   3            return;
 2539   3          }
 2540   2        }
 2541   1        MMI_PushMediaEvent(MEDIA_EVT_SLC_DISCONNECTED);
 2542   1      }
 2543          
 2544          PRIVATE void MMI_DRV_KeyChangeSoundEffect(U8 linkIndex)
 2545          {
 2546   1        MMIMsgType XDATA_PTR msgPtr;
 2547   1      
 2548   1        msgPtr = (MMIMsgType XDATA_PTR)OSMEM_Get(OSMEM_ptr1);
 2549   1      
 2550   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 2551   1        {
 2552   2          msgPtr->msgOpcode  = DRIVER_CHANGE_SOUND_EFFECT_CMD;
 2553   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 2554   2        }
 2555   1      
 2556   1        UNUSED(linkIndex);
 2557   1      }
 2558          
 2559          PRIVATE void MMI_DRV_KeyControlDBBOnOff(U8 linkIndex)
 2560          {
 2561   1      
 2562   1        MMIMsgType XDATA_PTR msgPtr;
 2563   1      
 2564   1        msgPtr = (MMIMsgType XDATA_PTR)OSMEM_Get(OSMEM_ptr1);
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 41  

 2565   1      
 2566   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 2567   1        {
 2568   2          msgPtr->msgOpcode  = DRIVER_CONTROL_DBB_ON_OFF;
 2569   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 2570   2        }
 2571   1      
 2572   1        UNUSED(linkIndex);
 2573   1      }
 2574          
 2575          PRIVATE void MMI_DRV_EnableDUTModeCMD(U8 linkIndex)
 2576          {
 2577   1        U8 i;
 2578   1        UNUSED(linkIndex);
 2579   1        OS_ENTER_CRITICAL ();
 2580   1        i = PMU_SYS_GET_BOOT_SW_STATUS_B1 ();
 2581   1        i |= SYS_SW1_BOOT_FLAG_ENTER_MP_TEST_MODE;
 2582   1        PMU_SYS_SET_BOOT_SW_STATUS_B1 (i);
 2583   1        OS_EXIT_CRITICAL ();
 2584   1      
 2585   1        for(i = 0; i < MAX_MULTI_POINT_NO; i++)
 2586   1        {
 2587   2          MMI_ReleaseProfileLinkAndDetach(i);
 2588   2        }
 2589   1      
 2590   1        MMI_LinkKey_ClearConnectedFlag();
 2591   1        MMI_DRV_SetReset(TRUE);
 2592   1      }
 2593          
 2594          PRIVATE void MMI_DRV_KeyMicEnableL(U8 linkIndex)
 2595          {
 2596   1        MMIMsgType XDATA_PTR msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_MIC_TEST_CMD);
 2597   1      
 2598   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 2599   1        {
 2600   2          msgPtr->msgBodyPtr.driverCmd.micTestCmd.micEnableSet = DRIVER_MIC_ENABLE_L;
 2601   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 2602   2        }
 2603   1        UNUSED(linkIndex);
 2604   1      }
 2605          PRIVATE void MMI_DRV_KeyMicEnableR(U8 linkIndex)
 2606          {
 2607   1        MMIMsgType XDATA_PTR msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_MIC_TEST_CMD);
 2608   1      
 2609   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 2610   1        {
 2611   2          msgPtr->msgBodyPtr.driverCmd.micTestCmd.micEnableSet = DRIVER_MIC_ENABLE_R;
 2612   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 2613   2        }
 2614   1        UNUSED(linkIndex);
 2615   1      }
 2616          
 2617          PRIVATE void MMI_DRV_KeyMicToSpkEnable(U8 linkIndex)
 2618          {
 2619   1        MMIMsgType XDATA_PTR msgPtr;
 2620   1      
 2621   1        msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_LINE_IN_CMD);
 2622   1      
 2623   1        gAlignDSP.IC_BIST_MODE = 0;
 2624   1      
 2625   1        msgPtr->msgBodyPtr.driverCmd.auxCmd.m2d_ctl.para.linein_start_para.input_fs = 0x10;
 2626   1        OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 2627   1        UNUSED(linkIndex);
 2628   1      }
 2629          PRIVATE void MMI_DRV_KeyMicToSpkDisable(U8 linkIndex)
 2630          {
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 42  

 2631   1      #ifdef LINEIN_ENABLE
 2632   1        MMI_LineIn_DriverCmd(DRIVER_STOP_LINE_IN_CMD);
 2633   1      #endif
 2634   1        UNUSED(linkIndex);
 2635   1      }
 2636          
 2637          PRIVATE void MMI_DRV_KeyEnableECNR(U8 linkIndex)
 2638          {
 2639   1        MMIMsgType XDATA_PTR msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_MIC_TEST_CMD);
 2640   1      
 2641   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 2642   1        {
 2643   2          msgPtr->msgBodyPtr.driverCmd.micTestCmd.controlECNR = DRIVER_CONTROL_ECNR_ENABLE;
 2644   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 2645   2        }
 2646   1        UNUSED(linkIndex);
 2647   1      }
 2648          PRIVATE void MMI_DRV_KeyDisableECNR(U8 linkIndex)
 2649          {
 2650   1        MMIMsgType XDATA_PTR msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_MIC_TEST_CMD);
 2651   1      
 2652   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 2653   1        {
 2654   2          msgPtr->msgBodyPtr.driverCmd.micTestCmd.controlECNR = DRIVER_CONTROL_ECNR_DISABLE;
 2655   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 2656   2        }
 2657   1        UNUSED(linkIndex);
 2658   1      }
 2659          
 2660          PRIVATE void MMI_DRV_KeySwitchStereoMono(U8 linkIndex)
 2661          {
 2662   1        MMIMsgType XDATA_PTR msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_DSP_SWITCH_STEREO_MONO_CMD);
 2663   1      
 2664   1        OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 2665   1      
 2666   1        UNUSED(linkIndex);
 2667   1      }
 2668          
 2669          PRIVATE U16 MMI_DRV_CheckKeyReconnect(U16 keyCode)
 2670          {
 2671   1        if(gMMI_ctl.reconnectCtl.disableReconnect || CURRENT_ACTIVE_LINK_CNT == gMMI_ctl.currentSupportDeviceNo)
 2672   1          keyCode = KEY_INVALID;
 2673   1      
 2674   1        return keyCode;
 2675   1      }
 2676          
 2677          PRIVATE U16 MMI_DRV_CheckKeyVoicePrompt(U16 keyCode)
 2678          {
 2679   1        if(MMI_VOICE_PROMPT_FUNC_OFF_FEAT)
 2680   1          keyCode = KEY_INVALID;
 2681   1      
 2682   1        return keyCode;
 2683   1      }
 2684          
 2685          #ifdef PRODUCT_TYPE_K
               extern PUBLIC BOOL MMI_Share_IsDeviceToPhone(void);
               #endif
 2688          
 2689          PRIVATE U16 MMI_DRV_CheckKeyDiscoverable(U16 keyCode)
 2690          {
 2691   1      #if defined(AIR_MODULE) && defined(A2DP_Profile)
 2692   1        keyCode = MMI_AIR_CheckKeyDiscoverable(keyCode);
 2693   1      #endif
 2694   1        if(CURRENT_ACTIVE_LINK_CNT == gMMI_ctl.currentSupportDeviceNo)
 2695   1        {
 2696   2          keyCode = KEY_INVALID;
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 43  

 2697   2        }
 2698   1        return keyCode;
 2699   1      }
 2700          
 2701          PRIVATE U16 MMI_DRV_CheckKeyVoiceDown(U16 keyCode)
 2702          {
 2703   1        #ifdef FM_ENABLE
 2704   1        if(MMI_CheckInFMState()  && gMMI_FM_ctl.isDriverFMBusy)
 2705   1          keyCode = KEY_INVALID;
 2706   1        #endif
 2707   1        return keyCode;
 2708   1      }
 2709          
 2710          PRIVATE U16 MMI_DRV_CheckKeyPowerOff(U16 keyCode)
 2711          {
 2712   1        if (gMMI_ctl.mmiTimerInfo.sysTimer.disPowerOffAfterPowerOnTime)
 2713   1          keyCode = KEY_INVALID;
 2714   1        else
 2715   1        {
 2716   2          #ifdef AIR_MODULE
 2717   2          keyCode = MMI_AIR_CheckKeyPowerOff(keyCode);
 2718   2          #endif
 2719   2        }
 2720   1        return keyCode;
 2721   1      }
 2722          
 2723          PRIVATE U16 MMI_DRV_CheckKeyVoiceCommandEnable(U16 keyCode)
 2724          {
 2725   1      #ifdef TWS_SETTINGS
 2726   1        U8 airLink = MMI_AIR_GetAirLink(PRODUCT_AIR_TWS);
 2727   1      #endif
 2728   1      #ifdef A2DP_Profile
 2729   1        U8 linkIndex;
 2730   1        for(linkIndex = 0; linkIndex < MAX_MULTI_POINT_NO; linkIndex++)
 2731   1        {
 2732   2          if(MUSIC_EXISTS(linkIndex))
 2733   2            return KEY_INVALID;
 2734   2        }
 2735   1      #endif
 2736   1      #ifdef SUPPORT_VOICE_COMMAND
 2737   1        if(VoiceCommand_IsEnabled())
 2738   1          return KEY_INVALID;
 2739   1      #endif
 2740   1      #ifdef TWS_SETTINGS
 2741   1        if(airLink != MMI_EOF && A2DP_IsLinkFollower(airLink))
 2742   1          return KEY_INVALID;
 2743   1      #endif
 2744   1        return keyCode;
 2745   1      }
 2746          
 2747          PRIVATE U16 MMI_DRV_CheckKeyMuteOnOff(U16 keyCode)
 2748          {
 2749   1        switch(DRIVER_CurrentPlayingMediaID())
 2750   1        {
 2751   2          case MEDIA_EVT_KEY_MIC_MUTE_ON:
 2752   2          case MEDIA_EVT_KEY_MIC_MUTE_OFF:
 2753   2            return KEY_INVALID;
 2754   2          default:
 2755   2            return keyCode;
 2756   2        }
 2757   1      }
 2758          
 2759          PRIVATE U16 MMI_DRV_CheckKeySCOSwitch(U16 keyCode)
 2760          {
 2761   1        if(gMMI_ctl.scoCnt != MAX_MULTI_POINT_NO || MMI_DRV_IsSwitchingSCO())
 2762   1        {
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 44  

 2763   2          return KEY_INVALID;
 2764   2        }
 2765   1        return keyCode;
 2766   1      }
 2767          
 2768          PRIVATE U16 MMI_DRV_CheckKeyUnderA2DP(U16 keyCode)
 2769          {
 2770   1        if(gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_MUSIC || gMMI_ctl.audioDevCtl.currentActiveDev 
             -== AUDIO_DEVICE_AVRCP_PLAY)
 2771   1        {
 2772   2          return KEY_INVALID;
 2773   2        }
 2774   1        return keyCode;
 2775   1      }
 2776          
 2777          PRIVATE U16 MMI_DRV_CheckKeyAudioTransparency(U16 keyCode)
 2778          {
 2779   1        if(!DRIVER_CheckAudioTransparencyReady())
 2780   1          keyCode =(U16) KEY_INVALID;
 2781   1        return keyCode;
 2782   1      }
 2783          
 2784          PRIVATE void MMI_StopA2DPOrSCOCmd(U8 linkIndex, U8 isPowerOff)
 2785          {
 2786   1        MMIMsgType XDATA_PTR msgPtr;
 2787   1      
 2788   1        if(isPowerOff)
 2789   1          msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_STOP_DSP_POWER_OFF_CMD);
 2790   1        else
 2791   1          msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_STOP_DSP_CMD);
 2792   1      
 2793   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 2794   1        {
 2795   2          DRIVER_ClearEnableSCODSPCmd(linkIndex);
 2796   2          DRIVER_ClearEnableA2DPDSPCmd(linkIndex);
 2797   2      
 2798   2          msgPtr->msgBodyPtr.driverCmd.stopDSPCmd.linkInd = linkIndex;
 2799   2          if(isPowerOff)
 2800   2            OSMQ_PutFront(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 2801   2          else
 2802   2            OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 2803   2      
 2804   2          #ifdef AIR_MODULE
 2805   2          MMI_AIR_DriverSendA2DPDSPDisableCmd(linkIndex);
 2806   2          #endif
 2807   2          // To accelerate the speed of open DSP
 2808   2          SYS_InsertOSTask(DRIVER_TASK);
 2809   2          SYS_InsertOSTask(MMI_TASK);
 2810   2      
 2811   2          if(!isPowerOff)
 2812   2            MMI_HCI_SendVCmdAudioQosSetup(linkIndex, SERVICE_TYPE_BEST_EFFORT, FALSE, FALSE);
 2813   2      
 2814   2          #ifdef DBG_UART_ENABLE_MMI
                   LightDbgPrint("MMI - Send STOPDSP:%d", (U8)linkIndex);
                   #endif
 2817   2        }
 2818   1      }
 2819          
 2820          PRIVATE void MMI_DRV_SetSCOPara(U8 linkIndex, MMIMsgType XDATA_PTR msgPtr)
 2821          {
 2822   1        msgPtr->msgBodyPtr.driverCmd.scoCmd.linkInd = linkIndex;
 2823   1        msgPtr->msgBodyPtr.driverCmd.scoCmd.m2d_ctl.para.mono_para.sco_type = gMMI_ctl.mmiInfo[linkIndex].linkPa
             -ra.scoType;
 2824   1        msgPtr->msgBodyPtr.driverCmd.scoCmd.m2d_ctl.para.mono_para.pkt_type = gMMI_ctl.mmiInfo[linkIndex].linkPa
             -ra.scoPktType;
 2825   1        msgPtr->msgBodyPtr.driverCmd.scoCmd.m2d_ctl.para.mono_para.sco_interval = gMMI_ctl.mmiInfo[linkIndex].li
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 45  

             -nkPara.txInterval;
 2826   1        msgPtr->msgBodyPtr.driverCmd.scoCmd.m2d_ctl.para.mono_para.codec_type = gMMI_ctl.mmiInfo[linkIndex].link
             -Para.scoCodecType;
 2827   1        msgPtr->msgBodyPtr.driverCmd.scoCmd.m2d_ctl.para.mono_para.pkt_length = gMMI_ctl.mmiInfo[linkIndex].link
             -Para.rxPacketLen;
 2828   1        #ifdef AIR_MODULE
 2829   1        msgPtr->msgBodyPtr.driverCmd.scoCmd.m2d_ctl.para.mono_para.feature_sel.WOOFER_LPF_ENABLE = MMI_AIR_IsEna
             -bleLPFUnderSCO(linkIndex);
 2830   1        if(msgPtr->msgBodyPtr.driverCmd.scoCmd.m2d_ctl.para.mono_para.feature_sel.WOOFER_LPF_ENABLE)
 2831   1        {
 2832   2          msgPtr->msgBodyPtr.driverCmd.scoCmd.m2d_ctl.para.mono_para.feature_sel.LPF_CUTOFF_FREQ_SEL = (U16)gMMI_
             -nvram.airPara.LPFCutFreq;
 2833   2          msgPtr->msgBodyPtr.driverCmd.scoCmd.m2d_ctl.para.mono_para.feature_sel.PCM_FS_SEL = gMMI_Air_ctl.SCOAud
             -ioFSSel;
 2834   2        }
 2835   1      
 2836   1        msgPtr->msgBodyPtr.driverCmd.scoCmd.m2d_ctl.para.mono_para.feature_sel.PAYLOAD_ENCODE = MMI_AIR_IsSCOEnc
             -odePayload(linkIndex);
 2837   1        #else
                 msgPtr->msgBodyPtr.driverCmd.scoCmd.m2d_ctl.para.mono_para.feature_sel.WOOFER_LPF_ENABLE = 0;
                 #endif
 2840   1      }
 2841          
 2842          PRIVATE void MMI_SendSCOEnableCmd(U8 linkIndex)
 2843          {
 2844   1        MMIMsgType XDATA_PTR msgPtr;
 2845   1      
 2846   1        #ifdef AIR_MODULE
 2847   1        if(gMMI_Air_ctl.SCOAudioFSSel == 0xFF)
 2848   1          return;
 2849   1        #endif
 2850   1      
 2851   1        if((msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_SCO_CMD)) != (MMIMsgType XDATA_PTR)NULL)
 2852   1        {
 2853   2          MMI_DRV_SetSCOPara(linkIndex, msgPtr);
 2854   2      
 2855   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 2856   2          #ifdef DBG_UART_ENABLE_MMI
                   LightDbgPrint("USR - Send SCOEnable:%d", (U8)linkIndex);
                   #endif
 2859   2        }
 2860   1      }
 2861          
 2862          PUBLIC void MMI_SendDSPCmd(U8 linkIndex, U8 dspEnableType)
 2863          {
 2864   1        switch(dspEnableType)
 2865   1        {
 2866   2          case DSP_DISABLED:
 2867   2            MMI_StopA2DPOrSCOCmd(linkIndex, FALSE);
 2868   2            break;
 2869   2          case DSP_ENABLE_BY_SCO:
 2870   2            MMI_SendSCOEnableCmd(linkIndex);
 2871   2            break;
 2872   2          case DSP_DISABLE_BY_POWER_OFF:
 2873   2            MMI_StopA2DPOrSCOCmd(linkIndex, TRUE);
 2874   2            break;
 2875   2        }
 2876   1      }
 2877          
 2878          PUBLIC MMIMsgType XDATA_PTR MMI_GetMMIMsgTypeCmdMemory(U8 opCode)
 2879          {
 2880   1        MMIMsgType XDATA_PTR msgPtr;
 2881   1      
 2882   1        msgPtr = (MMIMsgType XDATA_PTR)OSMEM_Get(OSMEM_ptr1);
 2883   1      
 2884   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 46  

 2885   1        {
 2886   2          OSMEM_memset_xdata((U8 XDATA_PTR)msgPtr, 0, OSMEM1_BLKSIZE);
 2887   2      
 2888   2          msgPtr->msgOpcode = opCode;
 2889   2        }
 2890   1        return msgPtr;
 2891   1      }
 2892          
 2893          PUBLIC void MMI_DRV_Beep(U8 soundLevel, U8 device)
 2894          {
 2895   1        //Modified by Eric Chou, 2010.7.23
 2896   1        //If beepTone is 0xFF, do not play.
 2897   1        U8 beepTone;
 2898   1      
 2899   1        if(device == AUDIO_DEVICE_MUSIC)
 2900   1        {
 2901   2          if(soundLevel)
 2902   2            soundLevel--;
 2903   2      
 2904   2          beepTone = gMMI_nvram.musicSoundLevels[soundLevel].beepTone;
 2905   2        }
 2906   1        else if(device == AUDIO_DEVICE_LINE_IN)
 2907   1        {
 2908   2          if(soundLevel)
 2909   2            soundLevel--;
 2910   2      
 2911   2          beepTone = gMMI_nvram.lineInSoundLevels[soundLevel].beepTone;
 2912   2        }
 2913   1        else
 2914   1        {
 2915   2          beepTone = gMMI_nvram.soundLevels[soundLevel].beepTone;
 2916   2        }
 2917   1      
 2918   1        if (beepTone != INVALID_BEEP_PATTERN)
 2919   1        {
 2920   2          MMI_DRV_SendRingtoneCmd( MEDIA_EVT_KEY_VOICEUP , beepTone);
 2921   2        }
 2922   1      }
 2923          
 2924          PUBLIC void MMI_DRV_MaxMinVolumeLog(U16 mediaID)
 2925          {
 2926   1        switch(mediaID)
 2927   1        {
 2928   2          case MEDIA_EVT_VOLUME_REACH_MAX:
 2929   2            LightDbgPrint("SCO volume max media event playing");
 2930   2              break;
 2931   2          case MEDIA_EVT_VOLUME_REACH_MIN:
 2932   2            LightDbgPrint("SCO volume min media event playing");
 2933   2              break;
 2934   2          case MEDIA_EVT_A2DP_VOLUME_REACH_MAX:
 2935   2            LightDbgPrint("A2DP volume max media event playing");
 2936   2              break;
 2937   2          case MEDIA_EVT_A2DP_VOLUME_REACH_MIN:
 2938   2            LightDbgPrint("A2DP volume min media event playing");
 2939   2              break;
 2940   2          case MEDIA_EVT_LINEIN_VOLUME_REACH_MAX:
 2941   2            LightDbgPrint("Line-in volume max media event playing");
 2942   2              break;
 2943   2          case MEDIA_EVT_LINEIN_VOLUME_REACH_MIN:
 2944   2            LightDbgPrint("Line-in volume min media event playing");
 2945   2              break;
 2946   2          case MEDIA_EVT_FM_VOLUME_REACH_MAX:
 2947   2            LightDbgPrint("FM volume max media event playing");
 2948   2              break;
 2949   2          case MEDIA_EVT_FM_VOLUME_REACH_MIN:
 2950   2            LightDbgPrint("FM volume min media event playing");
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 47  

 2951   2              break;
 2952   2          default:
 2953   2            break;
 2954   2        }
 2955   1      }
 2956          
 2957          PUBLIC BOOL MMI_DRV_IsVolMaxMinMediaPlaying(void)
 2958          {
 2959   1        U16 mediaID;
 2960   1      
 2961   1        mediaID = DRIVER_CurrentPlayingMediaID();
 2962   1        MMI_DRV_MaxMinVolumeLog(mediaID);
 2963   1      
 2964   1        switch(mediaID)
 2965   1        {
 2966   2          case MEDIA_EVT_VOLUME_REACH_MAX:
 2967   2          case MEDIA_EVT_VOLUME_REACH_MIN:
 2968   2          case MEDIA_EVT_A2DP_VOLUME_REACH_MAX:
 2969   2          case MEDIA_EVT_A2DP_VOLUME_REACH_MIN:
 2970   2          case MEDIA_EVT_LINEIN_VOLUME_REACH_MAX:
 2971   2          case MEDIA_EVT_LINEIN_VOLUME_REACH_MIN:
 2972   2          case MEDIA_EVT_FM_VOLUME_REACH_MAX:
 2973   2          case MEDIA_EVT_FM_VOLUME_REACH_MIN:
 2974   2            return TRUE;
 2975   2          default:
 2976   2            return FALSE;
 2977   2        }
 2978   1      }
 2979          
 2980          PUBLIC void MMI_DRV_MediaEventSendFakeCmd(U16 mediaEventIndex)
 2981          {
 2982   1        #ifdef SUPPORT_VOICE_COMMAND
 2983   1        U8 i;
 2984   1        #endif
 2985   1        if(   MMI_CheckValidPowerOffMediaEvt(mediaEventIndex) ||
 2986   1          mediaEventIndex == MEDIA_EVT_KEY_FM_POWERON || mediaEventIndex == MEDIA_EVT_KEY_ENTER_LINEIN_MODE ||med
             -iaEventIndex == MEDIA_EVT_FM_ENABLE||
 2987   1          mediaEventIndex == MEDIA_EVT_KEY_RDIAL ||mediaEventIndex == MEDIA_EVT_KEY_RDIAL_SECONDARY ||
 2988   1          mediaEventIndex == MEDIA_EVT_KEY_SET_VOICE_RECOGNITION ||mediaEventIndex == MEDIA_EVT_KEY_SET_VOICE_REC
             -OGNITION_SECONDARY ||
 2989   1          mediaEventIndex == MEDIA_EVT_KEY_SET_VOICE_RECOGNITION_CANCEL||mediaEventIndex == MEDIA_EVT_KEY_SET_VOI
             -CE_RECOGNITION_SECONDARY_CANCEL||
 2990   1          mediaEventIndex == MEDIA_EVT_KEY_SEEKUP ||mediaEventIndex == MEDIA_EVT_KEY_SEEKDOWN || mediaEventIndex 
             -== MEDIA_EVT_KEY_TUNEUP || mediaEventIndex == MEDIA_EVT_KEY_TUNEDN||
 2991   1          mediaEventIndex == MEDIA_EVT_FM_MUTE_OFF ||mediaEventIndex == MEDIA_EVT_FM_MUTE_ON |
 2992   1          mediaEventIndex == MEDIA_EVT_MUTE_ON || mediaEventIndex == MEDIA_EVT_MUTE_OFF || mediaEventIndex == MED
             -IA_EVT_ENTER_LINE_IN_MODE ||
 2993   1          mediaEventIndex == MEDIA_EVT_KEY_SIRI_START_OR_CONTINUE || mediaEventIndex == MEDIA_EVT_KEY_SIRI_END ||
 2994   1          mediaEventIndex == MEDIA_EVT_KEY_SIRI_START_OR_CONTINUE_SECONDARY|| mediaEventIndex == MEDIA_EVT_KEY_SI
             -RI_END_SECONDARY ||
 2995   1          mediaEventIndex == MEDIA_EVT_TWS_RIGHT_CHANNEL || mediaEventIndex == MEDIA_EVT_TWS_LEFT_CHANNEL ||
 2996   1          mediaEventIndex == MEDIA_EVT_KEY_VOICE_PROMPT_ENABLE || mediaEventIndex == MEDIA_EVT_KEY_VOICE_PROMPT_D
             -ISABLE || mediaEventIndex == MEDIA_EVT_VOICE_PROMPT_LANG_CHANGE||
 2997   1          mediaEventIndex == MEDIA_EVT_KEY_FIND_MY_ACCESSORY ||
 2998   1          mediaEventIndex == MEDIA_EVT_KEY_MIC_MUTE_ON || mediaEventIndex == MEDIA_EVT_KEY_MIC_MUTE_OFF ||
 2999   1          mediaEventIndex == MEDIA_EVT_KEY_WHAT_CAN_I_SAY ||
 3000   1          mediaEventIndex == MEDIA_EVT_ENTER_INCOMING || mediaEventIndex == MEDIA_EVT_RINGTONE_IN_CALL || mediaEv
             -entIndex == MEDIA_EVT_RINGTONE || mediaEventIndex == MEDIA_EVT_RINGTONE2_IN_CALL ||
 3001   1          mediaEventIndex == MEDIA_EVT_RINGTONE_2 || mediaEventIndex == MEDIA_EVT_KEY_CONTROL_DBB_ON_OFF || media
             -EventIndex == MEDIA_EVT_KEY_CHANGE_SOUND_EFFECT)
 3002   1        {
 3003   2          MMI_DRV_SendFakeMediaCmd(mediaEventIndex);
 3004   2        }
 3005   1        else if(mediaEventIndex == MEDIA_EVT_KEY_RESET_PAIRED_DEVICES)
 3006   1        {
 3007   2          gMMI_ctl.driverCtl.resetPairedDeviceMediaCount++;
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 48  

 3008   2          MMI_DRV_SendFakeMediaCmd(mediaEventIndex);
 3009   2        }
 3010   1        #ifdef SUPPORT_VOICE_COMMAND
 3011   1        else
 3012   1        {
 3013   2      
 3014   2          for(i = 0; i < TOTAL_VOICE_COMMAND_EVENTS; i++)
 3015   2          {
 3016   3            if(mediaEventIndex == ((DRIVER_VOICE_COMMAND_DATA_TYPE CODE_PTR)GET_SECTOR_VOICE_DATA_ADDR(SECTOR_VOIC
             -E_COMMAND_DATA))->vcEventTable[i].mediaEvent)
 3017   3            {
 3018   4              if(!MMI_AllLinksInCallActiveState())  //voice command is invalid under callactive
 3019   4              {
 3020   5                MMI_DRV_SendFakeMediaCmd(mediaEventIndex);
 3021   5              }
 3022   4              break;
 3023   4            }
 3024   3          }
 3025   2        }
 3026   1        #endif
 3027   1      }
 3028          
 3029          PUBLIC void MMI_RingtoneVoicePromptScheduler(U16 mediaEventIndex, U8 beepPattern, U8 voicePromptIndex, U8
             - is_voice_prompt_before_ringtone)
 3030          {
 3031   1        #ifdef SUPPORT_VOICE_PROMPT
 3032   1        if (!MMI_PlayVoicePromptIsAvailable(mediaEventIndex))
 3033   1          voicePromptIndex = VOICE_PROMPT_INVALID;
 3034   1      
 3035   1        if(MMI_VP_RINGTONE_1OF2_FEAT)
 3036   1        {
 3037   2          if(voicePromptIndex != VOICE_PROMPT_INVALID)
 3038   2            beepPattern = INVALID_BEEP_PATTERN;
 3039   2        }
 3040   1        else if(gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled&IS_RINGTONE_DISABLED)
 3041   1          beepPattern = INVALID_BEEP_PATTERN;
 3042   1      
 3043   1        if(voicePromptIndex == VOICE_PROMPT_INVALID  && beepPattern == INVALID_BEEP_PATTERN)
 3044   1          goto MASK_SETTING_PROCESS;
 3045   1      
 3046   1        if(voicePromptIndex & RINGTONE_OVERRIDE_BIT)
 3047   1        {
 3048   2          voicePromptIndex &= 0x7F;
 3049   2          MMI_DRV_SendRingtoneStopCmd();
 3050   2          MMI_DRV_SendVoicepromptStopCmd();
 3051   2        }
 3052   1      
 3053   1        if(is_voice_prompt_before_ringtone  && voicePromptIndex != VOICE_PROMPT_INVALID)
 3054   1        {
 3055   2          MMI_DRV_SendVoicePromptCmd(mediaEventIndex, voicePromptIndex);
 3056   2        }
 3057   1        #else
                 UNUSED(voicePromptIndex);
                 UNUSED(is_voice_prompt_before_ringtone);
                 if(gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled&IS_RINGTONE_DISABLED || beepPattern == INVAL
             -ID_BEEP_PATTERN)
                   goto MASK_SETTING_PROCESS;
                 #endif
 3063   1      
 3064   1        if (beepPattern != INVALID_BEEP_PATTERN)
 3065   1        {
 3066   2          MMI_DRV_SendRingtoneCmd(mediaEventIndex, beepPattern);
 3067   2        }
 3068   1        #ifdef SUPPORT_VOICE_PROMPT
 3069   1        if(!is_voice_prompt_before_ringtone  && voicePromptIndex != VOICE_PROMPT_INVALID)
 3070   1        {
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 49  

 3071   2          MMI_DRV_SendVoicePromptCmd(mediaEventIndex, voicePromptIndex);
 3072   2        }
 3073   1        #endif
 3074   1      
 3075   1        MASK_SETTING_PROCESS:
 3076   1      
 3077   1        if(mediaEventIndex == MEDIA_EVT_EXIT_DISCOVERABLE)
 3078   1        {
 3079   2          MMI_DRV_SpecificEventRingtoneStopCmd(MEDIA_EVT_ENTER_DISCOVERABLE);
 3080   2          MMI_DRV_SpecificEventVPStopCmd(MEDIA_EVT_ENTER_DISCOVERABLE);
 3081   2        }
 3082   1        else if(mediaEventIndex == MEDIA_EVT_EXIT_LINE_IN_MODE)
 3083   1        {
 3084   2          MMI_DRV_SpecificEventRingtoneStopCmd(MEDIA_EVT_ENTER_LINE_IN_MODE);
 3085   2          MMI_DRV_SpecificEventVPStopCmd(MEDIA_EVT_ENTER_LINE_IN_MODE);
 3086   2        }
 3087   1        #ifdef SUPPORT_VOICE_PROMPT
 3088   1        else if(mediaEventIndex == MEDIA_EVT_KEY_TEST_VOICE_PROMPT_PLAY)
 3089   1        {
 3090   2          if(voicePromptIndex == VP_EVT_CALLER_ID)
 3091   2          {
 3092   3            MMI_TestVoicePrompt_CallNumber();
 3093   3          }
 3094   2          else if(voicePromptIndex == VP_EVT_FM_CHANNEL_NUMBER)
 3095   2          {
 3096   3            #ifdef FM_ENABLE
 3097   3            MMI_FM_SendChannelVoicePromptCmd(1023);
 3098   3            #endif
 3099   3          }
 3100   2          else
 3101   2            ;
 3102   2        }
 3103   1        #endif
 3104   1      
 3105   1      
 3106   1      }
 3107          
 3108          PUBLIC BOOL MMI_CheckValidPowerOffMediaEvt(U16 mediaEventIndex)
 3109          {
 3110   1        if( mediaEventIndex == MEDIA_EVT_KEY_POWER_OFF  ||  mediaEventIndex == MEDIA_EVT_POWER_OFF ||
 3111   1          mediaEventIndex == MEDIA_EVT_POWER_OFF_IN_SHUTDOWN_LOW_BAT ||mediaEventIndex == MEDIA_EVT_OFF_STATE ||
 3112   1          mediaEventIndex == MEDIA_EVT_POWER_OFF_UNDER_CHECKPOINT1 ||mediaEventIndex == MEDIA_EVT_POWER_OFF_UNDER
             -_CHECKPOINT2 ||
 3113   1          mediaEventIndex == MEDIA_EVT_POWER_OFF_UNDER_CHECKPOINT3)
 3114   1          return TRUE;
 3115   1      
 3116   1        return FALSE;
 3117   1      }
 3118          
 3119          PUBLIC BOOL MMI_PlayVoicePromptIsAvailable(U16 mediaEventIndex)
 3120          {
 3121   1        if( !MMI_DRV_IsVoicePromptEnabled() &&
 3122   1          mediaEventIndex != MEDIA_EVT_KEY_VOICE_PROMPT_DISABLE &&
 3123   1          mediaEventIndex != MEDIA_EVT_KEY_VOICE_PROMPT_ENABLE &&
 3124   1          mediaEventIndex != MEDIA_EVT_VOICE_PROMPT_LANG_CHANGE &&
 3125   1          mediaEventIndex != MEDIA_EVT_VOICE_PROMPT_LANG_SELECT &&
 3126   1          mediaEventIndex != MEDIA_EVT_VOICE_PROMPT_LANG_CONFIRM)
 3127   1          return FALSE;
 3128   1      
 3129   1        if( !MMI_CheckValidPowerOffMediaEvt(mediaEventIndex))
 3130   1        {
 3131   2          if(MMI_DISCARD_VP_WHEN_IN_CALLWITHSCO_FEAT)
 3132   2          {
 3133   3            if(gMMI_ctl.scoCnt && MMI_AllLinksInCallRelatedState())
 3134   3            {
 3135   4              return FALSE;
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 50  

 3136   4            }
 3137   3          }
 3138   2      
 3139   2          if(MMI_DISCARD_VP_WHEN_IN_MUSIC_FEAT)
 3140   2          {
 3141   3            #ifdef A2DP_Profile
 3142   3            if(MMI_CheckAllLinksInA2DPState())
 3143   3              return FALSE;
 3144   3            #endif
 3145   3          }
 3146   2        }
 3147   1        return TRUE;
 3148   1      }
 3149          
 3150          //----------------------------------------------------
 3151          //---------------- Volume Control ----------------------
 3152          //----------------------------------------------------
 3153          
 3154          PRIVATE void MMI_IdleStateVoiceControl(BOOL isVolumeUp, BOOL isFollowerCmd)
 3155          {
 3156   1        U8 XDATA_PTR spkSoundLevelPtr;
 3157   1      
 3158   1        #ifdef AIR_MODULE
 3159   1        if(MMI_AIR_IdleKeyVolUpDnFirst(isVolumeUp))
 3160   1          return;
 3161   1        #endif
 3162   1      
 3163   1        spkSoundLevelPtr  = &gMMI_ctl.idleStateSoundLevel;
 3164   1        if(!gMMI_ctl.isAudioTransparencyEnable)
 3165   1        {
 3166   2          if (isVolumeUp)
 3167   2          {
 3168   3            gMMI_ctl.idleStateSmallStep = MMI_DRV_IncreaseSmallStepVolume(  gMMI_ctl.idleStateSoundLevel,
 3169   3                                            gMMI_nvram.totalSoundLevel,
 3170   3                                            MMI_SCO_SMALL_STEP_LEVELS(),
 3171   3                                            gMMI_ctl.idleStateSmallStep);
 3172   3      
 3173   3            if(gMMI_ctl.idleStateSmallStep == 0)
 3174   3            {
 3175   4              if (*spkSoundLevelPtr < gMMI_nvram.totalSoundLevel - 1)
 3176   4              {
 3177   5                (*spkSoundLevelPtr)++;
 3178   5              }
 3179   4              else if(MMI_CYCLIC_VOLUME_ENABLED_FEAT)
 3180   4              {
 3181   5                (*spkSoundLevelPtr) = 0;
 3182   5              }
 3183   4              else
 3184   4              {
 3185   5                MMI_PushMediaEvent(MEDIA_EVT_VOLUME_REACH_MAX);
 3186   5                return;
 3187   5              }
 3188   4            }
 3189   3          }
 3190   2          else
 3191   2          {
 3192   3            if(gMMI_ctl.idleStateSmallStep == 0)
 3193   3            {
 3194   4              if (*spkSoundLevelPtr > 0)
 3195   4              {
 3196   5                (*spkSoundLevelPtr)--;
 3197   5              }
 3198   4              else if(MMI_CYCLIC_VOLUME_ENABLED_FEAT)
 3199   4              {
 3200   5                *spkSoundLevelPtr = gMMI_nvram.totalSoundLevel - 1;
 3201   5                goto MMI_SEND_IDLE_VOL;
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 51  

 3202   5              }
 3203   4              else
 3204   4              {
 3205   5                MMI_PushMediaEvent(MEDIA_EVT_VOLUME_REACH_MIN);
 3206   5                return;
 3207   5              }
 3208   4            }
 3209   3            gMMI_ctl.idleStateSmallStep = MMI_DRV_DecreaseSmallStepVolume(MMI_SCO_SMALL_STEP_LEVELS(), gMMI_ctl.id
             -leStateSmallStep);
 3210   3          }
 3211   2          MMI_SEND_IDLE_VOL:
 3212   2          //Notify driver
 3213   2          MMI_DRV_SendDriverVolCmd(MMI_EOF, *spkSoundLevelPtr, gMMI_ctl.idleStateSmallStep, VOLUME_MIC_FOLLOW_SPK
             -);
 3214   2      
 3215   2          //Adjust ringtone volume as well
 3216   2          //Beep!
 3217   2          if(!isFollowerCmd)
 3218   2            MMI_DRV_Beep(*spkSoundLevelPtr, AUDIO_DEVICE_SCO);
 3219   2      
 3220   2          #ifdef AIR_MODULE
 3221   2          MMI_AIR_IdleKeyVolUpDnLast(isVolumeUp);
 3222   2          #endif
 3223   2        }
 3224   1        else
 3225   1        {
 3226   2          #if defined LINEIN_ENABLE && defined SUPPORT_MIC_IN_A2DP_MODE
 3227   2          MMI_LineIn_VolumeControl(isVolumeUp);
 3228   2          return;
 3229   2          #endif
 3230   2        }
 3231   1      }
 3232          
 3233          PUBLIC void MMI_DRV_VoiceAdjustment(U8 linkIndex, U16 keyCode, BOOL isFollowerCmd)
 3234          {
 3235   1        BOOL isVolumeUp;
 3236   1      
 3237   1        #if !defined(HFP_Profile) && !defined(A2DP_Profile)
                 UNUSED(linkIndex);
                 #endif
 3240   1        if(MMI_DRV_IsVolMaxMinMediaPlaying())
 3241   1          return;
 3242   1        isVolumeUp = (keyCode == KEY_VOICEUP) ? TRUE : FALSE;
 3243   1      
 3244   1        isVolumeUp  = (gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled & IS_VOLUME_ORIENTATION_REVERSED)
             - ? !isVolumeUp : isVolumeUp;
 3245   1      
 3246   1        //1. record new audio device
 3247   1        switch(gMMI_ctl.audioDevCtl.currentActiveDev)
 3248   1        {
 3249   2          case AUDIO_DEVICE_SCO:
 3250   2          case AUDIO_DEVICE_SCO_HSP:
 3251   2          case AUDIO_DEVICE_SCO_IDLE:
 3252   2          case AUDIO_DEVICE_KEY_AT_CMD:
 3253   2            if(isFollowerCmd)
 3254   2              linkIndex = MMI_GetNextNormalLink(linkIndex);
 3255   2            #ifdef HFP_Profile
 3256   2            if(MMI_HFP_IsConnected(linkIndex))
 3257   2            {
 3258   3              if (!gMMI_ctl.mmiInfo[linkIndex].linkPara.isMicMute)
 3259   3              {
 3260   4                MMI_HFP_VoiceControl(linkIndex, isVolumeUp, isFollowerCmd);
 3261   4              }
 3262   3              else if (MMI_MUTE_CANCEL_WHEN_VOL_CHANGE_FEAT)
 3263   3              {
 3264   4                MMI_DRV_AutoMICMuteOff(linkIndex);
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 52  

 3265   4                MMI_HFP_VoiceControl(linkIndex, isVolumeUp, isFollowerCmd);
 3266   4              }
 3267   3              else if (MMI_ALLOW_VOL_ADJUST_WHEN_MUTED_FEAT )
 3268   3              {
 3269   4                MMI_HFP_VoiceControl(linkIndex, isVolumeUp, isFollowerCmd);
 3270   4              }
 3271   3            }
 3272   2            else
 3273   2            #endif
 3274   2            {
 3275   3              MMI_IdleStateVoiceControl(isVolumeUp, isFollowerCmd);
 3276   3            }
 3277   2            #ifndef HFP_Profile
                     UNUSED(linkIndex);
                     #endif
 3280   2            break;
 3281   2          case AUDIO_DEVICE_MUSIC:
 3282   2          case AUDIO_DEVICE_MUSIC_CALL_NOTIFY:
 3283   2          case AUDIO_DEVICE_AVRCP_PLAY:
 3284   2            #ifdef A2DP_Profile
 3285   2            if(isFollowerCmd)
 3286   2              linkIndex = MMI_GetNextNormalLink(linkIndex);
 3287   2            MMI_A2DP_VolumeControl(linkIndex, isVolumeUp, isFollowerCmd);
 3288   2            #endif
 3289   2            #ifdef LINEIN_ENABLE
 3290   2            if(gMMI_ctl.isAudioTransparencyEnable)
 3291   2            {
 3292   3              MMI_LineIn_VolumeControl(isVolumeUp);
 3293   3            }
 3294   2            #endif
 3295   2            break;
 3296   2          case AUDIO_DEVICE_LINE_IN:
 3297   2          case AUDIO_DEVICE_MIC_TO_SPK:
 3298   2            #ifdef LINEIN_ENABLE
 3299   2            MMI_LineIn_VolumeControl(isVolumeUp);
 3300   2            #endif
 3301   2            break;
 3302   2          case AUDIO_DEVICE_FM:
 3303   2            #ifdef FM_ENABLE
 3304   2            MMI_FM_VolumeControl(isVolumeUp);
 3305   2            #endif
 3306   2            break;
 3307   2          #ifdef DEMOSOUND
                   case AUDIO_DEVICE_DEMO_SOUND:
                     MMI_A2DP_DemoSoundVolumeControl(isVolumeUp);
                     break;
                   #endif
 3312   2          default:
 3313   2            MMI_IdleStateVoiceControl(isVolumeUp, isFollowerCmd);
 3314   2            break;
 3315   2        }
 3316   1      }
 3317          
 3318          PUBLIC U8 MMI_DRV_IncreaseSmallStepVolume(U8 spkSoundLevel, U8 spkSoundLevelTotalNo, U8 smallStepAnchorCn
             -t, U8 smallStep)
 3319          {
 3320   1        if(smallStepAnchorCnt)
 3321   1        {
 3322   2          if(spkSoundLevel < (spkSoundLevelTotalNo -1))
 3323   2          {
 3324   3            smallStep++;
 3325   3            if(smallStep == (smallStepAnchorCnt+1))
 3326   3              smallStep = 0;
 3327   3          }
 3328   2          else
 3329   2            smallStep = 0;
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 53  

 3330   2        }
 3331   1        return smallStep;
 3332   1      }
 3333          
 3334          PUBLIC U8 MMI_DRV_DecreaseSmallStepVolume(U8 smallStepAnchorCnt, U8 smallStep)
 3335          {
 3336   1        if(smallStepAnchorCnt)
 3337   1        {
 3338   2          if(smallStep == 0)
 3339   2            smallStep = smallStepAnchorCnt;
 3340   2          else
 3341   2            smallStep--;
 3342   2        }
 3343   1        return smallStep;
 3344   1      }
 3345          
 3346          PUBLIC BOOL MMI_CheckSCOInAudioService(U8 linkIndex)
 3347          {
 3348   1        if(MMI_CheckInFMState() ||MMI_CheckInLineInState() || linkIndex != gMMI_ctl.audioableSCOLink || !SCO_EXI
             -STS(linkIndex))
 3349   1          return FALSE;
 3350   1        else
 3351   1          return TRUE;
 3352   1      }
 3353          
 3354          
 3355          PUBLIC U8 MMI_SearchSoundLevelByVgs(U8 vgsValue)
 3356          {
 3357   1        U8 ind;
 3358   1        U8 soundLevel = gMMI_nvram.totalSoundLevel - 1;
 3359   1      
 3360   1        for (ind = 0; ind < gMMI_nvram.totalSoundLevel; ind++)
 3361   1        {
 3362   2          if (GET_SCO_VGS_BY_LEVEL(ind) >= vgsValue)
 3363   2          {
 3364   3            soundLevel = ind;
 3365   3            break;
 3366   3          }
 3367   2        }
 3368   1      
 3369   1        return soundLevel;
 3370   1      }
 3371          
 3372          PUBLIC U8 MMI_GetSCOGainByLevel(U8 level, BOOL isSpk)
 3373          {
 3374   1        if(isSpk)
 3375   1          return gMMI_nvram.vgsTable[gMMI_nvram.soundLevels[level].vgs].spkGainSetIndex;
 3376   1        else
 3377   1          return gMMI_nvram.vgsTable[gMMI_nvram.soundLevels[level].vgs].micGainSetIndex;
 3378   1      }
 3379          
 3380          PUBLIC U8 MMI_GetA2DPGainByLevel(U8 level, BOOL isSpk)
 3381          {
 3382   1        if(isSpk)
 3383   1          return gMMI_nvram.vgsTable[gMMI_nvram.musicSoundLevels[level].vgs].spkGainSetIndex;
 3384   1        else
 3385   1          return gMMI_nvram.vgsTable[gMMI_nvram.musicSoundLevels[level].vgs].micGainSetIndex;
 3386   1      }
 3387          
 3388          PUBLIC U8 MMI_GetLineInGainByLevel(U8 level, BOOL isSpk)
 3389          {
 3390   1        if(isSpk)
 3391   1          return gMMI_nvram.vgsTable[gMMI_nvram.lineInSoundLevels[level].vgs].spkGainSetIndex;
 3392   1        else
 3393   1          return gMMI_nvram.vgsTable[gMMI_nvram.lineInSoundLevels[level].vgs].micGainSetIndex;
 3394   1      }
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 54  

 3395          
 3396          PUBLIC void MMI_NotifyDriverBatteryStatus( U8 batStatus)
 3397          {
 3398   1        MMIMsgType XDATA_PTR msgPtr;
 3399   1      
 3400   1        msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_BATTERY_STATUS_CMD);
 3401   1      
 3402   1        if(msgPtr)
 3403   1        {
 3404   2          msgPtr->msgBodyPtr.driverCmd.batStatusCmd.isLowBat = (U8)((batStatus==MMI_BAT_LOW)? TRUE: FALSE);
 3405   2          msgPtr->msgBodyPtr.driverCmd.batStatusCmd.isCharging= (U8)((batStatus >=MMI_BAT_CHARGER_IN)? TRUE: FALS
             -E);
 3406   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 3407   2        }
 3408   1      }
 3409          
 3410          PUBLIC void MMI_UartVolumeSet(HCI_VEVT_PARA_VOL_SET XDATA_PTR dataPtr)
 3411          {
 3412   1        U8 linkIndex = dataPtr->linkIndex;
 3413   1      
 3414   1        if(dataPtr->scoSoundLevel != VOLUME_DONT_CARE)
 3415   1        {
 3416   2          MMI_DRV_SetSCOVolValue(linkIndex, dataPtr->scoSoundLevel, dataPtr->scoSmallStep);
 3417   2        }
 3418   1        if(dataPtr->scoVgm != VOLUME_DONT_CARE)
 3419   1          CURRENT_SCO_VGM(linkIndex) = dataPtr->scoVgm;
 3420   1        #ifdef A2DP_Profile
 3421   1        if(dataPtr->a2dpSoundLevel != VOLUME_DONT_CARE)
 3422   1        {
 3423   2          MMI_A2DP_SetVolByLevel(linkIndex, dataPtr->a2dpSoundLevel, dataPtr->a2dpSmallStep);
 3424   2          #ifdef AVRCP_Profile
 3425   2          MMI_AVRCP_CmdGenerator(linkIndex, AVRCP_VOLUME_CHANGED, MMI_AVRCP_GetAbsVolByMusic(linkIndex));
 3426   2          #endif
 3427   2        }
 3428   1        #endif
 3429   1        if(dataPtr->lineInSoundLevel != VOLUME_DONT_CARE)
 3430   1        {
 3431   2          #ifdef LINEIN_ENABLE
 3432   2          MMI_LineIn_SetVolByLevel(dataPtr->lineInSoundLevel, dataPtr->lineInSmallStep);
 3433   2          #endif
 3434   2        }
 3435   1        #ifdef LINEIN_ENABLE
 3436   1        if(MMI_CheckInLineInState() && MMI_DRV_IsAudioActiveDev(MMI_EOF, AUDIO_DEVICE_LINE_IN))
 3437   1        {
 3438   2          MMI_LineIn_SendDriverVolCmd();
 3439   2          #ifdef AIR_MODULE
 3440   2          MMI_AIR_LineInUartSetVol();
 3441   2          #endif
 3442   2          return;
 3443   2        }
 3444   1        #endif
 3445   1      
 3446   1        #ifdef A2DP_Profile
 3447   1        if(A2DP_STREAMING == A2DP_GetState(linkIndex) && !A2DP_IsResume(linkIndex) && AUDIO_COMPONENT_IS_ACTIVE 
             -(AUDIO_A2DP))
 3448   1        {
 3449   2          MMI_A2DP_SendDriverVolCmd( CURRENT_A2DP_SOUND_LEVEL(linkIndex), CURRENT_A2DP_SMALL_STEP(linkIndex));
 3450   2        }
 3451   1        else
 3452   1        #endif
 3453   1        {
 3454   2          MMI_DRV_SendDriverVolCmd(linkIndex, CURRENT_SCO_SOUND_LEVEL(linkIndex), CURRENT_SCO_SMALL_STEP(linkInde
             -x), GET_SCO_MIC_GAIN_BY_LEVEL(CURRENT_SCO_SOUND_LEVEL(linkIndex)));
 3455   2        }
 3456   1      }
 3457          
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 55  

 3458          PUBLIC void MMI_DRV_AudioSelCmd(DriverAudioSelCmd XDATA_PTR audioSelPtr)
 3459          {
 3460   1        MMIMsgType XDATA_PTR msgPtr;
 3461   1      
 3462   1        if(msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_SET_AUDIO_SEL_CMD))
 3463   1        {
 3464   2          OSMEM_memcpy_xdata_xdata(  (U8 XDATA_PTR)&msgPtr->msgBodyPtr.driverCmd.audioSelectCmd, (U8 XDATA_PTR)au
             -dioSelPtr, sizeof(DriverAudioSelCmd));
 3465   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 3466   2        }
 3467   1      }
 3468          
 3469          #ifdef SUPPORT_VOICE_COMMAND
 3470          
 3471          PRIVATE void MMI_DRV_SetVoiceCommandTimer(U16 mediaEvent)
 3472          {
 3473   1        if (mediaEvent == MEDIA_EVT_KEY_VOICE_COMMAND_ENABLE)
 3474   1        {
 3475   2          SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.sysTimer.voiceCommandTriggerTimer, 80* 320L);
 3476   2        }
 3477   1      }
 3478          
 3479          PUBLIC void MMI_SetVoiceCommandVol(void)
 3480          {
 3481   1      
 3482   1        MMIMsgType XDATA_PTR msgPtr;
 3483   1      
 3484   1        msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_SET_VOICE_COMMAND_VOL_CMD);
 3485   1      
 3486   1        if(msgPtr)
 3487   1        {
 3488   2          msgPtr->msgBodyPtr.driverCmd.vcVolCmd.micVols = MMI_MIC_GAINSET[gMMI_nvram.defaultVCLevel].digitalGainV
             -C;
 3489   2          msgPtr->msgBodyPtr.driverCmd.vcVolCmd.analogAdGain_R = MMI_MIC_GAINSET[gMMI_nvram.defaultVCLevel].analo
             -gGainVC_R;
 3490   2          msgPtr->msgBodyPtr.driverCmd.vcVolCmd.analogAdGain_L = MMI_MIC_GAINSET[gMMI_nvram.defaultVCLevel].analo
             -gGainVC_L;
 3491   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 3492   2        }
 3493   1      }
 3494          #endif
 3495          
 3496          #ifdef PEQ_ENABLE
 3497          PUBLIC BOOL MMI_DRV_PEQModeChange(void)
 3498          {
 3499   1        MMIMsgType XDATA_PTR msgPtr;
 3500   1      
 3501   1        msgPtr = (MMIMsgType XDATA_PTR)OSMEM_Get(OSMEM_ptr1);
 3502   1      
 3503   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 3504   1        {
 3505   2          msgPtr->msgOpcode  = DRIVER_CHANGE_PEQ_CMD;
 3506   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 3507   2          return TRUE;
 3508   2        }
 3509   1        return FALSE;
 3510   1      
 3511   1      }
 3512          
 3513          PUBLIC void MMI_DRV_RealTimeSetPeqHpf(MMIMsgType XDATA_PTR msgPtr)
 3514          {
 3515   1        msgPtr->msgOpcode = DRIVER_REALTIME_SET_PEQ_HPF_CMD;
 3516   1        OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 3517   1      }
 3518          
 3519            #ifdef TWS_SETTINGS
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 56  

 3520            PUBLIC void MMI_DRV_SyncPEQRelayerToFollower(U8 peqMode, U8 peqModeIndex, U8 sectorMode)
 3521            {
 3522   1          U8 airLinkIndex;
 3523   1          if((airLinkIndex = MMI_AIR_GetAirLink(PRODUCT_AIR_TWS)) != MMI_EOF && A2DP_IsLinkRelayer(airLinkIndex))
 3524   1          {
 3525   2            MMI_AIR_SetPEQParaCmd(airLinkIndex, peqMode, peqModeIndex, sectorMode);
 3526   2          }
 3527   1        }
 3528          
 3529            PUBLIC void MMI_DRV_SetFollowerPEQParameter(U8 peqMode, U8 peqModeIndex, U8 sectorMode)
 3530            {
 3531   1          MMIMsgType XDATA_PTR msgPtr;
 3532   1      
 3533   1          msgPtr = (MMIMsgType XDATA_PTR)OSMEM_Get(OSMEM_ptr1);
 3534   1      
 3535   1          if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 3536   1          {
 3537   2            msgPtr->msgOpcode = DRIVER_SET_PEQ_PARA_CMD;
 3538   2            msgPtr->msgBodyPtr.hciVCmd.VPara.setPEQParaCmd.peqMode = peqMode;
 3539   2            msgPtr->msgBodyPtr.hciVCmd.VPara.setPEQParaCmd.peqModeIndex = peqModeIndex;
 3540   2            msgPtr->msgBodyPtr.hciVCmd.VPara.setPEQParaCmd.sectorMode = sectorMode;
 3541   2            OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 3542   2          }
 3543   1        }
 3544          
 3545            PUBLIC void MMI_DRV_FollowerPEQModeReload(void)
 3546            {
 3547   1          MMIMsgType XDATA_PTR msgPtr;
 3548   1      
 3549   1          msgPtr = (MMIMsgType XDATA_PTR)OSMEM_Get(OSMEM_ptr1);
 3550   1      
 3551   1          if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 3552   1          {
 3553   2            msgPtr->msgOpcode = DRIVER_PEQ_RELOAD_CMD;
 3554   2            OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 3555   2          }
 3556   1        }
 3557          
 3558            PUBLIC void MMI_DRV_SyncRealTimePEQFollowerToRelayer(U8 XDATA_PTR para, U8 enable_mode)
 3559            {
 3560   1          U8 airLinkIndex;
 3561   1          if((airLinkIndex = MMI_AIR_GetAirLink(PRODUCT_AIR_TWS)) != MMI_EOF && A2DP_IsLinkRelayer(airLinkIndex))
 3562   1          {
 3563   2            MMI_AIR_RealtimePEQCmd(airLinkIndex, para, enable_mode);
 3564   2          }
 3565   1        }
 3566            #endif
 3567          #endif
 3568          
 3569          PUBLIC U8 MMI_DRV_SysDevBitMask(U8 audioDev)
 3570          {
 3571   1        U8 i;
 3572   1        for(i=0 ; i< sizeof(audioDevSysMappingTable)/sizeof(U8) ; i++)
 3573   1        {
 3574   2          if (audioDevSysMappingTable[i] == audioDev)
 3575   2            break;
 3576   2        }
 3577   1      
 3578   1        if(i == sizeof(audioDevSysMappingTable)/sizeof(U8))
 3579   1        {
 3580   2          ASSERT(FALSE);
 3581   2        }
 3582   1      
 3583   1        return (0x01 << i);
 3584   1      }
 3585          
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 57  

 3586          PUBLIC U16 MMI_DRV_LinkDevBitMask(U8 audioDev)
 3587          {
 3588   1        U8 i;
 3589   1        for( i=0 ; i< sizeof(audioDevLinkGrpMappingTable)/sizeof(U8) ; i++)
 3590   1        {
 3591   2          if(audioDevLinkGrpMappingTable[i] == audioDev)
 3592   2            break;
 3593   2        }
 3594   1      
 3595   1        if(i == sizeof(audioDevLinkGrpMappingTable)/sizeof(U8))
 3596   1        {
 3597   2          ASSERT(FALSE);
 3598   2        }
 3599   1      
 3600   1        return (U16)(0x1L << i);
 3601   1      }
 3602          
 3603          PUBLIC BOOL MMI_DRV_IsLinkAudioDev(U8 audioDev)
 3604          {
 3605   1        switch(audioDev)
 3606   1        {
 3607   2          case AUDIO_DEVICE_SCO:
 3608   2          case AUDIO_DEVICE_SCO_HSP:
 3609   2          case AUDIO_DEVICE_SCO_IDLE:
 3610   2          case AUDIO_DEVICE_MUSIC:
 3611   2          case AUDIO_DEVICE_MUSIC_CALL_NOTIFY:
 3612   2          case AUDIO_DEVICE_KEY_AT_CMD:
 3613   2          case AUDIO_DEVICE_CALL_STATE:
 3614   2          case AUDIO_DEVICE_AVRCP_PLAY:
 3615   2            return TRUE;
 3616   2          case AUDIO_DEVICE_LINE_IN:
 3617   2          case AUDIO_DEVICE_FM:
 3618   2          case AUDIO_DEVICE_DEMO_SOUND:
 3619   2          case AUDIO_DEVICE_MIC_TO_SPK:
 3620   2            return FALSE;
 3621   2          default:
 3622   2            ASSERT(FALSE);
 3623   2            return FALSE;
 3624   2        }
 3625   1      }
 3626          
 3627          PUBLIC U32 MMI_DRV_ResumeTimer(U8 audioDev)
 3628          {
 3629   1        switch(audioDev)
 3630   1        {
 3631   2          case AUDIO_DEVICE_MUSIC:
 3632   2          case AUDIO_DEVICE_AVRCP_PLAY:
 3633   2          case AUDIO_DEVICE_FM:
 3634   2          case AUDIO_DEVICE_LINE_IN:
 3635   2          #ifdef DEMOSOUND
                   case AUDIO_DEVICE_DEMO_SOUND:
                   #endif
 3638   2            return ((U32)(gMMI_nvram.timerCtl.waitForResumeTimer-5)*320L);
 3639   2          case AUDIO_DEVICE_MUSIC_CALL_NOTIFY:
 3640   2          case AUDIO_DEVICE_CALL_STATE:
 3641   2            return (320L);
 3642   2          case AUDIO_DEVICE_SCO:
 3643   2          case AUDIO_DEVICE_SCO_IDLE:
 3644   2          case AUDIO_DEVICE_SCO_HSP:
 3645   2          case AUDIO_DEVICE_MIC_TO_SPK:
 3646   2            return (0L);
 3647   2          case AUDIO_DEVICE_KEY_AT_CMD:
 3648   2            return (10L);
 3649   2          default:
 3650   2            ASSERT(FALSE);
 3651   2            return 0L;
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 58  

 3652   2        }
 3653   1      }
 3654          
 3655          PUBLIC U8 MMI_DRV_GetAudioDevByPriority(U8 i)
 3656          {
 3657   1        return (i >= AUDIO_DEVICE_NUM) ? gMMI_nvram.audioPriorityExtra[i-AUDIO_DEVICE_NUM] : MMI_AUDIO_PRIORITY[
             -i];
 3658   1      }
 3659          
 3660          PUBLIC U8 MMI_DRV_SearchAudioPriority(U8 audioDev)
 3661          {
 3662   1        U8 i;
 3663   1        for(i = 0; i < AUDIO_DEVICE_NUM; i++)
 3664   1        {
 3665   2          if(MMI_AUDIO_PRIORITY[i] == audioDev)
 3666   2            return i;
 3667   2        }
 3668   1        for(i = 0; i < 4; i++)
 3669   1        {
 3670   2          if(gMMI_nvram.audioPriorityExtra[i] == audioDev)
 3671   2            return (i+AUDIO_DEVICE_NUM);
 3672   2        }
 3673   1        ASSERT(FALSE);
 3674   1        return 0xFF;
 3675   1      }
 3676          
 3677          PUBLIC BOOL MMI_DRV_IsAudioDeviceRegistered(U8 linkIndex, U8 audioDev)
 3678          {
 3679   1        if(MMI_DRV_IsLinkAudioDev(audioDev))
 3680   1        {
 3681   2          if(linkIndex < MAX_MULTI_POINT_NO && (gMMI_ctl.audioDevCtl.registedDev[linkIndex] & MMI_DRV_LinkDevBitM
             -ask(audioDev)))
 3682   2            return TRUE;
 3683   2        }
 3684   1        else
 3685   1        {
 3686   2          if(gMMI_ctl.audioDevCtl.sysAudioDev & MMI_DRV_SysDevBitMask(audioDev))
 3687   2            return TRUE;
 3688   2        }
 3689   1        return FALSE;
 3690   1      }
 3691          
 3692          PUBLIC BOOL MMI_DRV_IsHighPriAudioDeviceRegistered(U8 audioDev)
 3693          {
 3694   1        U8 priIn, priCurr;
 3695   1        if(gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_NONE)
 3696   1          return FALSE;
 3697   1        priIn = MMI_DRV_SearchAudioPriority(audioDev);
 3698   1        priCurr = MMI_DRV_SearchAudioPriority(gMMI_ctl.audioDevCtl.currentActiveDev);
 3699   1        if(priCurr > priIn)
 3700   1          return TRUE;
 3701   1        else
 3702   1          return FALSE;
 3703   1      }
 3704          
 3705          PUBLIC BOOL MMI_DRV_IsOtherAudioDeviceEnabled(U8 linkIndex, U8 audioDev)
 3706          {
 3707   1        U8 i;
 3708   1        if(MMI_DRV_IsLinkAudioDev(audioDev))
 3709   1        {
 3710   2          if(gMMI_ctl.audioDevCtl.sysAudioDev)
 3711   2            return TRUE;
 3712   2      
 3713   2          for(i = 0; i < MAX_MULTI_POINT_NO; i++)
 3714   2          {
 3715   3            if(i == linkIndex)
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 59  

 3716   3            {
 3717   4              if(gMMI_ctl.audioDevCtl.registedDev[i] & ~(MMI_DRV_LinkDevBitMask(audioDev)))
 3718   4                return TRUE;
 3719   4            }
 3720   3            else
 3721   3            {
 3722   4              if(gMMI_ctl.audioDevCtl.registedDev[i])
 3723   4                return TRUE;
 3724   4            }
 3725   3          }
 3726   2        }
 3727   1        else
 3728   1        {
 3729   2          for(i = 0; i < MAX_MULTI_POINT_NO; i++)
 3730   2          {
 3731   3            if(gMMI_ctl.audioDevCtl.registedDev[i])
 3732   3              return TRUE;
 3733   3          }
 3734   2          if(gMMI_ctl.audioDevCtl.sysAudioDev & ~(MMI_DRV_SysDevBitMask(audioDev)))
 3735   2            return TRUE;
 3736   2        }
 3737   1        return FALSE;
 3738   1      }
 3739          
 3740          #if defined(A2DP_Profile) && defined(SUPPORT_MULTI_POINT)
 3741          PRIVATE void MMI_A2DP_SendAnotherLinkPauseMusic(U8 linkIndex)//Mantis 8599 - avoid Warning C183 : Dead As
             -signment Eliminated
 3742          {
 3743   1        U8 i;
 3744   1        for(i = 0; i < MAX_MULTI_POINT_NO; i++)
 3745   1        {
 3746   2          if(i != linkIndex)
 3747   2          {
 3748   3            MMI_A2DP_SendPauseMusic(i,TRUE);
 3749   3          }
 3750   2        }
 3751   1      }
 3752          #endif
 3753          
 3754          PUBLIC BOOL MMI_DRV_AudioDeviceRegister(U8 linkIndex, U8 audioDev)
 3755          {
 3756   1        U8 priIn, priCurr;
 3757   1        BOOL isPause = FALSE;
 3758   1        //1. record new audio device
 3759   1        switch(audioDev)
 3760   1        {
 3761   2          case AUDIO_DEVICE_SCO:
 3762   2          case AUDIO_DEVICE_SCO_HSP:
 3763   2          case AUDIO_DEVICE_SCO_IDLE:
 3764   2          case AUDIO_DEVICE_MUSIC:
 3765   2          case AUDIO_DEVICE_MUSIC_CALL_NOTIFY:
 3766   2          case AUDIO_DEVICE_CALL_STATE:
 3767   2          case AUDIO_DEVICE_KEY_AT_CMD:
 3768   2          case AUDIO_DEVICE_AVRCP_PLAY:
 3769   2            if(linkIndex >= MAX_MULTI_POINT_NO)
 3770   2              ASSERT(FALSE);
 3771   2      
 3772   2            gMMI_ctl.audioDevCtl.registedDev[linkIndex] |= MMI_DRV_LinkDevBitMask(audioDev);
 3773   2            //#ifdef DBG_UART_ENABLE_MMI
 3774   2            LightDbgPrint("USR - RegAudioDev2:%x, %X", (U8)linkIndex, (U32)gMMI_ctl.audioDevCtl.registedDev[linkIn
             -dex]);
 3775   2            //#endif
 3776   2            break;
 3777   2          case AUDIO_DEVICE_MIC_TO_SPK:
 3778   2          case AUDIO_DEVICE_LINE_IN:
 3779   2          case AUDIO_DEVICE_FM:
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 60  

 3780   2          #ifdef DEMOSOUND
                   case AUDIO_DEVICE_DEMO_SOUND:
                   #endif
 3783   2            gMMI_ctl.audioDevCtl.sysAudioDev |= MMI_DRV_SysDevBitMask(audioDev);
 3784   2            //#ifdef DBG_UART_ENABLE_MMI
 3785   2            LightDbgPrint("USR - RegAudioDev3:%x, %X", (U8)linkIndex, (U32)gMMI_ctl.audioDevCtl.sysAudioDev);
 3786   2            //#endif
 3787   2            break;
 3788   2          default:
 3789   2            ASSERT(FALSE);
 3790   2        }
 3791   1      
 3792   1        LightDbgPrint("AudioDevReg[%d]:%d", (U8)linkIndex, (U8)audioDev);
 3793   1      
 3794   1        //2. check if audio device is active
 3795   1        if(gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_NONE)
 3796   1          goto SET_AUDIO_DEV_ACTIVE;
 3797   1      
 3798   1      
 3799   1        //3. Get priority of current audio
 3800   1        priIn = MMI_DRV_SearchAudioPriority(audioDev);
 3801   1        priCurr = MMI_DRV_SearchAudioPriority(gMMI_ctl.audioDevCtl.currentActiveDev);
 3802   1      
 3803   1        if(priCurr > priIn)
 3804   1        {
 3805   2          // high priority is active now
 3806   2          if((audioDev == AUDIO_DEVICE_MUSIC || audioDev == AUDIO_DEVICE_AVRCP_PLAY) && (gMMI_ctl.audioDevCtl.cur
             -rentActiveDev == AUDIO_DEVICE_MUSIC || gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_AVRCP_PLAY))
 3807   2          {
 3808   3            if(gMMI_ctl.audioDevCtl.currentActiveLinkIndex != linkIndex)
 3809   3            {
 3810   4              goto DECIDE_MUSIC_PRIORITY;
 3811   4            }
 3812   3          }
 3813   2          return FALSE;
 3814   2        }
 3815   1        else if(priCurr < priIn)
 3816   1        {
 3817   2          // disable low priority audio device
 3818   2          switch(gMMI_ctl.audioDevCtl.currentActiveDev)
 3819   2          {
 3820   3            case AUDIO_DEVICE_SCO_IDLE:
 3821   3            case AUDIO_DEVICE_SCO_HSP:
 3822   3            case AUDIO_DEVICE_SCO:
 3823   3              if(audioDev == AUDIO_DEVICE_SCO || audioDev == AUDIO_DEVICE_SCO_HSP || audioDev == AUDIO_DEVICE_SCO_I
             -DLE || audioDev == AUDIO_DEVICE_KEY_AT_CMD)
 3824   3              {
 3825   4                if(gMMI_ctl.audioDevCtl.currentActiveLinkIndex == linkIndex)
 3826   4                  goto SET_AUDIO_DEV_ACTIVE;
 3827   4                else
 3828   4                  MMI_SendDSPCmd(gMMI_ctl.audioDevCtl.currentActiveLinkIndex, DSP_DISABLED);
 3829   4              }
 3830   3              else
 3831   3                MMI_SendDSPCmd(gMMI_ctl.audioDevCtl.currentActiveLinkIndex, DSP_DISABLED);
 3832   3              break;
 3833   3      
 3834   3            case AUDIO_DEVICE_MUSIC:
 3835   3            case AUDIO_DEVICE_MUSIC_CALL_NOTIFY:
 3836   3            case AUDIO_DEVICE_AVRCP_PLAY:
 3837   3              switch(audioDev)
 3838   3              {
 3839   4                case AUDIO_DEVICE_MUSIC_CALL_NOTIFY:
 3840   4                case AUDIO_DEVICE_CALL_STATE:
 3841   4                  if(gMMI_ctl.audioDevCtl.currentActiveLinkIndex == linkIndex)
 3842   4                    goto SET_AUDIO_DEV_ACTIVE;
 3843   4                  else
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 61  

 3844   4                  {
 3845   5                    MMI_A2DP_StopDSP(gMMI_ctl.audioDevCtl.currentActiveLinkIndex);
 3846   5                    #ifdef A2DP_Profile
 3847   5                    if(!MMI_A2DP_MEMPUT_WHEN_CALLACTIVE_FEAT)
 3848   5                    {
 3849   6                      #ifdef SUPPORT_MULTI_POINT
 3850   6                      MMI_A2DP_SendAnotherLinkPauseMusic(linkIndex);
 3851   6                      #endif
 3852   6                    }
 3853   5                    #endif
 3854   5      
 3855   5                  }
 3856   4                  break;
 3857   4                case AUDIO_DEVICE_MUSIC:
 3858   4                case AUDIO_DEVICE_AVRCP_PLAY:
 3859   4                  if(gMMI_ctl.audioDevCtl.currentActiveLinkIndex == linkIndex)
 3860   4                    goto SET_AUDIO_DEV_ACTIVE;
 3861   4                  else
 3862   4                  {
 3863   5                    goto DECIDE_MUSIC_PRIORITY;
 3864   5                  }
 3865   4                  break;
 3866   4                case AUDIO_DEVICE_LINE_IN:
 3867   4                  isPause = (!MMI_A2DP_MEMPUT_WHEN_LINE_IN_FEAT)?TRUE:FALSE;
 3868   4                  goto DRV_PAUSE_MUSIC;
 3869   4                case AUDIO_DEVICE_FM:
 3870   4                  isPause = (!MMI_A2DP_MEMPUT_WHEN_FM_ON_FEAT)?TRUE:FALSE;
 3871   4                  DRV_PAUSE_MUSIC:
 3872   4                  MMI_A2DP_StopDSP(gMMI_ctl.audioDevCtl.currentActiveLinkIndex);
 3873   4                  if(isPause && (gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_MUSIC || gMMI_ctl.audioDevCtl.
             -currentActiveDev == AUDIO_DEVICE_AVRCP_PLAY))
 3874   4                  {
 3875   5                    #ifdef A2DP_Profile
 3876   5                    MMI_A2DP_SendPauseMusic(gMMI_ctl.audioDevCtl.currentActiveLinkIndex, FALSE);
 3877   5                    #endif
 3878   5                  }
 3879   4                  break;
 3880   4                #ifdef DEMOSOUND
                         case AUDIO_DEVICE_DEMO_SOUND:
                           isPause = FALSE;
                           goto DRV_PAUSE_MUSIC;
                         #endif
 3885   4      
 3886   4                case AUDIO_DEVICE_SCO:
 3887   4                case AUDIO_DEVICE_SCO_HSP:
 3888   4                case AUDIO_DEVICE_SCO_IDLE:
 3889   4                case AUDIO_DEVICE_KEY_AT_CMD:
 3890   4                  MMI_A2DP_StopDSP(gMMI_ctl.audioDevCtl.currentActiveLinkIndex);
 3891   4                  #ifdef A2DP_Profile
 3892   4                  {
 3893   5                    #ifdef SUPPORT_MULTI_POINT
 3894   5                    MMI_A2DP_SendAnotherLinkPauseMusic(linkIndex);
 3895   5                    #endif
 3896   5                  }
 3897   4                  #endif
 3898   4                  break;
 3899   4                case AUDIO_DEVICE_MIC_TO_SPK:
 3900   4                  break;
 3901   4                default:
 3902   4                  ASSERT(FALSE);
 3903   4                  break;
 3904   4              }
 3905   3              break;
 3906   3            case AUDIO_DEVICE_LINE_IN:
 3907   3              MMI_RmvState(MMI_EOF, MMI_LINE_IN);
 3908   3              break;
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 62  

 3909   3            case AUDIO_DEVICE_FM:
 3910   3              MMI_RmvState(MMI_EOF, MMI_FM);
 3911   3              if(audioDev == AUDIO_DEVICE_LINE_IN)
 3912   3              {
 3913   4                if(!MMI_LINE_IN_DETECT_BY_GPIO)
 3914   4                {
 3915   5                  MMI_DRV_AudioDeviceDeRegister(MMI_EOF, AUDIO_DEVICE_FM);
 3916   5                  //De-registered
 3917   5                }
 3918   4              }
 3919   3              break;
 3920   3            #ifdef DEMOSOUND
                     case AUDIO_DEVICE_DEMO_SOUND:
                       MMI_A2DP_DemoSoundStopCmd();
                       break;
                     #endif
 3925   3            case AUDIO_DEVICE_MIC_TO_SPK:
 3926   3            #ifdef LINEIN_ENABLE
 3927   3              MMI_DRV_SetMicSoundLevelInA2DP(gMMI_LineIn_ctl.currentsoundLevel);
 3928   3              MMI_DRV_KeyEventHandler(linkIndex, KEY_MIC_TO_SPK_DISABLE);
 3929   3            #endif
 3930   3              break;
 3931   3          }
 3932   2        }
 3933   1        else // same priority
 3934   1        {
 3935   2          switch(audioDev)
 3936   2          {
 3937   3            case AUDIO_DEVICE_LINE_IN:
 3938   3            case AUDIO_DEVICE_FM:
 3939   3            #ifdef DEMOSOUND
                     case AUDIO_DEVICE_DEMO_SOUND:
                     #endif
 3942   3              ASSERT(FALSE);
 3943   3              break;
 3944   3            case AUDIO_DEVICE_MUSIC:
 3945   3            case AUDIO_DEVICE_AVRCP_PLAY:
 3946   3              if(gMMI_ctl.audioDevCtl.currentActiveLinkIndex != linkIndex)
 3947   3              {
 3948   4                DECIDE_MUSIC_PRIORITY:
 3949   4                if(MMI_MUSIC_LAST_IN_FIRST_PLAYED_NO_PAUSE_OTHERS_FEAT)
 3950   4                {
 3951   5                  MMI_A2DP_StopDSP(gMMI_ctl.audioDevCtl.currentActiveLinkIndex);
 3952   5                  goto SET_AUDIO_DEV_ACTIVE;
 3953   5                }
 3954   4                else if(MMI_MUSIC_LAST_IN_FIRST_PLAYED_AND_PAUSE_OTHERS_FEAT)
 3955   4                {
 3956   5                  #ifdef A2DP_Profile
 3957   5                  MMI_A2DP_SendPauseMusic(gMMI_ctl.audioDevCtl.currentActiveLinkIndex, FALSE);
 3958   5                  #endif
 3959   5                  goto SET_AUDIO_DEV_ACTIVE;
 3960   5                }
 3961   4                #ifdef AVRCP_Profile
 3962   4                else if(MMI_A2DP_MEMPUT_WHEN_OTHER_IN_MUSIC_FEAT)
 3963   4                {
 3964   5                  //Mantis 10306 cover some phone can't change AVRCP Play status
 3965   5                  #if 0
                           U8 playStatus = MMI_AVRCP_GetPlayStatus(gMMI_ctl.audioDevCtl.currentActiveLinkIndex);
                           if(playStatus == AVRCP_PLAYBACK_STATUS_PAUSED || playStatus == AVRCP_PLAYBACK_STATUS_STOPPED)
                           {
                             MMI_A2DP_StopDSP(gMMI_ctl.audioDevCtl.currentActiveLinkIndex);
                             goto SET_AUDIO_DEV_ACTIVE;
                           }
                           #endif
 3973   5                }
 3974   4                #endif
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 63  

 3975   4              }
 3976   3              return FALSE;
 3977   3              break;
 3978   3            case AUDIO_DEVICE_MUSIC_CALL_NOTIFY:
 3979   3            case AUDIO_DEVICE_CALL_STATE:
 3980   3              if(gMMI_ctl.audioDevCtl.currentActiveLinkIndex != linkIndex)
 3981   3                return FALSE;
 3982   3              else
 3983   3              {
 3984   4                ASSERT(FALSE);
 3985   4              }
 3986   3              break;
 3987   3            case AUDIO_DEVICE_SCO:
 3988   3            case AUDIO_DEVICE_SCO_HSP:
 3989   3              if(gMMI_ctl.audioDevCtl.currentActiveLinkIndex != linkIndex)
 3990   3              {
 3991   4                if( MMI_CheckLinkInCallActiveState(gMMI_ctl.audioDevCtl.currentActiveLinkIndex))
 3992   4                {
 3993   5                  #ifdef HFP_Profile
 3994   5                  if(MMI_MAX_ONGOING_CALL_NO ==MMI_HFP_SearchCallStatusInd(gMMI_ctl.audioDevCtl.currentActiveLinkInde
             -x,MMI_CALL_HELD))
 3995   5                    return FALSE;
 3996   5                  else
 3997   5                  #endif
 3998   5                  {
 3999   6                    if(MMI_CheckLinkInCallActiveState(linkIndex))
 4000   6                    {
 4001   7                      goto SET_AUDIO_DEV_ACTIVE;
 4002   7                    }
 4003   6                    else
 4004   6                    {
 4005   7                      return FALSE;
 4006   7                    }
 4007   6                  }
 4008   5                }
 4009   4                else if(MMI_CheckLinkInCallActiveState(linkIndex))
 4010   4                {
 4011   5                  goto SET_AUDIO_DEV_ACTIVE;
 4012   5                }
 4013   4                else if (MMI_CheckLinkInCallNotifyState(gMMI_ctl.audioDevCtl.currentActiveLinkIndex))
 4014   4                {
 4015   5                  if(MMI_CheckLinkInCallNotifyState(linkIndex))
 4016   5                  {
 4017   6                    if(gMMI_ctl.mmiInfo[gMMI_ctl.audioDevCtl.currentActiveLinkIndex].nestStatePtr->nestState == MMI_HF
             -P_OUTGOING)
 4018   6                      return FALSE;
 4019   6                    else if(linkIndex < MAX_MULTI_POINT_NO && gMMI_ctl.mmiInfo[linkIndex].nestStatePtr->nestState == M
             -MI_HFP_OUTGOING)
 4020   6                      goto SET_AUDIO_DEV_ACTIVE;
 4021   6                    else
 4022   6                      return FALSE;
 4023   6                  }
 4024   5                  else
 4025   5                  {
 4026   6                    return FALSE;
 4027   6                  }
 4028   5                }
 4029   4                else if(MMI_CheckLinkInCallNotifyState(linkIndex))
 4030   4                {
 4031   5                  goto SET_AUDIO_DEV_ACTIVE;
 4032   5                }
 4033   4              }
 4034   3              else
 4035   3              {
 4036   4                goto SET_AUDIO_DEV_ACTIVE;
 4037   4              }
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 64  

 4038   3              break;
 4039   3            case AUDIO_DEVICE_SCO_IDLE:
 4040   3              break;
 4041   3            case AUDIO_DEVICE_MIC_TO_SPK:
 4042   3              break;
 4043   3            case AUDIO_DEVICE_KEY_AT_CMD:
 4044   3              return FALSE;
 4045   3              break;
 4046   3          }
 4047   2      
 4048   2        }
 4049   1      
 4050   1        SET_AUDIO_DEV_ACTIVE:
 4051   1        gMMI_ctl.audioDevCtl.currentActiveDev = audioDev;
 4052   1        gMMI_ctl.audioDevCtl.currentActiveLinkIndex = linkIndex;
 4053   1        LightDbgPrint("SetAudioDev[%d]:%d", (U8)gMMI_ctl.audioDevCtl.currentActiveLinkIndex, (U8)gMMI_ctl.audioD
             -evCtl.currentActiveDev);
 4054   1        SYS_ReleaseTimer(&gMMI_ctl.audioDevCtl.resumeTimer);
 4055   1      
 4056   1        if(linkIndex != MMI_EOF)
 4057   1          gMMI_ctl.serviceInd = linkIndex;
 4058   1      
 4059   1        return TRUE;
 4060   1      }
 4061          
 4062          PUBLIC BOOL MMI_DRV_SetAudioDeviceByLink(U8 linkIndex, U8 audioDev)
 4063          {
 4064   1        if(MMI_KEY_STATE_POWER_OFF == MMI_GetKeyState())
 4065   1          return FALSE;
 4066   1      
 4067   1        if(MMI_DRV_IsAudioDeviceRegistered(linkIndex, audioDev))
 4068   1        {
 4069   2          LightDbgPrint("SetAudioDeviceByLink[%d]:%d",(U8)linkIndex, (U8)audioDev);
 4070   2          SYS_SetTimer(&gMMI_ctl.audioDevCtl.resumeTimer, MMI_DRV_ResumeTimer(audioDev));
 4071   2          gMMI_ctl.audioDevCtl.currentActiveDev = audioDev;
 4072   2          gMMI_ctl.audioDevCtl.currentActiveLinkIndex = linkIndex;
 4073   2          gMMI_ctl.serviceInd = linkIndex;
 4074   2          return TRUE;
 4075   2        }
 4076   1        return FALSE;
 4077   1      }
 4078          
 4079          PUBLIC void MMI_DRV_RemoveServiceLink(U8 linkIndex)
 4080          {
 4081   1        U8 nextLink;
 4082   1        if(MMI_KEY_STATE_POWER_OFF == MMI_GetKeyState())
 4083   1          return;
 4084   1      
 4085   1        if(gMMI_ctl.serviceInd == linkIndex)
 4086   1        {
 4087   2          switch(gMMI_ctl.audioDevCtl.currentActiveDev)
 4088   2          {
 4089   3            case AUDIO_DEVICE_SCO:
 4090   3            case AUDIO_DEVICE_SCO_HSP:
 4091   3            case AUDIO_DEVICE_SCO_IDLE:
 4092   3            case AUDIO_DEVICE_MUSIC:
 4093   3            case AUDIO_DEVICE_MUSIC_CALL_NOTIFY:
 4094   3            case AUDIO_DEVICE_CALL_STATE:
 4095   3            case AUDIO_DEVICE_AVRCP_PLAY:
 4096   3            case AUDIO_DEVICE_KEY_AT_CMD:
 4097   3              LightDbgPrint("ASSERT - Zombie Audio Device");
 4098   3              /* fallthrough */
 4099   3            case AUDIO_DEVICE_LINE_IN:
 4100   3            case AUDIO_DEVICE_FM:
 4101   3            #ifdef DEMOSOUND
                     case AUDIO_DEVICE_DEMO_SOUND:
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 65  

                     #endif
 4104   3            case AUDIO_DEVICE_MIC_TO_SPK:
 4105   3            case AUDIO_DEVICE_NONE:
 4106   3              if((nextLink = MMI_GetNextNormalLink(linkIndex)) == MMI_EOF)
 4107   3              {
 4108   4                #ifdef AIR_MODULE
 4109   4                if((nextLink = MMI_AIR_GetNextAirLink(linkIndex)) == MMI_EOF)
 4110   4                #endif
 4111   4                {
 4112   5                  if((nextLink = MMI_GetNextActiveLink(linkIndex)) == MMI_EOF)
 4113   5                  {
 4114   6                    nextLink = DEFAULT_LINK_IND;
 4115   6                  }
 4116   5                }
 4117   4              }
 4118   3              gMMI_ctl.serviceInd = nextLink;
 4119   3              break;
 4120   3            default:
 4121   3              ASSERT(FALSE);
 4122   3          }
 4123   2        }
 4124   1      }
 4125          
 4126          PUBLIC void MMI_DRV_AddServiceLink(U8 linkIndex)
 4127          {
 4128   1        if(MMI_KEY_STATE_POWER_OFF == MMI_GetKeyState())
 4129   1          return;
 4130   1        if( gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_NONE ||
 4131   1          gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_LINE_IN ||
 4132   1          gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_FM
 4133   1          #ifdef DEMOSOUND
                   || gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_DEMO_SOUND
                   #endif
 4136   1          #ifdef AIR_MODULE
 4137   1          || gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_SCO_IDLE
 4138   1          #endif
 4139   1          )
 4140   1        {
 4141   2          U8 nextLink = MMI_GetNextNormalLink(linkIndex);
 4142   2          if(nextLink != MMI_EOF && MMI_CheckNestStateByLink(nextLink, MMI_CONNECTED))
 4143   2            return;
 4144   2      
 4145   2          gMMI_ctl.serviceInd = linkIndex;
 4146   2        }
 4147   1      }
 4148          
 4149          PUBLIC BOOL MMI_DRV_SetAudioDeviceToAnotherLink(U8 linkIndex, U8 audioDev)
 4150          {
 4151   1        U8 nextLink;
 4152   1        if(MMI_KEY_STATE_POWER_OFF == MMI_GetKeyState())
 4153   1          return FALSE;
 4154   1      
 4155   1        for(nextLink = 0; nextLink < MAX_MULTI_POINT_NO; nextLink++)
 4156   1        {
 4157   2          if(nextLink != linkIndex && MMI_DRV_SetAudioDeviceByLink(nextLink, audioDev))
 4158   2          {
 4159   3            return TRUE;
 4160   3          }
 4161   2        }
 4162   1        return FALSE;
 4163   1      }
 4164          
 4165          
 4166          
 4167          PUBLIC BOOL MMI_DRV_SetAudioDeviceSys(U8 audioDev, U32 timer)
 4168          {
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 66  

 4169   1        if(MMI_KEY_STATE_POWER_OFF == MMI_GetKeyState())
 4170   1          return FALSE;
 4171   1      
 4172   1        if(MMI_DRV_IsAudioDeviceRegistered(MMI_EOF, audioDev))
 4173   1        {
 4174   2          LightDbgPrint("SetAudioDeviceSys[%d]:%d",(U8)MMI_EOF, (U8)audioDev);
 4175   2          SYS_SetTimer(&gMMI_ctl.audioDevCtl.resumeTimer, timer);
 4176   2          gMMI_ctl.audioDevCtl.currentActiveDev = audioDev;
 4177   2          gMMI_ctl.audioDevCtl.currentActiveLinkIndex = MMI_EOF;
 4178   2          return TRUE;
 4179   2        }
 4180   1        return FALSE;
 4181   1      }
 4182          
 4183          PUBLIC void MMI_DRV_AudioDeviceDeRegister(U8 linkIndex, U8 audioDev)
 4184          {
 4185   1        //delete audio device
 4186   1      
 4187   1        switch(audioDev)
 4188   1        {
 4189   2          case AUDIO_DEVICE_SCO:
 4190   2          case AUDIO_DEVICE_SCO_HSP:
 4191   2          case AUDIO_DEVICE_SCO_IDLE:
 4192   2          case AUDIO_DEVICE_MUSIC:
 4193   2          case AUDIO_DEVICE_MUSIC_CALL_NOTIFY:
 4194   2          case AUDIO_DEVICE_CALL_STATE:
 4195   2          case AUDIO_DEVICE_KEY_AT_CMD:
 4196   2          case AUDIO_DEVICE_AVRCP_PLAY:
 4197   2            if(linkIndex < MAX_MULTI_POINT_NO)
 4198   2            {
 4199   3              gMMI_ctl.audioDevCtl.registedDev[linkIndex] &= ~(MMI_DRV_LinkDevBitMask(audioDev));
 4200   3              //#ifdef DBG_UART_ENABLE_MMI
 4201   3              LightDbgPrint("USR - DeRegAudioDev2:%x, %X", (U8)linkIndex, (U32)gMMI_ctl.audioDevCtl.registedDev[lin
             -kIndex]);
 4202   3              //#endif
 4203   3            }
 4204   2            break;
 4205   2          case AUDIO_DEVICE_MIC_TO_SPK:
 4206   2          case AUDIO_DEVICE_LINE_IN:
 4207   2          case AUDIO_DEVICE_FM:
 4208   2          #ifdef DEMOSOUND
                   case AUDIO_DEVICE_DEMO_SOUND:
                   #endif
 4211   2            gMMI_ctl.audioDevCtl.sysAudioDev &= ~(MMI_DRV_SysDevBitMask(audioDev));
 4212   2            //#ifdef DBG_UART_ENABLE_MMI
 4213   2            LightDbgPrint("USR - DeRegAudioDev3:%x, %X", (U8)linkIndex, (U32)gMMI_ctl.audioDevCtl.sysAudioDev);
 4214   2            //#endif
 4215   2            break;
 4216   2          default:
 4217   2            ASSERT(FALSE);
 4218   2        }
 4219   1      }
 4220          
 4221          PUBLIC BOOL MMI_DRV_SetAudioDeviceMusicResume(U8 linkIndex, U8 audioDev)
 4222          {
 4223   1        U8 nextActiveLink;
 4224   1      
 4225   1        if(MMI_DRV_IsAudioDeviceRegistered(linkIndex, audioDev))
 4226   1        {
 4227   2          nextActiveLink = MMI_GetNextActiveLink(linkIndex);
 4228   2          if(nextActiveLink == MMI_EOF || !MMI_DRV_IsAudioDeviceRegistered(nextActiveLink, audioDev))
 4229   2          {
 4230   3            if(MMI_DRV_SetAudioDeviceByLink(linkIndex, audioDev))
 4231   3              return TRUE;
 4232   3          }
 4233   2          #ifdef A2DP_Profile
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 67  

 4234   2          else
 4235   2          {
 4236   3            if(A2DP_STREAMING == A2DP_GetState(linkIndex) && !A2DP_IsResume(linkIndex))
 4237   3            {
 4238   4              if(MMI_DRV_SetAudioDeviceByLink(linkIndex, audioDev))
 4239   4                return TRUE;
 4240   4            }
 4241   3            else if(A2DP_STREAMING == A2DP_GetState(nextActiveLink) && !A2DP_IsResume(nextActiveLink))
 4242   3            {
 4243   4              if(MMI_DRV_SetAudioDeviceByLink(nextActiveLink, audioDev))
 4244   4                return TRUE;
 4245   4            }
 4246   3            else  if(A2DP_STREAMING == A2DP_GetState(linkIndex) && A2DP_IsResume(linkIndex))
 4247   3            {
 4248   4              if(MMI_DRV_SetAudioDeviceByLink(linkIndex, audioDev))
 4249   4                return TRUE;
 4250   4            }
 4251   3            else if(A2DP_IsResume(linkIndex))
 4252   3            {
 4253   4              if(MMI_DRV_SetAudioDeviceByLink(linkIndex, audioDev))
 4254   4                return TRUE;
 4255   4            }
 4256   3            else if(A2DP_STREAMING == A2DP_GetState(nextActiveLink) && A2DP_IsResume(nextActiveLink))
 4257   3            {
 4258   4              if(MMI_DRV_SetAudioDeviceByLink(nextActiveLink, audioDev))
 4259   4                return TRUE;
 4260   4            }
 4261   3            else if(A2DP_IsResume(nextActiveLink))
 4262   3            {
 4263   4              if(MMI_DRV_SetAudioDeviceByLink(nextActiveLink, audioDev))
 4264   4                return TRUE;
 4265   4            }
 4266   3            else if(A2DP_STREAMING == A2DP_GetState(linkIndex))
 4267   3            {
 4268   4              if(MMI_DRV_SetAudioDeviceByLink(linkIndex, audioDev))
 4269   4                return TRUE;
 4270   4            }
 4271   3            else if(A2DP_STREAMING == A2DP_GetState(nextActiveLink))
 4272   3            {
 4273   4              if(MMI_DRV_SetAudioDeviceByLink(nextActiveLink, audioDev))
 4274   4                return TRUE;
 4275   4            }
 4276   3          }
 4277   2          #endif
 4278   2        }
 4279   1        return FALSE;
 4280   1      }
 4281          
 4282          PUBLIC void MMI_DRV_ResumeOtherAudioDevice(U8 linkIndex, U8 audioDev)
 4283          {
 4284   1        U8 priIn, i, startLinkInd, linkCnt;
 4285   1      
 4286   1        //2. check if audio device is active
 4287   1        LightDbgPrint("ResumeOtherAudio[%d]:%x,[%d]:%x",(U8)linkIndex, (U8)audioDev, (U8)gMMI_ctl.audioDevCtl.cu
             -rrentActiveLinkIndex, (U8)gMMI_ctl.audioDevCtl.currentActiveDev);
 4288   1      
 4289   1        if(gMMI_ctl.audioDevCtl.currentActiveDev != audioDev || gMMI_ctl.audioDevCtl.currentActiveLinkIndex != l
             -inkIndex)
 4290   1          return;
 4291   1      
 4292   1        switch(audioDev)
 4293   1        {
 4294   2          case AUDIO_DEVICE_SCO:
 4295   2          case AUDIO_DEVICE_SCO_IDLE:
 4296   2          case AUDIO_DEVICE_SCO_HSP:
 4297   2          case AUDIO_DEVICE_KEY_AT_CMD:
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 68  

 4298   2          case AUDIO_DEVICE_CALL_STATE:
 4299   2          case AUDIO_DEVICE_MUSIC_CALL_NOTIFY:
 4300   2          case AUDIO_DEVICE_MUSIC:
 4301   2          case AUDIO_DEVICE_AVRCP_PLAY:
 4302   2            if(MMI_DRV_SetAudioDeviceToAnotherLink(linkIndex, audioDev))
 4303   2              goto NEW_ACTIVE_AUDIO_DEV;
 4304   2            break;
 4305   2        }
 4306   1      
 4307   1        if(priIn = MMI_DRV_SearchAudioPriority(audioDev))
 4308   1        {
 4309   2          i = priIn;
 4310   2          while(i--)
 4311   2          {
 4312   3            linkCnt = 0;
 4313   3            switch(MMI_DRV_GetAudioDevByPriority(i))
 4314   3            {
 4315   4              case AUDIO_DEVICE_SCO:
 4316   4              case AUDIO_DEVICE_SCO_HSP:
 4317   4              case AUDIO_DEVICE_SCO_IDLE:
 4318   4              case AUDIO_DEVICE_CALL_STATE:
 4319   4              case AUDIO_DEVICE_KEY_AT_CMD:
 4320   4                if(linkIndex == MMI_EOF)
 4321   4                {
 4322   5                  startLinkInd = 0;
 4323   5                }
 4324   4                else
 4325   4                {
 4326   5                  startLinkInd = linkIndex;
 4327   5                }
 4328   4                do
 4329   4                {
 4330   5                  if(MMI_DRV_SetAudioDeviceByLink((U8)(startLinkInd%MAX_MULTI_POINT_NO), MMI_DRV_GetAudioDevByPriorit
             -y(i)))
 4331   5                    goto NEW_ACTIVE_AUDIO_DEV;
 4332   5      
 4333   5                  linkCnt++;
 4334   5                  startLinkInd++;
 4335   5                }while(linkCnt < MAX_MULTI_POINT_NO);
 4336   4                break;
 4337   4      
 4338   4              case AUDIO_DEVICE_MUSIC:
 4339   4              case AUDIO_DEVICE_MUSIC_CALL_NOTIFY:
 4340   4              case AUDIO_DEVICE_AVRCP_PLAY:
 4341   4                if(linkIndex == MMI_EOF)
 4342   4                {
 4343   5                  startLinkInd = 0;
 4344   5                }
 4345   4                else
 4346   4                {
 4347   5                  startLinkInd = linkIndex;
 4348   5                }
 4349   4                do
 4350   4                {
 4351   5                  if(MMI_DRV_SetAudioDeviceMusicResume((U8)(startLinkInd%MAX_MULTI_POINT_NO), MMI_DRV_GetAudioDevByPr
             -iority(i)))
 4352   5                    goto NEW_ACTIVE_AUDIO_DEV;
 4353   5                  linkCnt++;
 4354   5                  startLinkInd++;
 4355   5                }while(linkCnt < MAX_MULTI_POINT_NO);
 4356   4                break;
 4357   4              case AUDIO_DEVICE_LINE_IN:
 4358   4                if(MMI_DRV_SetAudioDeviceSys(AUDIO_DEVICE_LINE_IN, MMI_DRV_ResumeTimer(AUDIO_DEVICE_LINE_IN)))
 4359   4                  goto NEW_ACTIVE_AUDIO_DEV;
 4360   4                break;
 4361   4              case AUDIO_DEVICE_FM:
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 69  

 4362   4                if(MMI_DRV_SetAudioDeviceSys(AUDIO_DEVICE_FM, MMI_DRV_ResumeTimer(AUDIO_DEVICE_FM)))
 4363   4                  goto NEW_ACTIVE_AUDIO_DEV;
 4364   4                break;
 4365   4              case AUDIO_DEVICE_MIC_TO_SPK:
 4366   4                if(MMI_DRV_SetAudioDeviceSys(AUDIO_DEVICE_MIC_TO_SPK, MMI_DRV_ResumeTimer(AUDIO_DEVICE_MIC_TO_SPK)))
 4367   4                  goto NEW_ACTIVE_AUDIO_DEV;
 4368   4                break;
 4369   4              #ifdef DEMOSOUND
                       case AUDIO_DEVICE_DEMO_SOUND:
                         if(MMI_DRV_SetAudioDeviceSys(AUDIO_DEVICE_DEMO_SOUND, MMI_DRV_ResumeTimer(AUDIO_DEVICE_DEMO_SOUND)))
                           goto NEW_ACTIVE_AUDIO_DEV;
                         break;
                       #endif
 4375   4            }
 4376   3          };
 4377   2        }
 4378   1        LightDbgPrint("ResumeOtherAudioDevice[%d]:%d",(U8)MMI_EOF, (U8)AUDIO_DEVICE_NONE);
 4379   1        gMMI_ctl.audioDevCtl.currentActiveDev = AUDIO_DEVICE_NONE;
 4380   1        gMMI_ctl.audioDevCtl.currentActiveLinkIndex = MMI_EOF;
 4381   1        SYS_ReleaseTimer(&gMMI_ctl.audioDevCtl.resumeTimer);
 4382   1      
 4383   1      
 4384   1        NEW_ACTIVE_AUDIO_DEV:
 4385   1        switch(audioDev)
 4386   1        {
 4387   2          case AUDIO_DEVICE_SCO:
 4388   2          case AUDIO_DEVICE_SCO_IDLE:
 4389   2          case AUDIO_DEVICE_SCO_HSP:
 4390   2            if((gMMI_ctl.audioDevCtl.currentActiveLinkIndex == linkIndex) &&
 4391   2            (gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_SCO || gMMI_ctl.audioDevCtl.currentActiveDev ==
             - AUDIO_DEVICE_SCO_IDLE || gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_SCO_HSP))
 4392   2            {
 4393   3              SYS_ReleaseTimer(&gMMI_ctl.audioDevCtl.resumeTimer);
 4394   3              //same type of device--> set active directly
 4395   3            }
 4396   2            else
 4397   2            {
 4398   3              if(MMI_KEY_STATE_POWER_OFF == MMI_GetKeyState())
 4399   3                MMI_SendDSPCmd(linkIndex, DSP_DISABLE_BY_POWER_OFF);
 4400   3              else
 4401   3                MMI_SendDSPCmd(linkIndex, DSP_DISABLED);
 4402   3            }
 4403   2            break;
 4404   2          case AUDIO_DEVICE_KEY_AT_CMD:
 4405   2          case AUDIO_DEVICE_CALL_STATE:
 4406   2            break;
 4407   2      
 4408   2          case AUDIO_DEVICE_MUSIC_CALL_NOTIFY:
 4409   2          case AUDIO_DEVICE_MUSIC:
 4410   2          case AUDIO_DEVICE_AVRCP_PLAY:
 4411   2            if((gMMI_ctl.audioDevCtl.currentActiveLinkIndex == linkIndex) &&
 4412   2            (gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_MUSIC_CALL_NOTIFY || gMMI_ctl.audioDevCtl.curre
             -ntActiveDev == AUDIO_DEVICE_MUSIC || gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_AVRCP_PLAY))
 4413   2            {
 4414   3              SYS_ReleaseTimer(&gMMI_ctl.audioDevCtl.resumeTimer);
 4415   3              //same type of device--> set active directly
 4416   3            }
 4417   2            else
 4418   2            {
 4419   3              MMI_A2DP_SendCmd(linkIndex, A2DP_MUSIC_DATA_MEMORY_PUT_CMD);
 4420   3              if(MMI_KEY_STATE_POWER_OFF == MMI_GetKeyState())
 4421   3              {
 4422   4                MMI_SendDSPCmd(linkIndex, DSP_DISABLE_BY_POWER_OFF);
 4423   4              }
 4424   3              else
 4425   3              {
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 70  

 4426   4                MMI_SendDSPCmd(linkIndex, DSP_DISABLED);
 4427   4              }
 4428   3            }
 4429   2            break;
 4430   2          case AUDIO_DEVICE_MIC_TO_SPK:
 4431   2            #ifdef LINEIN_ENABLE
 4432   2            MMI_DRV_SetMicSoundLevelInA2DP(gMMI_LineIn_ctl.currentsoundLevel);
 4433   2            MMI_DRV_KeyEventHandler(linkIndex, KEY_MIC_TO_SPK_DISABLE);
 4434   2            #endif
 4435   2            break;
 4436   2      
 4437   2        }
 4438   1      }
 4439          
 4440          PRIVATE void MMI_DRV_ResumeCurrentAudio(void)
 4441          {
 4442   1        switch(gMMI_ctl.audioDevCtl.currentActiveDev)
 4443   1        {
 4444   2          case AUDIO_DEVICE_SCO:
 4445   2          case AUDIO_DEVICE_SCO_HSP:
 4446   2          case AUDIO_DEVICE_SCO_IDLE:
 4447   2          case AUDIO_DEVICE_KEY_AT_CMD:
 4448   2          case AUDIO_DEVICE_MUSIC:
 4449   2          case AUDIO_DEVICE_MUSIC_CALL_NOTIFY:
 4450   2          case AUDIO_DEVICE_CALL_STATE:
 4451   2          case AUDIO_DEVICE_AVRCP_PLAY:
 4452   2            MMI_DRV_SetAudioDeviceByLink(gMMI_ctl.audioDevCtl.currentActiveLinkIndex, gMMI_ctl.audioDevCtl.current
             -ActiveDev);
 4453   2            break;
 4454   2      
 4455   2          case AUDIO_DEVICE_LINE_IN:
 4456   2          case AUDIO_DEVICE_FM:
 4457   2          #ifdef DEMOSOUND
                   case AUDIO_DEVICE_DEMO_SOUND:
                   #endif
 4460   2          case AUDIO_DEVICE_MIC_TO_SPK:
 4461   2            MMI_DRV_SetAudioDeviceSys(gMMI_ctl.audioDevCtl.currentActiveDev, MMI_DRV_ResumeTimer(gMMI_ctl.audioDev
             -Ctl.currentActiveDev));
 4462   2            break;
 4463   2        }
 4464   1      
 4465   1        if(gMMI_ctl.isAudioTransparencyEnable)
 4466   1        {
 4467   2          gMMI_ctl.isAudioTransparencyEnable = FALSE;
 4468   2          MMI_DRV_Switch_AudioTransparency(TRUE);
 4469   2        }
 4470   1      }
 4471          
 4472          PUBLIC BOOL MMI_DRV_IsAudioActiveDev(U8 linkIndex, U8 audioDev)
 4473          {
 4474   1        return(gMMI_ctl.audioDevCtl.currentActiveLinkIndex == linkIndex && gMMI_ctl.audioDevCtl.currentActiveDev
             - == audioDev)? TRUE:FALSE;
 4475   1      }
 4476          
 4477          PUBLIC BOOL MMI_DRV_IsActiveAudioDevInCall(void)
 4478          {
 4479   1        switch(gMMI_ctl.audioDevCtl.currentActiveDev)
 4480   1        {
 4481   2          case AUDIO_DEVICE_SCO:
 4482   2          case AUDIO_DEVICE_SCO_HSP:
 4483   2          case AUDIO_DEVICE_SCO_IDLE:
 4484   2          case AUDIO_DEVICE_CALL_STATE:
 4485   2          case AUDIO_DEVICE_MUSIC_CALL_NOTIFY:
 4486   2            return TRUE;
 4487   2          default:
 4488   2            return FALSE;
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 71  

 4489   2        }
 4490   1      }
 4491          
 4492          PUBLIC BOOL MMI_DRV_IsActiveAudioDevInMusic(void)
 4493          {
 4494   1        switch(gMMI_ctl.audioDevCtl.currentActiveDev)
 4495   1        {
 4496   2          case AUDIO_DEVICE_MUSIC:
 4497   2          case AUDIO_DEVICE_AVRCP_PLAY:
 4498   2            return TRUE;
 4499   2          default:
 4500   2            return FALSE;
 4501   2        }
 4502   1      }
 4503          
 4504          PUBLIC BOOL MMI_DRV_IsActiveAudioDevInFM(void)
 4505          {
 4506   1        return (gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_FM) ? TRUE : FALSE;
 4507   1      }
 4508          
 4509          PUBLIC BOOL MMI_DRV_IsActiveAudioDevInAUX(void)
 4510          {
 4511   1        return (gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_LINE_IN) ? TRUE : FALSE;
 4512   1      }
 4513          
 4514          PUBLIC void MMI_DRV_DSPRefGainCmd(void)
 4515          {
 4516   1        MMIMsgType XDATA_PTR msgPtr;
 4517   1      
 4518   1        msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_GET_DSP_REF_GAIN_CMD);
 4519   1      
 4520   1        if (msgPtr != (MMIMsgType XDATA_PTR)NULL)
 4521   1        {
 4522   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 4523   2        }
 4524   1      }
 4525          
 4526          PUBLIC void MMI_DRV_EnterMPStateCmd(void)
 4527          {
 4528   1        U8 state;
 4529   1      
 4530   1        MMI_AddTopState(MMI_EOF, MMI_MP_STATE);
 4531   1        state = MMI_GetTopStateByLink(DEFAULT_LINK_IND);
 4532   1      
 4533   1        if (state == MMI_MP_STATE)
 4534   1          MMI_HCI_SendToolCommandResponse(HCI_VCMD_OCF_TOOL_ENTER_MP_STATE, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4535   1        else
 4536   1          MMI_HCI_SendToolCommandResponse(HCI_VCMD_OCF_TOOL_ENTER_MP_STATE, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 4537   1      
 4538   1      }
 4539          
 4540          extern DRIVER_TEMP_CTL_TYPE XDATA gDriver_Bat_Temp_ctl;
 4541          PUBLIC void MMI_DRV_NTCValueReport(void)
 4542          {
 4543   1        MMIMsgType XDATA_PTR msgPtr;
 4544   1      
 4545   1        if(!pMpParameterF->ntcRatioPara.enableNTCRatio)
 4546   1          MMI_HCI_SendToolCommandResponse(HCI_VCMD_OCF_TOOL_NTC_RATIO_VALUE_REPORT, HCI_VEVT_OCF_RESULT_CODE_FAIL
             -);
 4547   1        else
 4548   1        {
 4549   2          if (msgPtr=MMI_GetCommandMessageMem(HCI_VCMD_AIROHA_TO_UART) )
 4550   2          {
 4551   3            msgPtr->paraLen=sizeof(HCI_VCMD_OPCODE_STRU)+sizeof(HCI_VCMD_PARA_NTC_VALUE_DATA);
 4552   3            msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VCMD_OCF_TOOL_NTC_RATIO_VALUE_REPORT;
 4553   3            msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_UART_TOOL_CMD;
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 72  

 4554   3            msgPtr->msgBodyPtr.hciVCmd.VPara.respNTCValueData.result = HCI_VEVT_OCF_RESULT_CODE_SUCCESS;
 4555   3            msgPtr->msgBodyPtr.hciVCmd.VPara.respNTCValueData.signTempADCBiggerValue= gDriver_Bat_Temp_ctl.signTem
             -pADCValue;
 4556   3            msgPtr->msgBodyPtr.hciVCmd.VPara.respNTCValueData.signTempADCSmallerValue= gDriver_Bat_Temp_ctl.signTe
             -mpADCValue2;
 4557   3            #if (defined AB1520C) || (defined AB1520D)
 4558   3            msgPtr->msgBodyPtr.hciVCmd.VPara.respNTCValueData.signTempADCGroundValue=gDriver_Bat_Temp_ctl.signTemp
             -ADCGroundValue;
 4559   3            #elif defined(AB1520S)
                     msgPtr->msgBodyPtr.hciVCmd.VPara.respNTCValueData.signTempADCGroundValue = 0;
                     #endif
 4562   3            msgPtr->msgBodyPtr.hciVCmd.VPara.respNTCValueData.ratioValue= gDriver_Bat_Temp_ctl.ratioValue;
 4563   3      
 4564   3            MMI_HCI_SendCmd(msgPtr);
 4565   3          }
 4566   2        }
 4567   1      }
 4568          
 4569          PUBLIC void MMI_DRV_ToolSetVolGain(HCI_VCMD_PARA_AIR_CMD_GET_VOL_GET XDATA_PTR msgPtr)
 4570          {
 4571   1        U8 spkGainSetIndex, micGainSetIndex;
 4572   1      
 4573   1        if (msgPtr->component == MMI_AUDIO_COMPONENT_SCO)
 4574   1        {
 4575   2          if(gMMI_ctl.audioableSCOLink != MMI_EOF)
 4576   2          {
 4577   3            MMI_DRV_SetSCOVolValue(gMMI_ctl.audioableSCOLink, msgPtr->soundLevel, msgPtr->smallStepLevel);
 4578   3          }
 4579   2          spkGainSetIndex = GET_LINEIN_SPK_GAIN_BY_LEVEL(msgPtr->soundLevel);
 4580   2          micGainSetIndex = GET_LINEIN_MIC_GAIN_BY_LEVEL(msgPtr->soundLevel);
 4581   2      
 4582   2          if(msgPtr->bandwidth == MMI_AUDIO_WIDE_BAND)
 4583   2          {
 4584   3            MMI_SPK_GAINSET_SCOWB[spkGainSetIndex].digitalGainWB  = msgPtr->spkDigitalGain;
 4585   3            MMI_SPK_GAINSET_SCOWB[spkGainSetIndex].analogGainWB   = msgPtr->spkAnalogGain;
 4586   3            MMI_MIC_GAINSET_SCOWB[micGainSetIndex].digitalGainWB  = msgPtr->micDigitalGain;
 4587   3            MMI_MIC_GAINSET_SCOWB[micGainSetIndex].analogGainWB_R = msgPtr->micAnalogGainR;
 4588   3            MMI_MIC_GAINSET_SCOWB[micGainSetIndex].analogGainWB_L = msgPtr->micAnalogGainL;
 4589   3      
 4590   3            if(gMMI_ctl.audioableSCOLink != MMI_EOF && gMMI_ctl.mmiInfo[gMMI_ctl.audioableSCOLink].linkPara.scoCod
             -ecType == SCO_CODEC_MSBC)
 4591   3            {
 4592   4              MMI_DRV_SendDriverVolCmd(gMMI_ctl.audioableSCOLink, msgPtr->soundLevel, msgPtr->smallStepLevel, micGa
             -inSetIndex); //Notify Driver
 4593   4            }
 4594   3          }
 4595   2          else
 4596   2          {
 4597   3            MMI_SPK_GAINSET[spkGainSetIndex].digitalGain  = msgPtr->spkDigitalGain;
 4598   3            MMI_SPK_GAINSET[spkGainSetIndex].analogGain   = msgPtr->spkAnalogGain;
 4599   3            MMI_MIC_GAINSET[micGainSetIndex].digitalGain  = msgPtr->micDigitalGain;
 4600   3            MMI_MIC_GAINSET[micGainSetIndex].analogGain_R = msgPtr->micAnalogGainR;
 4601   3            MMI_MIC_GAINSET[micGainSetIndex].analogGain_L = msgPtr->micAnalogGainL;
 4602   3      
 4603   3            if(gMMI_ctl.audioableSCOLink != MMI_EOF && gMMI_ctl.mmiInfo[gMMI_ctl.audioableSCOLink].linkPara.scoCod
             -ecType != SCO_CODEC_MSBC)
 4604   3            {
 4605   4              MMI_DRV_SendDriverVolCmd(gMMI_ctl.audioableSCOLink, msgPtr->soundLevel, msgPtr->smallStepLevel, micGa
             -inSetIndex); //Notify Driver
 4606   4            }
 4607   3          }
 4608   2        }
 4609   1        #ifdef LINEIN_ENABLE
 4610   1        else if (msgPtr->component == MMI_AUDIO_COMPONENT_LINE_IN)
 4611   1        {
 4612   2          MMI_LineIn_SetVolByLevel(msgPtr->soundLevel, msgPtr->smallStepLevel);
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 73  

 4613   2      
 4614   2          if(msgPtr->soundLevel)
 4615   2          {
 4616   3            U8 soundLevel = msgPtr->soundLevel - 1;
 4617   3      
 4618   3            spkGainSetIndex = GET_LINEIN_SPK_GAIN_BY_LEVEL(soundLevel);
 4619   3            micGainSetIndex = GET_LINEIN_MIC_GAIN_BY_LEVEL(soundLevel);
 4620   3      
 4621   3            MMI_SPK_GAINSET[spkGainSetIndex].digitalGainL = msgPtr->spkDigitalGain;
 4622   3            MMI_SPK_GAINSET[spkGainSetIndex].analogGainL  = msgPtr->spkAnalogGain;
 4623   3            MMI_MIC_GAINSET[micGainSetIndex].digitalGainL = msgPtr->micDigitalGain;
 4624   3            MMI_MIC_GAINSET[micGainSetIndex].analogGainL_R  = msgPtr->micAnalogGainR;
 4625   3            MMI_MIC_GAINSET[micGainSetIndex].analogGainL_L  = msgPtr->micAnalogGainL;
 4626   3          }
 4627   2          MMI_LineIn_SendDriverVolCmd();
 4628   2        }
 4629   1        #endif
 4630   1        #ifdef A2DP_Profile
 4631   1        else if (msgPtr->component == MMI_AUDIO_COMPONENT_A2DP)
 4632   1        {
 4633   2          if(gMMI_ctl.audioableA2DPLink != MMI_EOF)
 4634   2          {
 4635   3            MMI_A2DP_SetVolByLevel(gMMI_ctl.audioableA2DPLink, msgPtr->soundLevel, msgPtr->smallStepLevel);
 4636   3          }
 4637   2      
 4638   2          if(msgPtr->soundLevel)
 4639   2          {
 4640   3            U8 soundLevel = msgPtr->soundLevel - 1;
 4641   3      
 4642   3            spkGainSetIndex = GET_A2DP_SPK_GAIN_BY_LEVEL(soundLevel);
 4643   3            micGainSetIndex = GET_A2DP_MIC_GAIN_BY_LEVEL(soundLevel);
 4644   3      
 4645   3            MMI_SPK_GAINSET[spkGainSetIndex].digitalGainA = msgPtr->spkDigitalGain;
 4646   3            MMI_SPK_GAINSET[spkGainSetIndex].analogGainA  = msgPtr->spkAnalogGain;
 4647   3            MMI_MIC_GAINSET[micGainSetIndex].digitalGainA = msgPtr->micDigitalGain;
 4648   3            MMI_MIC_GAINSET[micGainSetIndex].analogGainA_R  = msgPtr->micAnalogGainR;
 4649   3            MMI_MIC_GAINSET[micGainSetIndex].analogGainA_L  = msgPtr->micAnalogGainL;
 4650   3          }
 4651   2      
 4652   2          MMI_A2DP_SendDriverVolCmd(msgPtr->soundLevel, msgPtr->smallStepLevel);
 4653   2        }
 4654   1        #endif
 4655   1      }
 4656          
 4657          PRIVATE void MMI_DRV_SetVolPtr(HCI_VCMD_PARA_AIR_CMD_SET_CURR_GAIN XDATA_PTR msgPtr, DriverVolumeSetCmd X
             -DATA_PTR volPtr)
 4658          {
 4659   1        volPtr->soundLevel    = VOLUME_DONT_CARE;
 4660   1        volPtr->spkVols     = msgPtr->spkDigitalGain;
 4661   1        volPtr->micVols     = msgPtr->micDigitalGain;
 4662   1        volPtr->analogDaGain  = msgPtr->spkAnalogGain;
 4663   1        volPtr->analogAdGain_R  = msgPtr->micAnalogGainR;
 4664   1        volPtr->analogAdGain_L  = msgPtr->micAnalogGainL;
 4665   1        volPtr->smallStepLevel  = VOLUME_DONT_CARE;
 4666   1      }
 4667          
 4668          PUBLIC void MMI_DRV_ToolSetCurrentGain(HCI_VCMD_PARA_AIR_CMD_SET_CURR_GAIN XDATA_PTR msgPtr)
 4669          {
 4670   1        switch(gMMI_ctl.audioDevCtl.currentActiveDev)
 4671   1        {
 4672   2          case AUDIO_DEVICE_SCO:
 4673   2          case AUDIO_DEVICE_SCO_HSP:
 4674   2          case AUDIO_DEVICE_SCO_IDLE:
 4675   2            {
 4676   3              MMIMsgType XDATA_PTR setVolPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_VOLUME_SET_CMD);
 4677   3              if(setVolPtr != (MMIMsgType XDATA_PTR)NULL)
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 74  

 4678   3              {
 4679   4                MMI_DRV_SetVolPtr(msgPtr, &setVolPtr->msgBodyPtr.driverCmd.volSetCmd);
 4680   4                OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)setVolPtr);
 4681   4              }
 4682   3            }
 4683   2            break;
 4684   2      
 4685   2          case AUDIO_DEVICE_MUSIC:
 4686   2          case AUDIO_DEVICE_AVRCP_PLAY:
 4687   2            {
 4688   3              MMIMsgType XDATA_PTR setVolPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_A2DP_VOLUME_SET_CMD);
 4689   3              if(setVolPtr != (MMIMsgType XDATA_PTR)NULL)
 4690   3              {
 4691   4                MMI_DRV_SetVolPtr(msgPtr, &setVolPtr->msgBodyPtr.driverCmd.a2dpVolSetCmd);
 4692   4                OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)setVolPtr);
 4693   4              }
 4694   3            }
 4695   2            break;
 4696   2      
 4697   2          case AUDIO_DEVICE_LINE_IN:
 4698   2          case AUDIO_DEVICE_MIC_TO_SPK:
 4699   2            {
 4700   3              MMIMsgType XDATA_PTR setVolPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_LINE_IN_VOLUME_SET_CMD);
 4701   3              if(setVolPtr != (MMIMsgType XDATA_PTR)NULL)
 4702   3              {
 4703   4                MMI_DRV_SetVolPtr(msgPtr, &setVolPtr->msgBodyPtr.driverCmd.lineInVolSetCmd);
 4704   4                OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)setVolPtr);
 4705   4              }
 4706   3            }
 4707   2            break;
 4708   2      
 4709   2          case AUDIO_DEVICE_FM:
 4710   2          case AUDIO_DEVICE_NONE:
 4711   2          case AUDIO_DEVICE_MUSIC_CALL_NOTIFY:
 4712   2          case AUDIO_DEVICE_KEY_AT_CMD:
 4713   2          case AUDIO_DEVICE_DEMO_SOUND:
 4714   2          case AUDIO_DEVICE_CALL_STATE:
 4715   2            break;
 4716   2        }
 4717   1      }
 4718          
 4719          #ifdef SUPPORT_MIC_IN_A2DP_MODE
 4720          PRIVATE void MMI_DRV_MicSpkActionInA2DPMode(U8 linkIndex, BOOL isEnable, BOOL isMicVolSyncSounLevel)
 4721          {
 4722   1        gMMI_ctl.isVolumeSetInitInA2DP = TRUE;
 4723   1        gMMI_ctl.isMicEnableInA2DP = isEnable;
 4724   1      
 4725   1        if(isMicVolSyncSounLevel)
 4726   1        {
 4727   2          CURRENT_MIC_SOUND_LEVEL_IN_A2DP(linkIndex) = CURRENT_A2DP_SOUND_LEVEL(linkIndex);
 4728   2        }
 4729   1      }
 4730          
 4731          PRIVATE void MMI_DRV_ControlMicInA2DPMode(U8 linkIndex)
 4732          {
 4733   1        MMI_DRV_MicSpkActionInA2DPMode(linkIndex, (gMMI_ctl.isMicEnableInA2DP)? FALSE:TRUE, TRUE);
 4734   1      }
 4735          
 4736          
 4737          PRIVATE void MMI_DRV_KeyAudioTransparency(U8 linkIndex)
 4738          {
 4739   1        #ifdef AIR_MODULE
 4740   1        U8 airlink;
 4741   1        if((airlink = MMI_AIR_GetAirLink(PRODUCT_AIR_TWS)) != MMI_EOF)
 4742   1        {
 4743   2          #ifndef TWS_SETTINGS
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 75  

                   if(A2DP_IsLinkFollower(airlink))
                     return;
               
                   if(A2DP_IsLinkRelayer(airlink))
                   #endif
 4749   2          {
 4750   3            #ifdef AVRCP_Profile
 4751   3            MMI_AVRCP_SendVendorUnique(airlink, AVRCP_VENDOR_UNIQ_SYNC_AND_SWITCH_AUDIO_TRANSPARENCY, (gMMI_ctl.is
             -AudioTransparencyEnable)? FALSE:TRUE);
 4752   3            #endif
 4753   3          }
 4754   2        }
 4755   1        #endif
 4756   1        if(!gMMI_ctl.isAudioTransparencyEnable)
 4757   1        {
 4758   2          if(gMMI_ctl.mmiTimerInfo.sysTimer.waitATTriggerMediaTimer == (OST XDATA_PTR) NULL)
 4759   2            SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.sysTimer.waitATTriggerMediaTimer,(U32) 640L);
 4760   2          MMI_PushMediaEvent(MEDIA_EVT_KEY_AUDIO_TRANSPARENCY);
 4761   2        }
 4762   1        else
 4763   1        {
 4764   2          MMI_DRV_Switch_AudioTransparency((gMMI_ctl.isAudioTransparencyEnable)? FALSE:TRUE);
 4765   2          MMI_PushMediaEvent(MEDIA_EVT_KEY_AUDIO_TRANSPARENCY);
 4766   2        }
 4767   1        UNUSED(linkIndex);
 4768   1      }
 4769          
 4770          PUBLIC void MMI_DRV_Switch_AudioTransparency(BOOL isEnable)
 4771          {
 4772   1        MMIMsgType XDATA_PTR msgPtr;
 4773   1        if(gMMI_ctl.isAudioTransparencyEnable == isEnable)
 4774   1          return;
 4775   1      
 4776   1        if((msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_AUDIO_TRANSPARENCY_CMD)) != (MMIMsgType XDATA_PTR)NULL)
 4777   1        {
 4778   2          MMI_LineIn_SendDriverVolCmd();
 4779   2      
 4780   2          gMMI_ctl.isAudioTransparencyEnable = isEnable;
 4781   2          LightDbgPrint("MMI Audio Transparency:%d",(U8) gMMI_ctl.isAudioTransparencyEnable);
 4782   2          msgPtr->msgBodyPtr.driverCmd.audioTransparencyCmd.isEnable = isEnable;
 4783   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 4784   2        }
 4785   1      }
 4786          
 4787          PUBLIC BOOL MMI_GetAudioTransparencyEnable(void)
 4788          {
 4789   1        return gMMI_ctl.isAudioTransparencyEnable ? TRUE : FALSE;
 4790   1      }
 4791          #endif
 4792          
 4793          PRIVATE void MMI_DRV_KeyRoleChange(U8 linkIndex)
 4794          {
 4795   1        #ifdef AIR_MODULE
 4796   1        MMI_AIR_KeyRoleChange(linkIndex);
 4797   1        #else
                 UNUSED(linkIndex);
                 #endif
 4800   1      }
 4801          
 4802          PUBLIC void MMI_DRV_ResumeDSP(U8 reason)
 4803          {
 4804   1        DRIVER_Cmd_ClearSuspendDSPReason(reason);
 4805   1        if(!DRIVER_Query_IsDSPSuspending())
 4806   1          MMI_DRV_ResumeCurrentAudio();
 4807   1      }
 4808          
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 76  

 4809          PUBLIC void MMI_DRV_SuspendDSP(U8 reason, VFUN callback)
 4810          {
 4811   1        if(gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_MUSIC || gMMI_ctl.audioDevCtl.currentActiveDev 
             -== AUDIO_DEVICE_MUSIC_CALL_NOTIFY || gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_AVRCP_PLAY)
 4812   1        {
 4813   2          MMI_A2DP_StopDSP(gMMI_ctl.audioDevCtl.currentActiveLinkIndex);
 4814   2        }
 4815   1        else if (gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_LINE_IN)
 4816   1        {
 4817   2          MMI_RmvState(MMI_EOF, MMI_LINE_IN);
 4818   2        }
 4819   1        #ifdef DEMOSOUND
                 else if(gMMI_ctl.audioDevCtl.currentActiveDev == AUDIO_DEVICE_DEMO_SOUND)
                 {
                   MMI_A2DP_DemoSoundStopCmd();
                 }
                 #endif
 4825   1      
 4826   1        DRIVER_Cmd_SuspendDSP(reason, callback);
 4827   1      }
 4828          
 4829          PUBLIC void MMI_DRV_ADCRealTimeReading(U8 channel)
 4830          {
 4831   1        S16 ADCValue;
 4832   1      
 4833   1        ADCValue = DRIVER_TEMP_ADCDataReport();
 4834   1        MMI_HCI_SendToolCommandResponseWithData(HCI_VCMD_OCF_TOOL_GET_ADC_DATA, HCI_VEVT_OCF_RESULT_CODE_SUCCESS
             -, ADCValue);
 4835   1        UNUSED(channel);
 4836   1      }
 4837          
 4838          PUBLIC U8 MMI_DRV_GetAudioInMusicLink(void)
 4839          {
 4840   1        return gMMI_ctl.audioableA2DPLink;
 4841   1      }
 4842          
 4843          
 4844          
 4845          PUBLIC U8 MMI_DRV_WriteFlashAfterRingtoneVPStopped(void)
 4846          {
 4847   1      
 4848   1        if((MMI_NEEDS_TO_UPDATE_NVRAM()) && !gSYS_update_by_uart_flash_command && MMI_POWER_DROP_SAVE_LINK_HISTO
             -RY_FEAT)
 4849   1        {
 4850   2          #ifdef AIR_MODULE
 4851   2          if(MMI_AIR_PreProcessForWriteFlashAfterRingVP())
 4852   2          {
 4853   3            return PENDING_TO_WRITE_FLASH;
 4854   3          }
 4855   2          else
 4856   2          #endif
 4857   2          {
 4858   3            return DIRECTLY_WRITE_FLASH;
 4859   3          }
 4860   2        }
 4861   1        return NO_FLASH_WRITTEN_NEEDED;
 4862   1      }
 4863          
 4864          PUBLIC U8 MMI_DRV_SwitchScoToLink(U8 linkIndex)
 4865          {
 4866   1        if(gMMI_ctl.driverCtl.audioSwitchState == MMI_AUDIO_SWITCH_WAITING_HCI_EVT)
 4867   1          return AUDIO_SWITCH_RESULT_PENDING;
 4868   1      
 4869   1        if((linkIndex < MAX_MULTI_POINT_NO) && (gMMI_ctl.driverCtl.audioSwitchHandler != gMMI_ctl.mmiInfo[linkIn
             -dex].linkPara.scoConnHandle))
 4870   1        {
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 77  

 4871   2          switch(gMMI_ctl.driverCtl.audioSwitchState)
 4872   2          {
 4873   3            case MMI_AUDIO_SWITCH_ILDE:
 4874   3              if(MMI_HCI_SendVCmdAudioSwitch(linkIndex))
 4875   3              {
 4876   4                gMMI_ctl.driverCtl.audioSwitchState = MMI_AUDIO_SWITCH_WAITING_HCI_EVT;
 4877   4                return AUDIO_SWITCH_RESULT_PENDING;
 4878   4              }
 4879   3              return AUDIO_SWITCH_RESULT_FAIL;
 4880   3            case MMI_AUDIO_SWITCH_WAITING_HCI_EVT:
 4881   3              return AUDIO_SWITCH_RESULT_PENDING;
 4882   3      
 4883   3            case MMI_AUDIO_SWITCH_ERROR:
 4884   3            default:
 4885   3              gMMI_ctl.driverCtl.audioSwitchState = MMI_AUDIO_SWITCH_ILDE;
 4886   3              return AUDIO_SWITCH_RESULT_FAIL;
 4887   3          }
 4888   2        }
 4889   1        return AUDIO_SWITCH_RESULT_OK;
 4890   1      }
 4891          
 4892          PUBLIC void MMI_DRV_SetAudioSwitchState(U8 state)
 4893          {
 4894   1        gMMI_ctl.driverCtl.audioSwitchState = state;
 4895   1      }
 4896          
 4897          PUBLIC U8 MMI_DRV_GetAudioSwitchState(void)
 4898          {
 4899   1        return gMMI_ctl.driverCtl.audioSwitchState;
 4900   1      }
 4901          
 4902          PUBLIC BOOL MMI_DRV_IsScoInCVSD(U8 linkIndex)
 4903          {
 4904   1        return (gMMI_ctl.mmiInfo[linkIndex].linkPara.scoCodecType == SCO_CODEC_CVSD) ? TRUE : FALSE;
 4905   1      }
 4906          
 4907          PUBLIC void MMI_DRV_EnableVoicePrompt(void)
 4908          {
 4909   1        gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled &= ~IS_VP_DISABLED;
 4910   1        gMMI_DRV_ctl.isMiscEnabled &= ~IS_VP_DISABLED;
 4911   1        MMI_SECTOR_SetUpdateFlag(TRUE);
 4912   1      }
 4913          
 4914          PUBLIC void MMI_DRV_DisableVoicePrompt(void)
 4915          {
 4916   1        gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled |= IS_VP_DISABLED;
 4917   1        gMMI_DRV_ctl.isMiscEnabled |= IS_VP_DISABLED;
 4918   1        MMI_SECTOR_SetUpdateFlag(TRUE);
 4919   1      }
 4920          
 4921          PUBLIC BOOL MMI_DRV_IsVoicePromptEnabled(void)
 4922          {
 4923   1        return (gMMI_DRV_ctl.isMiscEnabled & IS_VP_DISABLED) ? FALSE : TRUE;
 4924   1      }
 4925          
 4926          
 4927          
 4928          #ifdef AUDIO_BIST
 4929            #include "MMI_AudioBIST.c"
 4930          #endif //AUDIO_BIST
 4931          
 4932          PRIVATE void MMI_DRV_Key2KToneEnable(U8 linkIndex)
 4933          {
 4934   1        #ifdef AUDIO_BIST
 4935   1        MMI_DRV_AudioBistEnableVoiceCmd(VOICE_2M_L_REPORT_SINGLE_SNP);
 4936   1        #endif
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 78  

 4937   1        UNUSED(linkIndex);
 4938   1      }
 4939          
 4940          PRIVATE void MMI_DRV_Key2KToneDisable(U8 linkIndex)
 4941          {
 4942   1        MMI_StopA2DPOrSCOCmd(linkIndex, FALSE);
 4943   1      }
 4944          
 4945          PUBLIC void MMI_DRV_ScoModeControl(U8 linkIndex, BOOL isECNRDisable, BOOL isLightMono)
 4946          {
 4947   1      #if defined SUPPORT_VOICE_COMMAND || defined ECNR_OFF_IN_NORMAL_SCO
 4948   1        MMIMsgType XDATA_PTR msgPtr;
 4949   1      
 4950   1        #ifdef AIR_MODULE
 4951   1        if(gMMI_Air_ctl.SCOAudioFSSel == 0xFF)
 4952   1          return;
 4953   1        #endif
 4954   1      
 4955   1        if((msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_SCO_MODE_CONTROL_CMD)) != (MMIMsgType XDATA_PTR)NULL)
 4956   1        {
 4957   2          MMI_DRV_SetSCOPara(linkIndex, msgPtr);
 4958   2          #ifdef ECNR_OFF_IN_NORMAL_SCO
                   msgPtr->msgBodyPtr.driverCmd.scoCmd.enablePara.scoPara.isECNROn = (isECNRDisable)?FALSE:TRUE;
                   #else
 4961   2          msgPtr->msgBodyPtr.driverCmd.scoCmd.enablePara.scoPara.isECNROn = TRUE;
 4962   2          UNUSED(isECNRDisable);
 4963   2          #endif
 4964   2          #ifdef SUPPORT_VOICE_COMMAND
 4965   2          msgPtr->msgBodyPtr.driverCmd.scoCmd.enablePara.scoPara.isLightMonoMode = (isLightMono)?TRUE:FALSE;
 4966   2          #else
                   msgPtr->msgBodyPtr.driverCmd.scoCmd.enablePara.scoPara.isLightMonoMode = FALSE;
                   UNUSED(isLightMono);
                   #endif
 4970   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 4971   2        }
 4972   1      #else
                 UNUSED(linkIndex);
                 UNUSED(isECNRDisable);
                 UNUSED(isLightMono);
               #endif
 4977   1      }
 4978          
 4979          PUBLIC void MMI_DRV_SendAsyncSCOEnableCmd(U8 linkIndex)
 4980          {
 4981   1        MMIMsgType XDATA_PTR msgPtr;
 4982   1      
 4983   1        if((msgPtr = MMI_GetMMIMsgTypeCmdMemory(DRIVER_ASYNC_SCO_CMD)) != (MMIMsgType XDATA_PTR)NULL)
 4984   1        {
 4985   2          msgPtr->msgBodyPtr.driverCmd.scoCmd.linkInd = linkIndex;
 4986   2      
 4987   2          OSMQ_Put(OSMQ_DRIVER_Command_ptr, (U8 XDATA_PTR)msgPtr);
 4988   2          //#ifdef DBG_UART_ENABLE_MMI
 4989   2          LightDbgPrint("MMI_SendAsyncSCOEnableCmd:%d", (U8)linkIndex);
 4990   2          //#endif
 4991   2        }
 4992   1      }
 4993          
 4994          
 4995          PUBLIC void MMI_DRV_FlashStartUpdating(void)
 4996          {
 4997   1        if(!DRIVER_Query_IsWaitingDSPSuspend(DRV_SUSPEND_DSP_REASON_FOTA))
 4998   1        {
 4999   2          MMI_AddTopState(MMI_EOF, MMI_UPDATING);
 5000   2          MMI_DRV_SuspendDSP(DRV_SUSPEND_DSP_REASON_FOTA, FAR_NULL);
 5001   2        }
 5002   1        gSYS_update_by_uart_flash_command = TRUE;
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 79  

 5003   1      }
 5004          
 5005          PUBLIC void MMI_DRV_FlashUpdateFail(void)
 5006          {
 5007   1        gSYS_update_by_uart_flash_command = FALSE;
 5008   1        MMI_DRV_ResumeDSP(DRV_SUSPEND_DSP_REASON_FOTA);
 5009   1        MMI_AddTopState(MMI_EOF, MMI_UPDATED_FAIL);
 5010   1        #ifdef AIRAPP_Profile
 5011   1        AirApp_OTAFail();
 5012   1        #endif
 5013   1        SYS_ReleaseTimer(&gMMI_ctl.mmiTimerInfo.sysTimer.waitForOTAPacketTimer);
 5014   1      }
 5015          
 5016          PUBLIC void MMI_DRV_FlashUpdateEnd(void)
 5017          {
 5018   1        gSYS_update_by_uart_flash_command = FALSE;
 5019   1        MMI_DRV_ResumeDSP(DRV_SUSPEND_DSP_REASON_FOTA);
 5020   1        MMI_RmvState(MMI_EOF, MMI_UPDATING);
 5021   1        SYS_ReleaseTimer(&gMMI_ctl.mmiTimerInfo.sysTimer.waitForOTAPacketTimer);
 5022   1      }
 5023          
 5024          PUBLIC void MMI_DRV_GetFlashUpdatePacket(void)
 5025          {
 5026   1        SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.sysTimer.waitForOTAPacketTimer, 5 * ONE_SEC);
 5027   1      }
 5028          
 5029          PUBLIC BOOL MMI_DRV_OTAVoicepromptsExist(void)
 5030          {
 5031   1        BOOL exist;
 5032   1        exist = MMI_DRV_IsOTAVoicepromptsExisting();
 5033   1        
 5034   1        if(AUDIO_COMPONENT_IS_ACTIVE(AUDIO_VOICEPROMPT))
 5035   1        {
 5036   2          exist = TRUE;
 5037   2        }
 5038   1      
 5039   1        if(DRIVER_Query_IsDSPSuspending())
 5040   1              return FALSE;
 5041   1      
 5042   1        if(DRIVER_GetVoicepromptsNumberInQueue() != 0)
 5043   1        {
 5044   2          exist = TRUE;
 5045   2        }
 5046   1      
 5047   1        return exist;
 5048   1      }
 5049          
 5050          PUBLIC void MMI_DRV_SetOTAVoicepromptsExist(BOOL exist)
 5051          {
 5052   1        gDriver_ctl.OTAVoicepromptsExist = exist;
 5053   1      }
 5054          
 5055          PUBLIC BOOL MMI_DRV_IsOTAVoicepromptsExisting(void)
 5056          {
 5057   1        return gDriver_ctl.OTAVoicepromptsExist;
 5058   1      }
 5059          
 5060          #ifdef AIRAPP_Profile
 5061          PUBLIC BOOL MMI_DRV_IsDSPLockedByOTA(void)
 5062          {
 5063   1        return AirApp_IsDSPLockedByOTA();
 5064   1      }
 5065          #endif


Module Information          Static   Overlayable
------------------------------------------------
C251 COMPILER V5.57.0,  MMI_Driver                                                         08/11/20  05:52:15  PAGE 80  

  code size            =    ------     ------
  ecode size           =     16988     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       104     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =      1868     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
