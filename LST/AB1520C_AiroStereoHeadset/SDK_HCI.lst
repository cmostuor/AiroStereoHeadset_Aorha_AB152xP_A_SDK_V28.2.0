C251 COMPILER V5.57.0,  SDK_HCI                                                            08/11/20  05:53:52  PAGE 1   


C251 COMPILER V5.57.0, COMPILATION OF MODULE SDK_HCI
OBJECT MODULE PLACED IN .\output\AB1520C_AiroStereoHeadset\SDK_HCI.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE source\SDK\Profile\SDK_HCI.c XSMALL HPTR FUNCTIONS(REENTRANT) ROM(HUGE
                    -) WARNINGLEVEL(3) OPTIMIZE(9,SPEED) BROWSE ORDER INCDIR(.\source\COMMON;.\source\SECTOR;.\source\ABSDRIVER;.\source\OS;.
                    -\source\HC;.\source\LM;.\source\LC;.\source\ROM;.\source\ROM\COMMON;.\source\ROM\OS;.\source\ROM\HC;.\source\ROM\LL;.\so
                    -urce\ROM\LC;.\source\ROM\HAL;.\source\ROM\KERNEL;.\source\ROM\DRIVER;.\source\ROM\L2CAP;.\source\ROM\GAP;.\source\ROM\MM
                    -I_LE;.\source\ROM\SECTOR;.\source\ROM\SECTOR\Config0;.\source\SECTOR\Config0;.\source\SECTOR\Config1;.\source\SECTOR\Dsp
                    -Data;.\source\SECTOR\Runtime;.\source\SECTOR\VoiceData;.\source\SECTOR\SectorBoundary;.\source\SECTOR\ToolMisc) DEFINE(F
                    -LASH_INIT=1,AB1520C,MIGRATE_ROM_TO_FLASH,DFU_LOADER_IN_BOOT_CODE,TWS_SETTINGS) DEBUG PRINT(.\LST\AB1520C_AiroStereoHeads
                    -et\SDK_HCI.lst) TABS(2) OBJECT(.\output\AB1520C_AiroStereoHeadset\SDK_HCI.obj) 

stmt  level    source

    1          #include "reside_flash.inc"
    2          
    3          #include "rc.h"
    4          #include "..\SDK_Proxy\SDK_Proxy.h"
    5          #include "..\SDK\include\SDK_Config.h"
    6          
    7          #if SDK_HCI
               #include "..\MMI\MMI_Base.h"
               #include "..\MMI\MMI_HCI.h"
               #include "..\ROM\HC\HC_interface.h"
               #include "..\SDK\include\SDK_HCI.h"
               
               /*
                 Inquiry mode can be decide in sector_hc_paramter_type.c
               */
               PUBLIC U8 SDK_HCI_InquiryCmd(U8 XDATA_PTR LapPtr, U8 inquiryLen, U8 numResps)
               {
                 MMIMsgType XDATA_PTR msgPtr;
               
                 if(MMI_HCI_IsInquiryOnGoing())
                   return HCI_CMD_BUSY;
               
                 if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_INQUIRY)) != (MMIMsgType XDATA_PTR)NULL)
                 {
                   msgPtr->paraLen = sizeof(HCI_CMD_PARA_INQ_STRU); //5;   
                   OSMEM_memcpy_xdata_xdata((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.inquiryCmd.Lap[0], LapPtr, sizeof(LAP
             -_ARR));
                   msgPtr->msgBodyPtr.hciCmd.inquiryCmd.InquiryLength = inquiryLen; //inquiryLen * 1.28 Second
                   msgPtr->msgBodyPtr.hciCmd.inquiryCmd.NumResponses = numResps; // numResps
                   MMI_HCI_SendCmd(msgPtr);
               
                   MMI_HCI_SetInquiryOnGoing(INQUIRY_BUSY_SDK);
                   LightDbgPrint("SDK Send Inquiry Cmd");
                   return HCI_CMD_OK;
                 }
                 return HCI_CMD_FAIL;
               }
               
               PUBLIC void SDK_HCI_InquiryCmdStatus(U8 status)
               {
                 MMI_HCI_SetInquiryOnGoing((status != STATUS_OK) ? INQUIRY_IDLE : INQUIRY_OK_SDK);
               }
               
               PUBLIC void SDK_HCI_InquiryCplEvt(U8 status)
               {
                 MMI_HCI_SetInquiryOnGoing(INQUIRY_IDLE);
                 UNUSED(status);
                 LightDbgPrint("SDK Get InquiryCpl");
               }
               
               PUBLIC void SDK_HCI_InquiryResultEvt(U8 XDATA_PTR evtPtr)
               {
C251 COMPILER V5.57.0,  SDK_HCI                                                            08/11/20  05:53:52  PAGE 2   

                 //HCI_EVT_PARA_INQ_RST_STRU XDATA_PTR paraPtr = (HCI_EVT_PARA_INQ_RST_STRU XDATA_PTR)evtPtr;
                 UNUSED(evtPtr);
                 LightDbgPrint("SDK Get InquiryResult");
               }
               
               PUBLIC void SDK_HCI_InquiryResultRSSIEvt(U8 XDATA_PTR evtPtr)
               {
                 //HCI_EVT_PARA_INQ_RST_WITH_RSSI_STRU XDATA_PTR paraPtr = (HCI_EVT_PARA_INQ_RST_WITH_RSSI_STRU XDATA_PTR
             -)evtPtr;
                 UNUSED(evtPtr);
                 LightDbgPrint("SDK Get InquiryResultRSSI");
               }
               
               PUBLIC void SDK_HCI_ExtInquiryResultEvt(U8 XDATA_PTR evtPtr)
               {
                 //HCI_EVT_PARA_EXT_INQ_RST_STRU XDATA_PTR paraPtr = (HCI_EVT_PARA_EXT_INQ_RST_STRU XDATA_PTR)evtPtr;
                 UNUSED(evtPtr);
                 LightDbgPrint("SDK Get ExtInquiryResult");
               }
               
               PUBLIC void SDK_HCI_InquiryCancelCmd(void)
               {
                 if(INQUIRY_OK_SDK == MMI_HCI_GetInquiryState())
                   MMI_HCI_SendInquiryCancel();
               }
               
               PUBLIC void SDK_HCI_InquiryCancelCmdCplEvt(U8 status)
               {
                 MMI_HCI_SetInquiryOnGoing(INQUIRY_IDLE);
                 UNUSED(status);
               }
               
               
               PUBLIC BOOL SDK_HCI_IsRoleMaster(U8 linkIndex)
               {
                 return MMI_IsRoleOfMaster(linkIndex);
               }
               
               PUBLIC BOOL SDK_HCI_IsRoleSlave(U8 linkIndex)
               {
                 return MMI_IsRoleOfSlave(linkIndex);
               }
               
               PUBLIC void SDK_HCI_SwitchRoleCmd(U8 linkIndex, U8 role)
               {
                 if(role == SDK_ROLE_MASTER && SDK_HCI_IsRoleMaster(linkIndex))
                   return;
                   
                 if(role == SDK_ROLE_SLAVE && SDK_HCI_IsRoleSlave(linkIndex))
                   return;
               
                 MMI_HCI_SendSwitchRole(linkIndex, (role == SDK_ROLE_SLAVE)?ROLE_SLAVE:ROLE_MASTER);
               }
               
               PUBLIC void SDK_HCI_RoleChangedEvt(U8 linkIndex, U8 status, U8 role)
               {
                 if(role == ROLE_MASTER)
                 {
                   LightDbgPrint("SDK RoleChangedEvtM:%d,%d",(U8)linkIndex, (U8)status);
                 }
                 else
                 {
                   LightDbgPrint("SDK RoleChangedEvtS:%d,%d",(U8)linkIndex, (U8)status);
                 }
                 UNUSED(linkIndex);
                 UNUSED(status);
C251 COMPILER V5.57.0,  SDK_HCI                                                            08/11/20  05:53:52  PAGE 3   

                 UNUSED(role);
               }
               
               PUBLIC void SDK_HCI_WritePageTimeoutEvt(U16 page_timeout)
               {
                 MMI_HCI_SendWritePageTimeOut(page_timeout);
               }
               #endif
  125          
  126          
  127          PUBLIC void SDK_HCI_Init(void)
  128          {
  129   1      #if SDK_HCI
                 SDK_Proxy_RegisterAPI( API_GRP_PF_CB_HCI_INQUIRY_CMD_STATUS, API_GRP_PROFILE, (VFUN)SDK_HCI_InquiryCmdSt
             -atus);
                 SDK_Proxy_RegisterAPI( API_GRP_PF_CB_HCI_INQUIRY_CPL_EVT, API_GRP_PROFILE, (VFUN)SDK_HCI_InquiryCplEvt);
                 SDK_Proxy_RegisterAPI( API_GRP_PF_CB_HCI_INQUIRY_RESULT_EVT, API_GRP_PROFILE, (VFUN)SDK_HCI_InquiryResul
             -tEvt);
                 SDK_Proxy_RegisterAPI( API_GRP_PF_CB_HCI_INQUIRY_RESULT_RSSI_EVT, API_GRP_PROFILE, (VFUN)SDK_HCI_Inquiry
             -ResultRSSIEvt);
                 SDK_Proxy_RegisterAPI( API_GRP_PF_CB_HCI_EXT_INQUIRY_RESULT_EVT, API_GRP_PROFILE, (VFUN)SDK_HCI_ExtInqui
             -ryResultEvt);
                 SDK_Proxy_RegisterAPI( API_GRP_PF_CB_HCI_INQ_CANCEL_CMD_CPL_EVT, API_GRP_PROFILE, (VFUN)SDK_HCI_InquiryC
             -ancelCmdCplEvt);
                 SDK_Proxy_RegisterAPI( API_GRP_PF_CB_HCI_ROLE_CHANGED_EVT, API_GRP_PROFILE, (VFUN)SDK_HCI_RoleChangedEvt
             -);
                 SDK_Proxy_RegisterAPI( API_GRP_PF_CB_HCI_WRITE_PAGE_TIMEOUT_EVT, API_GRP_PROFILE, (VFUN)SDK_HCI_WritePag
             -eTimeoutEvt);
               #endif
  139   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =         1     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
