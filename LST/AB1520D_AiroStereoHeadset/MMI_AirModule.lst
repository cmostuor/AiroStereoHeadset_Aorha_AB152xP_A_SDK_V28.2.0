C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 1   


C251 COMPILER V5.57.0, COMPILATION OF MODULE MMI_AirModule
OBJECT MODULE PLACED IN .\output\AB1520D_AiroStereoHeadset\MMI_AirModule.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE source\MMI\MMI_AirModule.c XSMALL HPTR FUNCTIONS(REENTRANT) ROM(HUGE) 
                    -WARNINGLEVEL(3) OPTIMIZE(9,SPEED) BROWSE ORDER INCDIR(.\source\COMMON;.\source\SECTOR;.\source\ABSDRIVER;.\source\OS;.\s
                    -ource\HC;.\source\LM;.\source\LC;.\source\ROM;.\source\ROM\COMMON;.\source\ROM\OS;.\source\ROM\HC;.\source\ROM\LL;.\sour
                    -ce\ROM\LC;.\source\ROM\HAL;.\source\ROM\KERNEL;.\source\ROM\DRIVER;.\source\ROM\L2CAP;.\source\ROM\GAP;.\source\ROM\MMI_
                    -LE;.\source\ROM\SECTOR;.\source\ROM\SECTOR\Config0;.\source\SECTOR\Config0;.\source\SECTOR\Config1;.\source\SECTOR\DspDa
                    -ta;.\source\SECTOR\Runtime;.\source\SECTOR\VoiceData;.\source\SECTOR\SectorBoundary;.\source\SECTOR\ToolMisc) DEFINE(FLA
                    -SH_INIT=1,AB1520D,MIGRATE_ROM_TO_FLASH,DFU_LOADER_IN_BOOT_CODE,TWS_SETTINGS) DEBUG PRINT(.\LST\AB1520D_AiroStereoHeadset
                    -\MMI_AirModule.lst) TABS(2) OBJECT(.\output\AB1520D_AiroStereoHeadset\MMI_AirModule.obj) 

stmt  level    source

    1          #include "reside_flash.inc"
    2          
    3          #define _MMI_AIRMODULE_C_
    4          
    5          #include "rc.h"
    6          #include "bt_config_profile.h"
    7          
    8          #include "..\L2CAP\L2CAP_Interface.h"
    9          
   10          #ifdef AIR_MODULE
   11          #include "MMI.h"
   12          #include "MMI_AirModule.h"
   13          #include "MMI_State.h"
   14          #include "MMI_Protocol.h"
   15          #include "MMI_HCI.h"
   16          #include "MMI_A2DP.h"
   17          #include "MMI_AVRCP.h"
   18          #include "MMI_Driver.h"
   19          #include "MMI_LineIn.h"
   20          #include "MMI_Reconnect.h"
   21          #include "MMI_SDAP.h"
   22          #include "MMI_LED.h"
   23          #include "..\A2DP\A2DP_Interface.h"
   24          #include "..\AVRCP\AVRCP_Interface.h"
   25          #ifdef SAME_SW_DIFF_MODULE
               #include "drv_gpio.h"
               #endif
   28          #include "..\LM\LM_Interface.h"
   29          #include "..\SECTOR\sector_mmi_nvram_type.h"
   30          #include "..\Driver\Driver_1520.h"
   31          
   32          
   33          PRIVATE void MMI_AIR_RelayPassThroughComands(U8 linkIndex, U8 keyEvtCode);
   34          
   35          
   36          
   37          
   38          extern MmiHandlerSetType CODE_PTR XDATA MMI_StateHandlerSet[MMI_TOTAL_STATE_NO];
   39          extern PUBLIC MMI_KEY_CHECK MMI_AIR_KeyCheckValidHandler[AIR_KEY_EVENT_NO];
   40          extern PUBLIC MMI_KEY_EVT MMI_AIR_KeyEvtHandler[AIR_KEY_EVENT_NO];
   41          extern PUBLIC MmiHandlerSetType MMI_StateTWSPairingHandler;
   42          
   43          
   44          PUBLIC void MMI_AIR_ProcessKeyEvent(U8 linkIndex, U8 index)
   45          {
   46   1        if(MMI_AIR_KeyEvtHandler[index].fKeyEvt)
   47   1        {
   48   2          MMI_AIR_KeyEvtHandler[index].fKeyEvt(linkIndex);
   49   2        }
   50   1      }
   51          
   52          PUBLIC U16 MMI_AIR_CheckValidKey(U8 index, U16 keyCode)
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 2   

   53          {
   54   1        if(MMI_AIR_KeyCheckValidHandler[index].fKeyCheckValid)
   55   1        {
   56   2          keyCode = MMI_AIR_KeyCheckValidHandler[index].fKeyCheckValid(keyCode);
   57   2        }
   58   1        return keyCode;
   59   1      }
   60          
   61          PUBLIC BOOL MMI_AIR_CheckHFPKeyValid(void)
   62          {
   63   1        #ifdef A2DP_Profile
   64   1        if(A2DP_IsLinkFollower(gMMI_ctl.serviceInd) || A2DP_IsLinkRelayer(gMMI_ctl.serviceInd))
   65   1          return FALSE;
   66   1        #endif
   67   1      
   68   1        return TRUE;
   69   1      }
   70          
   71          PUBLIC BOOL MMI_AIR_CheckAVRCPKeyValid(U16 keyCode)
   72          {
   73   1        #ifdef A2DP_Profile
   74   1        if(A2DP_IsLinkFollower(gMMI_ctl.serviceInd))
   75   1        {
   76   2          MMI_DRV_KeyEventHandler(gMMI_ctl.serviceInd, keyCode);
   77   2          return FALSE;
   78   2        }
   79   1        #else
                 UNUSED(keyCode);
                 #endif
   82   1        return TRUE;
   83   1      }
   84          
   85          PUBLIC void MMI_AIR_StartPairing(BOOL isSecurePairing)
   86          {
   87   1        gMMI_Air_ctl.isInPairing = TRUE;
   88   1        gMMI_Air_ctl.isSecurePairing = isSecurePairing;
   89   1        MMI_AddTopState(MMI_EOF, MMI_TWS_PAIRING);
   90   1      }
   91          
   92          PUBLIC void MMI_AIR_StopPairing(void)
   93          {
   94   1        gMMI_Air_ctl.isInPairing = FALSE;
   95   1        gMMI_Air_ctl.isSecurePairing = FALSE;
   96   1        SYS_ReleaseTimer (&gMMI_Air_ctl.stateTimeOutTimer);
   97   1        SYS_ReleaseTimer (&gMMI_Air_ctl.stateReminderTimer);
   98   1        if(MMI_CheckNestState(MMI_EOF, MMI_TWS_PAIRING))
   99   1        {
  100   2          MMI_RmvState(MMI_EOF, MMI_TWS_PAIRING);
  101   2        }
  102   1      }
  103          
  104          PUBLIC void MMI_AIR_ResumePairing(void)
  105          {
  106   1        if((MMI_AIR_GetAirLink(PRODUCT_AIR_SCO_WOOFER|PRODUCT_AIR_SOUNDBAR|PRODUCT_AIR_TWS) == MMI_EOF) && (MMI_
             -KEY_STATE_POWER_OFF != MMI_GetKeyState()))
  107   1        {
  108   2          if(gMMI_Air_ctl.isInPairing)
  109   2          {
  110   3            MMI_AddTopState(MMI_EOF, MMI_TWS_PAIRING);  
  111   3          }
  112   2        }
  113   1        else
  114   1        {
  115   2          gMMI_Air_ctl.isInPairing = FALSE;
  116   2        }
  117   1      }
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 3   

  118          
  119          PUBLIC void MMI_AIR_SuspendPairing(void)
  120          {
  121   1        if(MMI_CheckNestState(MMI_EOF, MMI_TWS_PAIRING))
  122   1        {
  123   2          MMI_RmvState(MMI_EOF, MMI_TWS_PAIRING);
  124   2        }
  125   1      }
  126          
  127          PUBLIC void MMI_AIR_KeyEnterPairing(U8 linkIndex)
  128          {
  129   1        UNUSED(linkIndex);
  130   1        if((gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled & IS_MP_TEST_MODE_ENABLE) || MMI_CheckBootF
             -lag(SYS_SW1_BOOT_FLAG_ENTER_MP_TEST_MODE))
  131   1          return;
  132   1        else
  133   1          MMI_AIR_StartPairing(FALSE);
  134   1      }
  135          
  136          PUBLIC void MMI_AIR_KeyExitPairing(U8 linkIndex)
  137          {
  138   1        UNUSED(linkIndex);
  139   1        MMI_AIR_StopPairing();
  140   1      }
  141          
  142          PUBLIC void MMI_AIR_KeyEnterSecurePairing(U8 linkIndex)
  143          {
  144   1        UNUSED(linkIndex);
  145   1        MMI_AIR_StartPairing(TRUE);
  146   1      }
  147          
  148          PUBLIC U16 MMI_AIR_CheckKeyEnterPairing(U16 keyCode)
  149          {
  150   1        if(MMI_AIR_GetAirLink(PRODUCT_AIR_SCO_WOOFER|PRODUCT_AIR_SOUNDBAR|PRODUCT_AIR_TWS) != MMI_EOF)
  151   1        {
  152   2          keyCode = KEY_INVALID;
  153   2        }
  154   1        return keyCode;
  155   1      }
  156          
  157          
  158          PUBLIC void MMI_TWS_PairingEntry (U8 linkIndex)
  159          {
  160   1        UNUSED(linkIndex);
  161   1      
  162   1        MMI_ConnectabilityHandle(CMD_SET_CONNECTABLE);
  163   1      
  164   1        
  165   1        if (MMI_IsUnderPage())
  166   1        {
  167   2          MMI_CancelCreateAcl();
  168   2        }
  169   1        MMI_Reconnect_ClearCtl();
  170   1        if(GET_PRODUCT_AIR_TYPE(MMI_PNP_PRODUCT_VER) == PRODUCT_AIR_SCO_WOOFER
  171   1          #ifdef PRODUCT_TYPE_K
                   || gMMI_nvram.twsKChannel == NVRAM_PROFILE_RIGHT
                   #endif
  174   1        )
  175   1        {
  176   2          MMI_HCI_SendInquiry(INQUIRY_LIAC);
  177   2        }
  178   1        else
  179   1        {
  180   2          MMI_DiscoverabilityHandle((gMMI_Air_ctl.isSecurePairing)?CMD_SPECIAL_LIMITED_DISCOVERABLE:CMD_LIMITED_D
             -ISCOVERABLE);
  181   2        }
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 4   

  182   1      
  183   1        MMI_PushMediaEvent(MEDIA_EVT_TWS_ENTER_PAIRING);
  184   1        gMMI_Air_ctl.found_rssi = 0;
  185   1        SYS_SetTimer (&gMMI_Air_ctl.stateTimeOutTimer, gMMI_nvram.timerCtl.twsPairingTimeout * (ONE_SEC * 1.28))
             -;
  186   1        SYS_SetTimer (&gMMI_Air_ctl.stateReminderTimer, gMMI_nvram.timerCtl.twsPairingRemindTime * (ONE_SEC/10))
             -;
  187   1        MMI_PowerSaving(FALSE, MMI_PWRSAVING_WRITE_CONNECTABILITY, MAX_MULTI_POINT_NO);
  188   1      }
  189          
  190          PRIVATE void MMI_AIR_SendCreateConnectionToInquiryDevice(void)
  191          {
  192   1        U8 linkIndex;
  193   1        if((linkIndex = MMI_GetEmptyLinkIndex((U8 XDATA_PTR)&gMMI_Air_ctl.found_bd_addr, TRUE)) < MAX_MULTI_POIN
             -T_NO)
  194   1        {
  195   2          gMMI_Air_ctl.found_rssi = 0;
  196   2          MMI_HCI_SendCreateConnection (  linkIndex,
  197   2                          (U8 XDATA_PTR)&gMMI_Air_ctl.found_bd_addr, 
  198   2                          RECONNECT_TWS_PAIRING, 
  199   2                          (U8 XDATA_PTR)&gMMI_Air_ctl.found_classOfDev);
  200   2        }
  201   1      }
  202          
  203          PRIVATE BOOL MMI_AIR_CheckInquiryResults(void)
  204          {
  205   1        return (gMMI_Air_ctl.found_rssi)? TRUE : FALSE;
  206   1      }
  207          
  208          PUBLIC void MMI_TWS_PairingExit (U8 linkIndex)
  209          {
  210   1        UNUSED(linkIndex);
  211   1        MMI_HCI_SendInquiryCancel();
  212   1        MMI_DiscoverabilityHandle(CMD_SET_NON_DISCOVERABLE);
  213   1      
  214   1        if(MMI_AIR_CheckInquiryResults())
  215   1        {
  216   2          MMI_AIR_SendCreateConnectionToInquiryDevice();
  217   2        }
  218   1        MMI_PowerSaving(TRUE, MMI_PWRSAVING_WRITE_CONNECTABILITY, MAX_MULTI_POINT_NO);
  219   1        MMI_PushMediaEvent(MEDIA_EVT_TWS_EXIT_PAIRING);
  220   1      }
  221          
  222          PUBLIC BOOL MMI_AIR_IsAirLink(U8 linkIndex)
  223          {
  224   1        switch(gMMI_ctl.sdapCtl[linkIndex].remoteApplicationID)
  225   1        {
  226   2          case PRODUCT_AIR_SCO_WOOFER:
  227   2          case PRODUCT_AIR_SOUNDBAR:
  228   2          case PRODUCT_AIR_A2DP_WOOFER:
  229   2          case PRODUCT_AIR_TWS:
  230   2            return TRUE;
  231   2        }
  232   1        return FALSE;
  233   1      }
  234          
  235          PUBLIC U8 MMI_AIR_GetAirLink(U8 airType)
  236          {
  237   1        U8 linkIndex;
  238   1      
  239   1        for(linkIndex = 0; linkIndex < MAX_MULTI_POINT_NO; linkIndex++)
  240   1        {
  241   2          if(gMMI_ctl.sdapCtl[linkIndex].remoteApplicationID & airType)
  242   2          {
  243   3            return linkIndex;
  244   3          }
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 5   

  245   2        }
  246   1        return MMI_EOF;
  247   1      }
  248          
  249          PUBLIC void MMI_AIR_InvalidLinkHandle(U8 linkIndex)
  250          {
  251   1        MMI_LinkKey_DeleteLinkHistory((U8 XDATA_PTR)&gMMI_ctl.mmiInfo[linkIndex].bdAddr);
  252   1        #ifndef PRODUCT_TYPE_K
  253   1        MMI_LinkKey_DeleteAirLinkHistory((U8 XDATA_PTR)&gMMI_ctl.mmiInfo[linkIndex].bdAddr);
  254   1        #endif
  255   1        MMI_ReleaseProfileLinkAndDetach(linkIndex);
  256   1      }
  257          
  258          #if defined SCO_WOOFER || defined SOUND_BAR
                 #include "MMI_Air_SBWF.c"
               #endif
  261          #ifdef TWS_SETTINGS
  262            #ifdef PRODUCT_TYPE_A
  263              #include "MMI_Air_Share_A.c"
  264            #elif defined PRODUCT_TYPE_K
                   #include "MMI_Air_Share_K.c"
                 #else
                   #include "MMI_Air_Share.c"
                 #endif
  269          #elif defined SOUND_BAR || defined SCO_WOOFER
                 #include "MMI_Air_Share_A.c"
               #endif
  272          
  273          PUBLIC void MMI_AIR_Init(void)
  274          {
  275   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_Init();
               #elif defined PRODUCT_TYPE_K
                 MMI_Share_Init();
               #elif defined PRODUCT_TYPE_A
  280   1        MMI_Share_Init();
  281   1      #endif
  282   1        MMI_StateHandlerSet[MMI_TWS_PAIRING] = &MMI_StateTWSPairingHandler;
  283   1      }
  284          
  285          PUBLIC void MMI_AIR_CheckTimer(void)
  286          {
  287   1        if (SYS_IsTimerExpired (&gMMI_Air_ctl.stateTimeOutTimer))
  288   1        {
  289   2          MMI_AIR_StopPairing();
  290   2        }
  291   1        if (SYS_IsTimerExpired (&gMMI_Air_ctl.stateReminderTimer))
  292   1        {
  293   2          if(MMI_CheckNestState(MMI_EOF, MMI_TWS_PAIRING))
  294   2          {
  295   3            SYS_SetTimer(&gMMI_Air_ctl.stateReminderTimer,
  296   3              gMMI_nvram.timerCtl.twsPairingRemindTime*(ONE_SEC/10));
  297   3            MMI_PushMediaEvent(MEDIA_EVT_TWS_DURING_PAIRING);
  298   3          }
  299   2        }
  300   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_CheckTimer();
               #endif
  303   1      #ifdef TWS_SETTINGS 
  304   1        MMI_Share_CheckTimer();
  305   1      #endif
  306   1      }
  307          
  308          PUBLIC void MMI_AIR_AclDiscHandle(U8 linkIndex)
  309          {
  310   1        MMI_AIR_ResumePairing();
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 6   

  311   1        
  312   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_AclDiscHandle(linkIndex);
               #endif
  315   1      #ifdef TWS_SETTINGS
  316   1        MMI_Share_AclDiscHandle(linkIndex);
  317   1      #endif
  318   1        OSMEM_memset_xdata(&gMMI_Air_ctl.linkInfo[linkIndex], 0, sizeof(AirCtlLinkInfoType));
  319   1      }
  320          
  321          PUBLIC void MMI_AIR_GetInquiryComplete(void)
  322          {
  323   1        if(MMI_CheckNestState(MMI_EOF, MMI_TWS_PAIRING))
  324   1        {
  325   2          if (MMI_AIR_CheckInquiryResults())
  326   2          {
  327   3            MMI_AIR_SuspendPairing();
  328   3          }
  329   2          else
  330   2          {
  331   3            MMI_HCI_SendInquiry(INQUIRY_LIAC);
  332   3          }
  333   2        }
  334   1      }
  335          
  336          PUBLIC void MMI_AIR_GetInquiryResultWithRSSI(U8 rssi, U8 XDATA_PTR bdAddrPtr, U8 XDATA_PTR codPtr)
  337          {
  338   1        if (rssi > gMMI_Air_ctl.found_rssi && rssi > gMMI_nvram.inquiryRSSITH)
  339   1        {
  340   2          OSMEM_memcpy_xdata_xdata (  (U8 XDATA_PTR)&gMMI_Air_ctl.found_bd_addr,
  341   2                        bdAddrPtr,
  342   2                        sizeof(BD_ADDR));
  343   2          OSMEM_memcpy_xdata_xdata (  (U8 XDATA_PTR)&gMMI_Air_ctl.found_classOfDev,
  344   2                        codPtr,
  345   2                        3);
  346   2          gMMI_Air_ctl.found_rssi = rssi;
  347   2        }
  348   1      }
  349          
  350          PUBLIC void MMI_AIR_DecideStopInquiry(void)
  351          {
  352   1          if(MMI_AIR_CheckInquiryResults())
  353   1          {
  354   2              MMI_HCI_SendInquiryCancel();
  355   2          }
  356   1      }
  357          
  358          PUBLIC BOOL MMI_AIR_ReleaseLink(U8 linkIndex)
  359          {
  360   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 return MMI_SBWF_ReleaseLink(linkIndex);
               #else
  363   1        UNUSED(linkIndex);
  364   1        return FALSE;
  365   1      #endif
  366   1      }
  367          
  368          PRIVATE void MMI_AIR_HandleKeyMute(U8 linkIndex, U8 operationParam)
  369          {
  370   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_HandleKeyMute(linkIndex, operationParam);
               #else
  373   1        UNUSED(linkIndex);
  374   1        UNUSED(operationParam);
  375   1      #endif
  376   1      }
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 7   

  377          
  378          PRIVATE void MMI_AIR_HandleKeyMode(U8 linkIndex, U8 operationParam)
  379          {
  380   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_HandleKeyMode(linkIndex, operationParam);
               #elif defined TWS_SETTINGS
  383   1        MMI_Share_HandleKeyMode(linkIndex, operationParam);
  384   1      #else
                 UNUSED(linkIndex);
                 UNUSED(operationParam); 
               #endif
  388   1      }
  389          
  390          PRIVATE void MMI_AIR_HandleAirappcmd(U8 linkIndex, U8 operationParam)
  391          {
  392   1      #ifdef TWS_SETTINGS
  393   1        MMI_Share_HandleAirappcmd(linkIndex, operationParam);
  394   1      #else
                 UNUSED(linkIndex);
                 UNUSED(operationParam); 
               #endif  
  398   1      }
  399          
  400          PRIVATE void MMI_AIR_AirappSyncVPlangIndex(U8 operationParam)
  401          {
  402   1      #ifdef TWS_SETTINGS
  403   1        MMI_Share_AirappSyncVPlangIndex(operationParam);
  404   1      #else
                 UNUSED(operationParam); 
               #endif  
  407   1      }
  408          
  409          PRIVATE void MMI_AIR_AirappSyncVPlangIndexAndChangeNext(U8 linkIndex, U8 operationParam)
  410          {
  411   1      #ifdef TWS_SETTINGS
  412   1        MMI_Share_AirappSyncVPlangIndexAndChangeNext(linkIndex, operationParam);
  413   1      #else
                 UNUSED(linkIndex);
                 UNUSED(operationParam); 
               #endif  
  417   1      }
  418          
  419          PRIVATE void MMI_AIR_AirappSyncA2DPPEQIndex(U8 operationParam)
  420          {
  421   1      #ifdef TWS_SETTINGS
  422   1        MMI_Share_AirappSyncA2DPPEQIndex(operationParam);
  423   1      #else
                 UNUSED(operationParam); 
               #endif  
  426   1      }
  427          
  428          PRIVATE void MMI_AIR_AirappSyncAUXPEQIndex(U8 operationParam)
  429          {
  430   1      #ifdef TWS_SETTINGS
  431   1        MMI_Share_AirappSyncAUXPEQIndex(operationParam);
  432   1      #else
                 UNUSED(operationParam); 
               #endif  
  435   1      }
  436          
  437          PRIVATE void MMI_AIR_AirappSyncA2DPPEQIndexAndChangeNext(U8 linkIndex, U8 operationParam)
  438          {
  439   1      #ifdef TWS_SETTINGS
  440   1        MMI_Share_AirappSyncA2DPPEQIndexAndChangeNext(linkIndex, operationParam);
  441   1      #else
                 UNUSED(linkIndex);
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 8   

                 UNUSED(operationParam); 
               #endif  
  445   1      }
  446          
  447          PRIVATE void MMI_AIR_AirappSyncAUXPEQIndexAndChangeNext(U8 linkIndex, U8 operationParam)
  448          {
  449   1      #ifdef TWS_SETTINGS
  450   1        MMI_Share_AirappSyncAUXPEQIndexAndChangeNext(linkIndex, operationParam);
  451   1      #else
                 UNUSED(linkIndex);
                 UNUSED(operationParam); 
               #endif  
  455   1      }
  456          
  457          PRIVATE void MMI_AIR_AirappGetBatStatusFromFollower(U8 linkIndex, U8 operationParam)
  458          {
  459   1      #ifdef TWS_SETTINGS
  460   1        MMI_Share_AirappGetBatStatusFromFollower(linkIndex, operationParam);
  461   1      #else
                 UNUSED(linkIndex);
                 UNUSED(operationParam); 
               #endif  
  465   1      }
  466          
  467          PRIVATE void MMI_AIR_AirappReportBatStatusToRelayer(U8 linkIndex, U8 operationParam)
  468          {
  469   1      #ifdef TWS_SETTINGS
  470   1        MMI_Share_AirappReportBatStatusToRelayer(linkIndex, operationParam);
  471   1      #else
                 UNUSED(operationParam); 
                 UNUSED(linkIndex); 
               #endif  
  475   1      }
  476          
  477          PRIVATE void MMI_AIR_AirappGetChgBatStatusFromFollower(U8 linkIndex, U8 operationParam)
  478          {
  479   1      #ifdef TWS_SETTINGS
  480   1        MMI_Share_AirappGetChgBatStatusFromFollower(linkIndex, operationParam);
  481   1      #else
                 UNUSED(linkIndex);
                 UNUSED(operationParam); 
               #endif  
  485   1      }
  486          
  487          PRIVATE void MMI_AIR_AirappReportChgBatStatusToRelayer(U8 linkIndex, U8 operationParam)
  488          {
  489   1      #ifdef TWS_SETTINGS
  490   1        MMI_Share_AirappReportChgBatStatusToRelayer(linkIndex, operationParam);
  491   1      #else
                 UNUSED(operationParam); 
                 UNUSED(linkIndex); 
               #endif  
  495   1      }
  496          
  497          PRIVATE void MMI_AIR_SyncAndSwitchAudioTransparency(U8 linkIndex, U8 operationParam)
  498          {
  499   1      #ifdef TWS_SETTINGS
  500   1        MMI_Share_SyncAndSwitchAudioTransparency(linkIndex, operationParam);
  501   1      #else
                 UNUSED(operationParam); 
                 UNUSED(linkIndex); 
               #endif  
  505   1      }
  506          
  507          PRIVATE void MMI_AIR_SyncMICVolAndUp(U8 linkIndex, U8 operationParam)
  508          {
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 9   

  509   1      #ifdef TWS_SETTINGS
  510   1        MMI_Share_SyncMICVolAndUp(linkIndex, operationParam);
  511   1      #else
                 UNUSED(operationParam); 
                 UNUSED(linkIndex); 
               #endif  
  515   1      }
  516          
  517          PRIVATE void MMI_AIR_SyncMICVolAndDn(U8 linkIndex, U8 operationParam)
  518          {
  519   1      #ifdef TWS_SETTINGS
  520   1        MMI_Share_SyncMICVolAndDn(linkIndex, operationParam);
  521   1      #else
                 UNUSED(operationParam); 
                 UNUSED(linkIndex); 
               #endif  
  525   1      }
  526          
  527          PRIVATE void MMI_AIR_SyncMICVol(U8 linkIndex, U8 operationParam)
  528          {
  529   1      #ifdef TWS_SETTINGS
  530   1        MMI_Share_SyncMICVol(linkIndex, operationParam);
  531   1      #else
                 UNUSED(operationParam); 
                 UNUSED(linkIndex); 
               #endif  
  535   1      }
  536          
  537          PRIVATE void MMI_AIR_SyncSCOStatusForAT(U8 linkIndex, U8 operationParam)
  538          {
  539   1      #ifdef TWS_SETTINGS
  540   1        MMI_Share_SyncSCOStatusForAT(linkIndex, operationParam);
  541   1      #else
                 UNUSED(operationParam);
                 UNUSED(linkIndex);
               #endif
  545   1      }
  546          
  547          #ifdef AIR_MODULE
  548          PUBLIC void MMI_AIR_AirAppGetFollowerInfo(U8 cmd,U8 cmdPara)
  549          {
  550   1        MMI_Share_GetFollowerInfo(cmd, cmdPara);
  551   1      }
  552          #endif
  553          
  554          PRIVATE void MMI_AIR_AirAppSetATVolRsp(U8 linkIndex)
  555          {
  556   1        #ifdef TWS_SETTINGS
  557   1        MMI_Share_AirAppSetATVolRsp(linkIndex);
  558   1        #else
                 UNUSED(linkIndex);
                 #endif
  561   1      }
  562          
  563          PRIVATE void MMI_AIR_AirAppReportATGainLv(U8 linkIndex, U8 operationParam)
  564          {
  565   1        #ifdef TWS_SETTINGS
  566   1        MMI_Share_AirAppReportATGainLv(linkIndex, operationParam);
  567   1        #else
                 UNUSED(operationParam);
                 UNUSED(linkIndex);
                 #endif
  571   1      }
  572          
  573          PRIVATE void MMI_AIR_AirAppReportATStatus(U8 linkIndex, U8 operationParam)
  574          {
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 10  

  575   1        #ifdef TWS_SETTINGS
  576   1        MMI_Share_AirAppReportATStatus(linkIndex, operationParam);
  577   1        #else
                 UNUSED(operationParam);
                 UNUSED(linkIndex);
                 #endif
  581   1      }
  582          
  583          PUBLIC void MMI_AIR_HandleVendorAVRCPEvt(U8 linkIndex, U8 operationId, U8 operationParam)
  584          {
  585   1        switch(operationId)
  586   1        {
  587   2          case AVRCP_VENDOR_UNIQ_OPID_MODE_NOTIFY:
  588   2            MMI_AIR_HandleKeyMode(linkIndex, operationParam);
  589   2            break;
  590   2      
  591   2          case AVRCP_VENDOR_UNIQ_MUTE_CONTROL:
  592   2            MMI_AIR_HandleKeyMute(linkIndex, operationParam);
  593   2            break;
  594   2          case AVRCP_VENDOR_UNIQ_AIRAPP_SHARE_CMD:
  595   2            MMI_AIR_HandleAirappcmd(linkIndex, operationParam);
  596   2            break;
  597   2          case AVRCP_VENDOR_UNIQ_AIRAPP_SYNC_VP_LANG_INDEX:
  598   2            MMI_AIR_AirappSyncVPlangIndex(operationParam);
  599   2            break;
  600   2          case AVRCP_VENDOR_UNIQ_AIRAPP_SYNC_VP_LANG_INDEX_AND_CHANGE_NEXT:
  601   2            MMI_AIR_AirappSyncVPlangIndexAndChangeNext(linkIndex, operationParam);
  602   2            break;
  603   2          case AVRCP_VENDOR_UNIQ_AIRAPP_SYNC_A2DP_PEQ_INDEX:
  604   2            MMI_AIR_AirappSyncA2DPPEQIndex(operationParam);
  605   2            break;
  606   2          case AVRCP_VENDOR_UNIQ_AIRAPP_SYNC_AUX_PEQ_INDEX:
  607   2            MMI_AIR_AirappSyncAUXPEQIndex(operationParam);
  608   2            break;
  609   2          case AVRCP_VENDOR_UNIQ_AIRAPP_SYNC_A2DP_PEQ_INDEX_AND_CHANGE_NEXT:
  610   2            MMI_AIR_AirappSyncA2DPPEQIndexAndChangeNext(linkIndex, operationParam);
  611   2            break;
  612   2          case AVRCP_VENDOR_UNIQ_AIRAPP_SYNC_AUX_PEQ_INDEX_AND_CHANGE_NEXT:
  613   2            MMI_AIR_AirappSyncAUXPEQIndexAndChangeNext(linkIndex, operationParam);
  614   2            break;
  615   2          case AVRCP_VENDOR_UNIQ_AIRAPP_GET_INFO_FROM_FOLLOWER:
  616   2            MMI_AIR_AirappGetBatStatusFromFollower(linkIndex, operationParam);
  617   2            break;
  618   2          case AVRCP_VENDOR_UNIQ_AIRAPP_REPORT_INFO_TO_RELAYER:
  619   2            MMI_AIR_AirappReportBatStatusToRelayer(linkIndex, operationParam);
  620   2            break;
  621   2          case AVRCP_VENDOR_UNIQ_AIRAPP_GET_CHGBAT_STATUS_FROM_FOLLOWER:
  622   2            MMI_AIR_AirappGetChgBatStatusFromFollower(linkIndex, operationParam);
  623   2            break;
  624   2          case AVRCP_VENDOR_UNIQ_AIRAPP_REPROT_CHGBAT_STATUS_TO_RELAYER:
  625   2            MMI_AIR_AirappReportChgBatStatusToRelayer(linkIndex, operationParam);
  626   2            break;
  627   2          case AVRCP_VENDOR_UNIQ_SYNC_AND_SWITCH_AUDIO_TRANSPARENCY:
  628   2            MMI_AIR_SyncAndSwitchAudioTransparency(linkIndex, operationParam);
  629   2            break;
  630   2          case AVRCP_VENDOR_UNIQ_SYNC_MIC_VOL_AND_UP:
  631   2            MMI_AIR_SyncMICVolAndUp(linkIndex, operationParam);
  632   2            break;
  633   2          case AVRCP_VENDOR_UNIQ_SYNC_MIC_VOL_AND_DN:
  634   2            MMI_AIR_SyncMICVolAndDn(linkIndex, operationParam);
  635   2            break;
  636   2          case AVRCP_VENDOR_UNIQ_SET_AT_VOL_CMD:
  637   2            MMI_AIR_SyncMICVol(linkIndex, operationParam);
  638   2            MMI_AVRCP_SendVendorUnique(linkIndex, AVRCP_VENDOR_UNIQ_SET_AT_VOL_RSP, operationParam);
  639   2            break;
  640   2          case AVRCP_VENDOR_UNIQ_SET_AT_VOL_RSP:
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 11  

  641   2            MMI_AIR_AirAppSetATVolRsp(linkIndex);
  642   2            break;
  643   2          case AVRCP_VENDOR_UNIQ_SYNC_SCO_STATUS_FOR_AT:
  644   2            MMI_AIR_SyncSCOStatusForAT(linkIndex, operationParam);
  645   2            break;
  646   2          case AVRCP_VENDOR_UNIQ_GET_AT_GAIN_LV:
  647   2            MMI_AVRCP_SendVendorUnique(linkIndex, AVRCP_VENDOR_UNIQ_REPORT_AT_GAIN_LV, MMI_GetAudioTransparencyEna
             -ble() ? DEFAULT_LINEIN_SOUND_LEVEL : HCI_VEVT_OCF_RESULT_CODE_FAIL);
  648   2            break;
  649   2          case AVRCP_VENDOR_UNIQ_REPORT_AT_GAIN_LV:
  650   2            MMI_AIR_AirAppReportATGainLv(linkIndex, operationParam);
  651   2            break;
  652   2          case AVRCP_VENDOR_UNIQ_GET_AT_STATUS:
  653   2            MMI_AVRCP_SendVendorUnique(linkIndex, AVRCP_VENDOR_UNIQ_REPORT_AT_STATUS, MMI_GetAudioTransparencyEnab
             -le() ? HCI_VEVT_OCF_RESULT_CODE_SUCCESS : HCI_VEVT_OCF_RESULT_CODE_FAIL);
  654   2            break;
  655   2          case AVRCP_VENDOR_UNIQ_REPORT_AT_STATUS:
  656   2            MMI_AIR_AirAppReportATStatus(linkIndex, operationParam);
  657   2            break;
  658   2          default:
  659   2            break;
  660   2        }
  661   1      }
  662          
  663          PUBLIC void MMI_AIR_HandleAirohaAVRCPEvt(U8 linkIndex, U8 evetCode)
  664          {
  665   1        switch(evetCode)
  666   1        {
  667   2          case AVRCP_EVT_TO_MMI_GET_KEY_POWER_RESP: //Sent Power to peer already
  668   2            if(gMMI_ctl.mmiTimerInfo.sysTimer.autoSwitchOffInLowBatTimer)
  669   2            {
  670   3              SYS_ReleaseTimer(&gMMI_ctl.mmiTimerInfo.sysTimer.autoSwitchOffInLowBatTimer);
  671   3              MMI_DRV_KeyEventHandler(linkIndex, KEY_POWER_OFF);
  672   3            }
  673   2            break;
  674   2          case AVRCP_EVT_TO_MMI_GET_KEY_POWER_CMD:  //Get power off from peer
  675   2            switch(gMMI_ctl.sdapCtl[linkIndex].remoteApplicationID)
  676   2            {
  677   3              case PRODUCT_AIR_SCO_WOOFER:
  678   3              case PRODUCT_AIR_SOUNDBAR:
  679   3              case PRODUCT_AIR_A2DP_WOOFER:
  680   3              case PRODUCT_AIR_TWS:
  681   3                #if 1 //using sync delay to ensure remote get POWEROFF key response
  682   3                MMI_SetKeyState(MMI_KEY_STATE_POWER_OFF_SYNC);
  683   3                SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.sysTimer.autoSwitchOffInLowBatTimer, MMI_AIR_POWER_OFF_SYNC_DELA
             -Y);
  684   3                #else
                         MMI_DRV_KeyEventHandler(linkIndex, KEY_POWER_OFF);
                         #endif
  687   3                break;
  688   3      
  689   3              case PRODUCT_AIR_NONE:
  690   3                break;
  691   3            }
  692   2            break;
  693   2      
  694   2          case AVRCP_EVT_TO_MMI_GET_KEY_PLAY_CMD:
  695   2          case AVRCP_EVT_TO_MMI_GET_KEY_PAUSE_CMD:
  696   2            MMI_AIR_RelayPassThroughComands(linkIndex, KEY_AVRCP_PLAY);
  697   2            break;
  698   2      
  699   2          case AVRCP_EVT_TO_MMI_GET_KEY_FORWARD_CMD:
  700   2            MMI_AIR_RelayPassThroughComands(linkIndex, KEY_AVRCP_FORWARD);
  701   2            break;
  702   2      
  703   2          case AVRCP_EVT_TO_MMI_GET_KEY_BACKWARD_CMD:
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 12  

  704   2            MMI_AIR_RelayPassThroughComands(linkIndex, KEY_AVRCP_BACKWARD);
  705   2            break;
  706   2        }
  707   1      }
  708          
  709          #ifdef AVRCP_Profile
  710          PUBLIC U8 MMI_AIR_SendKeyPowerOffToAirDevice(void)
  711          {
  712   1        U8 linkIndex;
  713   1        
  714   1        #ifdef PRODUCT_TYPE_K
                 linkIndex = MMI_Share_SendKeyPowerOffToAirDevice();
                 if(linkIndex < MAX_MULTI_POINT_NO)
                 {
                   LightDbgPrint("==Share_SendKeyPowerOff TRUE:");
                   MMI_SetKeyState(MMI_KEY_STATE_POWER_OFF_SYNC);
                   SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.sysTimer.autoSwitchOffInLowBatTimer,
                           gMMI_ctl.mmiInfo[linkIndex].linkPara.sniffInterval ?
                             (gMMI_ctl.mmiInfo[linkIndex].linkPara.sniffInterval * 4L) : MMI_AIR_POWER_OFF_SYNC_DELAY);
                   return linkIndex;
                 }
                 #endif
  726   1      
  727   1        if(MMI_AIR_SYNC_POWER_KEY_FEAT)
  728   1        {
  729   2          for(linkIndex = 0; linkIndex < MAX_MULTI_POINT_NO; linkIndex++)
  730   2          {
  731   3            if(MMI_IsActiveLink(linkIndex) && MMI_AIR_IsAirLink(linkIndex))
  732   3            {
  733   4              MMI_AVRCP_CmdGenerator(linkIndex, AVRCP_SEND_OPERATION, AVC_OPERATION_POWER);
  734   4              SYS_SetTimer( &gMMI_ctl.mmiTimerInfo.sysTimer.autoSwitchOffInLowBatTimer,
  735   4                      gMMI_ctl.mmiInfo[linkIndex].linkPara.sniffInterval ?
  736   4                      (gMMI_ctl.mmiInfo[linkIndex].linkPara.sniffInterval * 4L) : MMI_AIR_POWER_OFF_SYNC_DELAY);
  737   4              return linkIndex;
  738   4            }
  739   3          }
  740   2        }
  741   1        return MAX_MULTI_POINT_NO;
  742   1      }
  743          
  744          PUBLIC void MMI_AIR_AVRCPSetDriverVol(U8 linkIndex)
  745          {
  746   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_AVRCPSetDriverVol(linkIndex);
               #elif defined TWS_SETTINGS
  749   1        MMI_Share_AVRCPSetDriverVol(linkIndex);
  750   1      #else
                 UNUSED(linkIndex);
               #endif
  753   1      }
  754          
  755          PUBLIC void MMI_AIR_TG_GetVolChanged(U8 linkIndex, U8 absVol)
  756          {
  757   1      #if defined TWS_SETTINGS
  758   1        MMI_Share_TG_GetVolChanged(linkIndex, absVol);
  759   1      #else
                 UNUSED(linkIndex);
                 UNUSED(absVol);
               #endif
  763   1      }
  764          
  765          PUBLIC BOOL MMI_AIR_TG_GetSetAbsVol(U8 linkIndex, U8 absVol)
  766          {
  767   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 return MMI_SBWF_TG_GetSetAbsVol(linkIndex, absVol);
               #elif defined TWS_SETTINGS
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 13  

  770   1        return MMI_Share_TG_GetSetAbsVol(linkIndex, absVol);
  771   1      #else
                 UNUSED(linkIndex);
                 UNUSED(absVol);
                 return FALSE;
               #endif
  776   1      }
  777          #endif //of AVRCP_Profile
  778          
  779          PUBLIC BOOL MMI_AIR_IsEnableLPFUnderSCO(U8 linkIndex)
  780          {
  781   1        UNUSED(linkIndex);
  782   1        if(GET_PRODUCT_AIR_TYPE(MMI_PNP_PRODUCT_VER) == PRODUCT_AIR_SCO_WOOFER)
  783   1        {
  784   2          return TRUE;
  785   2        }
  786   1        return FALSE;
  787   1      }
  788          
  789          PUBLIC BOOL MMI_AIR_IsHoldLineInDisable(void)
  790          {
  791   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 return MMI_SBWF_IsHoldLineInDisable();
               #else
  794   1        return FALSE;
  795   1      #endif
  796   1      }
  797          
  798          PUBLIC void MMI_AIR_ExitLineInState(void)
  799          {
  800   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_ExitLineInState();
               #elif defined TWS_SETTINGS
  803   1        MMI_Share_ExitLineInState();
  804   1      #endif
  805   1      }
  806          
  807          PUBLIC void MMI_AIR_EnterLineInState(void)
  808          {
  809   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_EnterLineInState();
               #elif defined TWS_SETTINGS
  812   1        MMI_Share_EnterLineInState();
  813   1      #endif
  814   1      }
  815          
  816          PUBLIC void MMI_AIR_LineInEnableNotify(void)
  817          {
  818   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_LineInEnableNotify();
               #endif
  821   1      }
  822          
  823          PUBLIC void MMI_AIR_LineInDisableNotify(void)
  824          {
  825   1      
  826   1      }
  827          
  828          PUBLIC void MMI_AIR_LineInDriverVolChange(void)
  829          {
  830   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_LineInDriverVolChange();
               #endif
  833   1      }
  834          
  835          PUBLIC void MMI_AIR_LineInStartRelay(void)
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 14  

  836          {
  837   1      #if defined TWS_SETTINGS
  838   1        MMI_Share_LineInStartRelay();
  839   1      #endif
  840   1      }
  841          
  842          PUBLIC void MMI_AIR_LineInKeyVolUpDn(void)
  843          {
  844   1      #if defined TWS_SETTINGS
  845   1        MMI_Share_LineInKeyVolUpDn();
  846   1      #endif
  847   1      }
  848          
  849          PUBLIC void MMI_AIR_LineInUartSetVol(void)
  850          {
  851   1      #if defined TWS_SETTINGS
  852   1        MMI_Share_LineInUartSetVol();
  853   1      #endif
  854   1      }
  855          
  856          PUBLIC void MMI_AIR_AiroStereo_Sync(U8 syncCmd,U8 cmdPara)
  857          {
  858   1      #ifdef TWS_SETTINGS
  859   1        MMI_Share_AiroStereo_Sync(syncCmd,cmdPara);
  860   1      #else
                 UNUSED(syncCmd);
                 UNUSED(cmdPara);
               #endif
  864   1      }
  865          
  866          PUBLIC void MMI_AIR_PageFailHandler(U8 linkIndex)
  867          {
  868   1        if(MMI_GetBdAddrByLinkIndex(linkIndex))
  869   1        {
  870   2          if(SYS_IsBDAddrIsTheSame(&gMMI_Air_ctl.found_bd_addr, MMI_GetBdAddrByLinkIndex(linkIndex)))
  871   2          {
  872   3            MMI_AIR_ResumePairing();
  873   3          }
  874   2        }
  875   1        
  876   1        #ifdef PRODUCT_TYPE_K
                 MMI_Share_PageFailHandler(linkIndex);
                 #endif
  879   1      }
  880          
  881          PUBLIC void MMI_AIR_ACLConnRequest(U8 linkIndex)
  882          {
  883   1        UNUSED(linkIndex);
  884   1        MMI_AIR_SuspendPairing();  //exit TWS_PAIRING state when remote acl requested;
  885   1      }
  886          
  887          PUBLIC void MMI_AIR_ACLConnectedNotify(U8 linkIndex)
  888          {
  889   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_ACLConnectedNotify(linkIndex);
               #elif defined PRODUCT_TYPE_K
                 MMI_Share_ACLConnectedNotify(linkIndex);
               #else
  894   1        UNUSED(linkIndex);
  895   1      #endif  
  896   1      }
  897          
  898          PUBLIC void MMI_AIR_ACLConnFailPassive(U8 linkIndex)
  899          {
  900   1        UNUSED(linkIndex);
  901   1        MMI_AIR_ResumePairing();
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 15  

  902   1      }
  903          
  904          PUBLIC void MMI_AIR_SCOConnectedNotify(U8 linkIndex, BOOL isConnCpl)
  905          {
  906   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_SCOConnectedNotify(linkIndex, isConnCpl);
               #else
  909   1        UNUSED(linkIndex);
  910   1        UNUSED(isConnCpl);
  911   1      #endif
  912   1      }
  913          
  914          PUBLIC void MMI_AIR_SCODiscNotify(U8 linkIndex)
  915          {
  916   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_SCODiscNotify(linkIndex);
               #else
  919   1        UNUSED(linkIndex);
  920   1      #endif
  921   1      }
  922          
  923          PUBLIC BOOL MMI_AIR_IdleKeyVolUpDnFirst(BOOL isVolumeUp)
  924          {
  925   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 return MMI_SBWF_IdleKeyVolUpDnFirst(isVolumeUp);
               #elif defined PRODUCT_TYPE_A || defined PRODUCT_TYPE_K
  928   1        return MMI_Share_IdleKeyVolUpDnFirst(isVolumeUp);
  929   1      #else
                 UNUSED(isVolumeUp);
                 return FALSE;
               #endif  
  933   1      }
  934          
  935          PUBLIC void MMI_AIR_IdleKeyVolUpDnLast(BOOL isVolumeUp)
  936          {
  937   1      #ifdef PRODUCT_TYPE_K
                 MMI_Share_IdleKeyVolUpDnLast(isVolumeUp);
               #elif defined PRODUCT_TYPE_A
  940   1        MMI_Share_IdleKeyVolUpDnLast(isVolumeUp);
  941   1      #else
                 UNUSED(isVolumeUp);
               #endif  
  944   1      }
  945          
  946          PUBLIC void MMI_AIR_AVRCPConnectedNotify(U8 linkIndex)
  947          {
  948   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_AVRCPConnectedNotify(linkIndex);
               #elif defined TWS_SETTINGS
  951   1        MMI_Share_AVRCPConnectedNotify(linkIndex);
  952   1      #else
                 UNUSED(linkIndex);
               #endif
  955   1      }
  956          
  957          PUBLIC BOOL MMI_AIR_TG_GetKeyVolUp(U8 linkIndex)
  958          {
  959   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 return MMI_SBWF_TG_GetKeyVolUp(linkIndex);
               #elif defined TWS_SETTINGS
  962   1        return MMI_Share_TG_GetKeyVolUp(linkIndex);
  963   1      #else
                 UNUSED(linkIndex);
                 return FALSE;
               #endif
  967   1      }
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 16  

  968          
  969          PUBLIC BOOL MMI_AIR_TG_GetKeyVolDown(U8 linkIndex)
  970          {
  971   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 return MMI_SBWF_TG_GetKeyVolDown(linkIndex);
               #elif defined TWS_SETTINGS
  974   1        return MMI_Share_TG_GetKeyVolDown(linkIndex);
  975   1      #else
                 UNUSED(linkIndex);
                 return FALSE;
               #endif
  979   1      }
  980          
  981          PUBLIC void MMI_AIR_A2DPSignalChannelReadyNotify(U8 linkIndex)
  982          {
  983   1      #if defined TWS_SETTINGS
  984   1        MMI_Share_A2DPSignalChannelReadyNotify(linkIndex);
  985   1      #else
                 UNUSED(linkIndex);
               #endif
  988   1      }
  989          
  990          PUBLIC void MMI_AIR_A2DPOpenNotify(U8 linkIndex)
  991          {
  992   1      #if defined TWS_SETTINGS
  993   1        MMI_Share_A2DPOpenNotify(linkIndex);
  994   1      #else
                 UNUSED(linkIndex);
               #endif
  997   1      }
  998          
  999          PUBLIC void MMI_AIR_A2DPAcceptStartReqNotify(U8 linkIndex)
 1000          {
 1001   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_A2DPAcceptStartReqNotify(linkIndex);
               #else
 1004   1        UNUSED(linkIndex);
 1005   1      #endif
 1006   1      }
 1007          
 1008          PUBLIC void MMI_AIR_DriverSendA2DPDSPEnableCmd(U8 linkIndex)
 1009          {
 1010   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_DriverSendA2DPDSPEnableCmd(linkIndex);
               #else
 1013   1        UNUSED(linkIndex);
 1014   1      #endif
 1015   1      }
 1016          
 1017          PUBLIC void MMI_AIR_A2DPDSPEnabledNotify(U8 linkIndex)
 1018          {
 1019   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_A2DPDSPEnabledNotify(linkIndex);
               #elif defined TWS_SETTINGS
 1022   1        MMI_Share_A2DPDSPEnabledNotify(linkIndex);
 1023   1      #else
                 UNUSED(linkIndex);
               #endif
 1026   1      }
 1027          
 1028          PUBLIC void MMI_AIR_A2DPDSPDisabledNotify(U8 linkIndex)
 1029          {
 1030   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_A2DPDSPDisabledNotify(linkIndex);
               #else
 1033   1        UNUSED(linkIndex);
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 17  

 1034   1      #endif
 1035   1      }
 1036          
 1037          PUBLIC void MMI_AIR_DriverSendA2DPDSPDisableCmd(U8 linkIndex)
 1038          {
 1039   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_DriverSendA2DPDSPDisableCmd(linkIndex);
               #else
 1042   1        UNUSED(linkIndex);
 1043   1      #endif
 1044   1      }
 1045          
 1046          PUBLIC void MMI_AIR_A2DPStartRelay(U8 linkIndex)
 1047          {
 1048   1      #if defined TWS_SETTINGS
 1049   1        MMI_Share_A2DPStartRelay(linkIndex);
 1050   1      #else
                 UNUSED(linkIndex);
               #endif
 1053   1      }
 1054          
 1055          PUBLIC void MMI_AIR_A2DPKeyVolUpDn(U8 linkIndex, BOOL isVolumeUp)
 1056          {
 1057   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 UNUSED(isVolumeUp);
                 MMI_SBWF_A2DPKeyVolUpDn(linkIndex);
               #elif defined TWS_SETTINGS
 1061   1        MMI_Share_A2DPKeyVolUpDn(linkIndex, isVolumeUp);
 1062   1      #else
                 UNUSED(linkIndex);
                 UNUSED(isVolumeUp);
               #endif
 1066   1      }
 1067          
 1068          PUBLIC void MMI_AIR_DemoSoundKeyVolUpDn(void)
 1069          {
 1070   1      #if defined TWS_SETTINGS
 1071   1        #ifdef DEMOSOUND
                 MMI_Share_SendDemoSoundAbsVolToFollower();
                 #endif
 1074   1      #endif
 1075   1      }
 1076          
 1077          PUBLIC void MMI_AIR_TryToStopAirPairing(U8 linkIndex)
 1078          {
 1079   1        if(PRODUCT_AIR_NONE != gMMI_ctl.sdapCtl[linkIndex].remoteApplicationID)
 1080   1        {
 1081   2          MMI_AIR_StopPairing();
 1082   2        }
 1083   1      }
 1084          
 1085          PUBLIC BOOL MMI_AIR_SDAPDisconnectedNotify(U8 linkIndex)
 1086          {
 1087   1        MMI_AIR_TryToStopAirPairing(linkIndex);
 1088   1      
 1089   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 return MMI_SBWF_SDAPDisconnectedNotify(linkIndex);
               #elif defined TWS_SETTINGS
 1092   1        return MMI_Share_SDAPDisconnectedNotify(linkIndex);
 1093   1      #else
                 UNUSED(linkIndex);
                 return FALSE;
               #endif
 1097   1      }
 1098          
 1099          PUBLIC void MMI_AIR_LinkKeyNotify(U8 XDATA_PTR bdAddrPtr)
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 18  

 1100          {
 1101   1        U8 linkIndex = MMI_GetLinkIndexByBdA(bdAddrPtr);
 1102   1        if(linkIndex != MAX_MULTI_POINT_NO && PRODUCT_AIR_NONE != gMMI_ctl.sdapCtl[linkIndex].remoteApplicationI
             -D)
 1103   1          MMI_LinkKey_MoveLinkToAirLink((U8 XDATA_PTR)&gMMI_ctl.mmiInfo[linkIndex].bdAddr);
 1104   1        
 1105   1        #ifdef PRODUCT_TYPE_K
                 MMI_Share_LinkKeyNotify(linkIndex);
                 #endif
 1108   1      }
 1109          
 1110          
 1111          extern MMI_KEY_EVT_MAP_TYPE XDATA MMI_KeyEvtMap[KEY_ACTIONTOTALNUMBER];
 1112          PRIVATE void MMI_AIR_RelayPassThroughComands(U8 linkIndex, U8 keyEvtCode)
 1113          {
 1114   1        U8 i, j, keyEvtNo;
 1115   1      
 1116   1        if(MMI_SUPPORT_AVRCP_KEY_SYNC && PRODUCT_AIR_TWS == gMMI_ctl.sdapCtl[linkIndex].remoteApplicationID)
 1117   1        {   
 1118   2          keyEvtNo = 0;
 1119   2          for(j = 0; j < KEY_ACTIONTOTALNUMBER; j++)
 1120   2          {
 1121   3            keyEvtNo += MMI_KeyEvtMap[j].keyEventNo;
 1122   3          }
 1123   2          
 1124   2          for(i = 0; i < MAX_MULTI_POINT_NO; i++)
 1125   2          {
 1126   3            U32 stateBitMask;
 1127   3            
 1128   3            if(!MMI_IsActiveLink(i) || i == linkIndex)
 1129   3              continue;
 1130   3              
 1131   3            if(PRODUCT_AIR_NONE != gMMI_ctl.sdapCtl[i].remoteApplicationID)
 1132   3              continue;
 1133   3      
 1134   3            stateBitMask = 1L << (MMI_GetTopStateByLink(i));
 1135   3      
 1136   3            for(j = 0; j < keyEvtNo; j++)
 1137   3            {
 1138   4              if(keyEvtCode == gMMI_nvram_keymap.mmiKeyMapTbl[j].mmiKeyEvent && (stateBitMask & gMMI_nvram_keymap.m
             -miKeyMapTbl[j].keySuppotedState))
 1139   4              {
 1140   5                MMI_PushMediaEvent(keyEvtCode);
 1141   5                MMI_DRV_KeyEventHandler(i, keyEvtCode);
 1142   5                break;
 1143   5              }
 1144   4            }
 1145   3          }
 1146   2        }
 1147   1      }
 1148          
 1149          PUBLIC void MMI_AIR_HCIRoleChangeEventNotify(U8 linkIndex, U8 status, U8 roleOfSlave)
 1150          {
 1151   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_HCIRoleChangeEventNotify(linkIndex, status, roleOfSlave);
               #elif defined TWS_SETTINGS
 1154   1        MMI_Share_HCIRoleChangeEventNotify(linkIndex, status, roleOfSlave);
 1155   1      #else
                 UNUSED(linkIndex);
                 UNUSED(status);
                 UNUSED(roleOfSlave);
               #endif
 1160   1      }
 1161          
 1162          PUBLIC void MMI_AIR_HCISCONullPktCmdCpl(BOOL isMute)
 1163          {
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 19  

 1164   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_HCISCONullPktCmdCpl(isMute);
               #else
 1167   1        UNUSED(isMute);
 1168   1      #endif
 1169   1      }
 1170          
 1171          
 1172          PUBLIC BOOL MMI_AIR_IsTWSApplication(void)
 1173          {
 1174   1        return (MMI_IsLocalDeviceType(PRODUCT_AIR_TWS))? TRUE:FALSE;
 1175   1      }
 1176          
 1177          PUBLIC U8 MMI_AIR_GetNextAirLink(U8 linkIndex)
 1178          {
 1179   1        U8 i, j;
 1180   1        for(i = 0; i < MAX_MULTI_POINT_NO; i++)
 1181   1        {
 1182   2          j = (i+linkIndex +1)%MAX_MULTI_POINT_NO;
 1183   2          if(MMI_IsActiveLink(j) && PRODUCT_AIR_NONE != gMMI_ctl.sdapCtl[j].remoteApplicationID)
 1184   2            return j;
 1185   2        }
 1186   1      
 1187   1        return MMI_EOF;
 1188   1      }
 1189          
 1190          PUBLIC void MMI_AIR_GAPGetDiscoverabilityModeCpl(U8 mode)
 1191          {
 1192   1        if(MMI_CheckNestState(MMI_EOF, MMI_TWS_PAIRING)
 1193   1          && mode == (LIMITED_DISCOVERABLE_MODE | SAC_LIMITED_DISCOVERABLE_MODE)
 1194   1          && GET_PRODUCT_AIR_TYPE(MMI_PNP_PRODUCT_VER) != PRODUCT_AIR_SOUNDBAR)
 1195   1        {
 1196   2          MMI_HCI_SendInquiry(INQUIRY_LIAC);
 1197   2        }
 1198   1      }
 1199          
 1200          PUBLIC BOOL MMI_AIR_PreProcessForWriteFlashAfterRingVP(void)
 1201          {
 1202   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 return MMI_SBWF_PreProcessForWriteFlashAfterRingVP();
               #elif defined TWS_SETTINGS
 1205   1        return MMI_Share_PreProcessForWriteFlashAfterRingVP();
 1206   1      #else
                 return FALSE;
               #endif
 1209   1      }
 1210          
 1211          PUBLIC BOOL MMI_AIR_SetLinkRoleMaster(U8 linkIndex)
 1212          {
 1213   1        if(!MMI_IsRoleOfMaster(linkIndex))
 1214   1        {
 1215   2          MMI_HCI_SendSwitchRole(linkIndex, ROLE_MASTER);
 1216   2          return FALSE;
 1217   2        }
 1218   1        return TRUE;
 1219   1      }
 1220          
 1221          PUBLIC void MMI_AIR_SetConnected(U8 linkIndex)
 1222          {
 1223   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_SetConnected(linkIndex);
               #elif defined TWS_SETTINGS
 1226   1        MMI_Share_SetConnected(linkIndex);
 1227   1      #else
                 UNUSED(linkIndex);
               #endif
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 20  

 1230   1      }
 1231          
 1232          PUBLIC void MMI_AIR_FakeMediaEvt(U16 id)
 1233          {
 1234   1      #ifdef TWS_SETTINGS
 1235   1        MMI_Share_FakeMediaEvt(id);
 1236   1      #else
                 UNUSED(id);
               #endif
 1239   1      }
 1240          
 1241          PUBLIC void MMI_AIR_CheckKeyLineInPowerOn(U16 keyCode)
 1242          {
 1243   1      #ifdef TWS_SETTINGS
 1244   1        MMI_Share_CheckKeyLineInPowerOn(keyCode);
 1245   1      #else
                 UNUSED(keyCode);
               #endif
 1248   1      }
 1249          
 1250          PUBLIC void MMI_AIR_ReconnectUserInit(U8 type, U8 settings)
 1251          {
 1252   1      #if defined PRODUCT_TYPE_A || defined PRODUCT_TYPE_K
 1253   1        UNUSED(type);
 1254   1        UNUSED(settings);
 1255   1      #else
                 if(settings != RECONNECT_TWS)
                 {
                   if(MMI_AIR_GetAirLink(PRODUCT_AIR_SCO_WOOFER|PRODUCT_AIR_TWS) == MMI_EOF)
                     MMI_Reconnect_AddListByMode(type, RECONNECT_TWS);
                 }
               #endif
 1262   1      }
 1263          
 1264          PUBLIC BOOL MMI_AIR_LoadState(U8 linkIndex, U8 state)
 1265          {
 1266   1      #ifdef TWS_SETTINGS
 1267   1        return MMI_Share_LoadState(linkIndex, state);
 1268   1      #elif defined SOUND_BAR || defined SCO_WOOFER
                 return MMI_SBWF_LoadState(linkIndex, state);
               #else
                 UNUSED(linkIndex);
                 UNUSED(state);
                 return FALSE;
               #endif
 1275   1      }
 1276          
 1277          PUBLIC void MMI_AIR_ConnectedExit(U8 linkIndex)
 1278          {
 1279   1      #ifdef TWS_SETTINGS
 1280   1        MMI_Share_ConnectedExit(linkIndex);
 1281   1      #else
                 UNUSED(linkIndex);
               #endif
 1284   1      }
 1285          
 1286          #ifdef LIGHTING_ENABLE
               PUBLIC BOOL MMI_AIR_ChangeLightModeNotify(U8 ledMode, U8 ledPara1, U8 ledPara2, U8 ledPara3)
               {
                 return MMI_Share_ChangeLightModeNotify(ledMode, ledPara1, ledPara2, ledPara3);
               }
               #endif
 1292          
 1293          PUBLIC BOOL MMI_AIR_DSPSCOEnabled_Event(U8 linkIndex, BOOL isLightMono)
 1294          {
 1295   1        UNUSED(isLightMono);
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 21  

 1296   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 return MMI_SBWF_DSPSCOEnabledNotify(linkIndex);
               #elif defined TWS_SETTINGS
 1299   1        return MMI_Share_DSPSCOEnabled_Event(linkIndex, isLightMono); 
 1300   1      #else
                 UNUSED(linkIndex);
                 return FALSE;
               #endif
 1304   1      }
 1305          
 1306          PUBLIC void MMI_AIR_DSPSCODisabled_Event(U8 linkIndex)
 1307          {
 1308   1      #ifdef TWS_SETTINGS
 1309   1        MMI_Share_DSPSCODisabled_Event(linkIndex);
 1310   1      #else
                 UNUSED(linkIndex);
               #endif
 1313   1      }
 1314          
 1315          PUBLIC BOOL MMI_AIR_PowerOffHandler(U8 reason)
 1316          {
 1317   1        if(reason == POWEROFF_REASON_SHUT_DOWN_LOW_BAT || reason == POWEROFF_REASOM_TEMP_PROTECT)
 1318   1        {
 1319   2          U8 linkIndex;
 1320   2          for(linkIndex = 0; linkIndex < MAX_MULTI_POINT_NO; linkIndex++)
 1321   2          {
 1322   3            if(MMI_IsActiveLink(linkIndex) && A2DP_IsLinkRelayer(linkIndex))
 1323   3            {
 1324   4              LightDbgPrint("MMI_AIR_PowerOffHandler:LowBat");
 1325   4              SYS_ReleaseTimer(&gMMI_ctl.mmiTimerInfo.sysTimer.batteryMonitoringTimer);
 1326   4              //If ready to battery low power off, do not play VP   
 1327   4              SYS_ReleaseTimer(&gMMI_ctl.mmiTimerInfo.sysTimer.lowBatteryLEDtimer);
 1328   4              SYS_ReleaseTimer(&gMMI_ctl.mmiTimerInfo.sysTimer.lowBatteryRingtimer);
 1329   4      
 1330   4              MMI_AIR_SendKeyPowerOffToAirDevice();
 1331   4              return TRUE;
 1332   4            }
 1333   3          }
 1334   2        }
 1335   1        return FALSE;
 1336   1      }
 1337          
 1338          PUBLIC U8 XDATA_PTR MMI_AIR_Reconnect_GetTarget(U8 type)
 1339          {
 1340   1      #ifdef PRODUCT_TYPE_K
                 return MMI_Share_Reconnect_GetTarget(type);
               #else
 1343   1        UNUSED(type);
 1344   1        return (MMIReonnectDataType XDATA_PTR)NULL;
 1345   1      #endif
 1346   1      }
 1347          
 1348          PUBLIC void MMI_AIR_Reconnect_DeleteInvalidList(U8 linkIndex)
 1349          {
 1350   1      #ifdef PRODUCT_TYPE_K
                 MMI_Share_Reconnect_DeleteInvalidList(linkIndex);
               #else
 1353   1        UNUSED(linkIndex);
 1354   1      #endif
 1355   1      }
 1356          
 1357          PUBLIC void MMI_AIR_AcceptConnReq(U8 XDATA_PTR bdAddrPtr, U8 XDATA_PTR rolePtr)
 1358          {
 1359   1      #ifdef PRODUCT_TYPE_K
                 MMI_Share_AcceptConnReq(bdAddrPtr, rolePtr);
               #else
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 22  

 1362   1        UNUSED(bdAddrPtr);
 1363   1        UNUSED(rolePtr);
 1364   1      #endif
 1365   1      }
 1366          
 1367          PUBLIC void MMI_AIR_SendDriverVolCmd(U8 soundLevel, U8 smallStep)
 1368          {
 1369   1      #ifdef PRODUCT_TYPE_K
                 MMI_Share_SendDriverVolCmd(soundLevel, smallStep);
               #elif defined PRODUCT_TYPE_A && defined TWS_ESCO_RELAY
 1372   1        MMI_Share_SendDriverVolCmd(soundLevel, smallStep);
 1373   1      #else
                 UNUSED(soundLevel);
                 UNUSED(smallStep);
               #endif
 1377   1      }
 1378          
 1379          PUBLIC BOOL MMI_AIR_ReconnectLinkLoss(U8 XDATA_PTR bdAddrPtr)
 1380          {
 1381   1      #ifdef PRODUCT_TYPE_K
                 return MMI_Share_ReconnectLinkLoss(bdAddrPtr);
               #else
 1384   1        UNUSED(bdAddrPtr);
 1385   1        return FALSE;
 1386   1      #endif
 1387   1      }
 1388          
 1389          PUBLIC BOOL MMI_AIR_SendCreateConnection(U8 linkIndex, U8 XDATA_PTR bd_addr_ptr, U8 type, U8 XDATA_PTR co
             -dPtr)
 1390          {
 1391   1      #ifdef PRODUCT_TYPE_K
                 return MMI_Share_SendCreateConnection(linkIndex, bd_addr_ptr, type, codPtr);
               #else
 1394   1        UNUSED(bd_addr_ptr);
 1395   1        UNUSED(linkIndex);
 1396   1        UNUSED(type);
 1397   1        UNUSED(codPtr);
 1398   1        return FALSE;
 1399   1      #endif  
 1400   1      }
 1401          
 1402          PUBLIC void MMI_AIR_SendRelSco(U8 linkIndex)
 1403          {
 1404   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 MMI_SBWF_SendRelSco(linkIndex);
               #else
 1407   1        UNUSED(linkIndex);
 1408   1      #endif  
 1409   1      }
 1410          
 1411          PUBLIC BOOL MMI_AIR_SendVCmdAudioQosSetup(U8 linkIndex, U8 serviceType, U8 flowStatus, U8 rxFull)
 1412          {
 1413   1      #if defined SCO_WOOFER || defined SOUND_BAR
                 UNUSED(flowStatus);
                 UNUSED(rxFull);
                 if(linkIndex == MMI_AIR_GetAirLink(PRODUCT_AIR_SOUNDBAR))
                   return TRUE;
               #endif
 1419   1      
 1420   1      #ifdef PRODUCT_TYPE_K
                 return MMI_Share_SendVCmdAudioQosSetup(linkIndex, serviceType, flowStatus, rxFull);
               #elif defined PRODUCT_TYPE_A && defined TWS_ESCO_RELAY
 1423   1        return MMI_Share_SendVCmdAudioQosSetup(linkIndex, serviceType, flowStatus, rxFull);
 1424   1      #else
                 UNUSED(linkIndex);
                 UNUSED(serviceType);
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 23  

                 UNUSED(flowStatus);
                 UNUSED(rxFull);
                 return FALSE;
               #endif
 1431   1      
 1432   1      }
 1433          
 1434          PUBLIC void MMI_AIR_SaveData(void)
 1435          {
 1436   1      #ifdef PRODUCT_TYPE_K
                 MMI_Share_SaveData();
               #endif
 1439   1      }
 1440          
 1441          PUBLIC void MMI_AIR_UartSendUnSolicitedIndication(U8 opCode, U8 XDATA_PTR dataPtr, U8 linkIndex)
 1442          {
 1443   1      #ifdef PRODUCT_TYPE_K
                 MMI_Share_UartSendUnSolicitedIndication(opCode, dataPtr, linkIndex);
               #elif defined PRODUCT_TYPE_A
 1446   1        MMI_Share_UartSendUnSolicitedIndication(opCode, dataPtr, linkIndex);
 1447   1      #else
                 UNUSED(opCode);
                 UNUSED(dataPtr);
                 UNUSED(linkIndex);
               #endif  
 1452   1      }
 1453          
 1454          PUBLIC BOOL MMI_AIR_Key_Event(KeyIndex keyIndex, U8 keyAction)
 1455          {
 1456   1      #ifdef PRODUCT_TYPE_K
                 return MMI_Share_Key_Event(keyIndex, keyAction);
               #elif defined PRODUCT_TYPE_A
 1459   1        return MMI_Share_Key_Event(keyIndex, keyAction);
 1460   1      #else
                 UNUSED(keyIndex);
                 UNUSED(keyAction);
                 return FALSE;
               #endif    
 1465   1      }
 1466          
 1467          PUBLIC void MMI_AIR_SendBGLedCmd(U8 ledDataIndex)
 1468          {
 1469   1      #ifdef PRODUCT_TYPE_K
                 MMI_Share_SendBGLedCmd(ledDataIndex);
               #elif defined PRODUCT_TYPE_A
 1472   1        MMI_Share_SendBGLedCmd(ledDataIndex);
 1473   1      #else
                 UNUSED(ledDataIndex);
               #endif  
 1476   1      }
 1477          
 1478          PUBLIC U16 MMI_AIR_CheckKeyDiscoverable(U16 keyCode)
 1479          {
 1480   1      #ifdef TWS_SETTINGS
 1481   1        U8 linkIndex;
 1482   1      
 1483   1        if((linkIndex = MMI_AIR_GetAirLink(PRODUCT_AIR_TWS)) != MMI_EOF)
 1484   1        {
 1485   2          if(A2DP_IsLinkFollower(linkIndex))
 1486   2          {
 1487   3            #ifdef AVRCP_Profile
 1488   3            MMI_AVRCP_SendVendorUnique(linkIndex, AVRCP_VENDOR_UNIQ_OPID_MODE_NOTIFY, AVRCP_VENDOR_UNIQ_PARA_MODE_
             -DISCOVERABLE);
 1489   3            #endif
 1490   3            keyCode = KEY_INVALID;
 1491   3          }
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 24  

 1492   2        }
 1493   1        #ifdef PRODUCT_TYPE_K
                 else if(0 == MMI_LinkKey_GetAirLinkPDLNumber())
                 {
                   keyCode = KEY_INVALID;
                 }
                 else if(gMMI_nvram.twsKChannel == NVRAM_PROFILE_RIGHT)
                 {
                   keyCode = KEY_INVALID;
                 }
                 #endif
 1503   1      #endif
 1504   1        return keyCode; 
 1505   1      }
 1506          
 1507          PUBLIC void MMI_AIR_WriteSecurityModeComplete(void)
 1508          {
 1509   1      #ifdef PRODUCT_TYPE_K 
                 MMI_Share_WriteSecurityModeComplete();
               #endif
 1512   1      }
 1513          
 1514          PUBLIC void MMI_AIR_WriteDiscoverabilityMode(U8 discoverabilityMode)
 1515          {
 1516   1      #ifdef PRODUCT_TYPE_K 
                 MMI_Share_WriteDiscoverabilityMode(discoverabilityMode);
               #else
 1519   1        UNUSED(discoverabilityMode);
 1520   1      #endif  
 1521   1      }
 1522          PUBLIC void MMI_AIR_EnterIncomingState(U8 linkIndex)
 1523          {
 1524   1      #ifdef PRODUCT_TYPE_K
                 MMI_Share_EnterIncomingState(linkIndex);
               #else
 1527   1        UNUSED(linkIndex);
 1528   1      #endif  
 1529   1      }
 1530          
 1531          PUBLIC U16 MMI_AIR_CheckKeyPowerOff(U16 keyCode)
 1532          {
 1533   1        #ifdef AVRCP_Profile
 1534   1        if(MAX_MULTI_POINT_NO != MMI_AIR_SendKeyPowerOffToAirDevice())
 1535   1        {
 1536   2          keyCode = KEY_INVALID;
 1537   2        }
 1538   1        #endif
 1539   1        
 1540   1        return keyCode;
 1541   1      }
 1542          
 1543          PUBLIC void MMI_AIR_KeyRoleChange(U8 linkIndex)
 1544          {
 1545   1      #ifdef PRODUCT_TYPE_K
                 MMI_Share_KeyRoleChange(linkIndex);
               #else
 1548   1        UNUSED(linkIndex);
 1549   1      #endif  
 1550   1      }
 1551          
 1552          PUBLIC void MMI_AIR_SaveHistory(U8 linkIndex)
 1553          {
 1554   1          UNUSED(linkIndex);  
 1555   1      #ifdef PRODUCT_TYPE_K 
                 MMI_Share_SaveData();
               #endif
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 25  

 1558   1      }
 1559          
 1560          #endif //AIR_MODULE
 1561          
 1562          #ifdef PEQ_ENABLE
 1563          PUBLIC void MMI_AIR_SetPEQParaCmd(U8 linkIndex, U8 peqMode, U8 peqModeIndex, U8 sectorMode)
 1564          {
 1565   1        #ifdef PRODUCT_TYPE_K
                 MMI_Share_SetPEQParaCmd(linkIndex, peqMode, peqModeIndex, sectorMode);
                 #elif defined PRODUCT_TYPE_A 
 1568   1        MMI_Share_SetPEQParaCmd(linkIndex, peqMode, peqModeIndex, sectorMode);
 1569   1        #else
                 UNUSED(linkIndex);
                 UNUSED(peqMode);
                 UNUSED(peqModeIndex);
                 UNUSED(sectorMode);
                 #endif
 1575   1      }
 1576          
 1577          PUBLIC void MMI_AIR_RealtimePEQCmd(U8 linkIndex, U8 XDATA_PTR para, U8 enable_mode)
 1578          {
 1579   1        #ifdef PRODUCT_TYPE_K
                 MMI_Share_RealtimePEQCmd(linkIndex, para, enable_mode);
                 #elif defined PRODUCT_TYPE_A 
 1582   1        MMI_Share_RealtimePEQCmd(linkIndex, para, enable_mode);
 1583   1        #else
                 UNUSED(linkIndex);
                 UNUSED(para);
                 UNUSED(enable_mode);
                 #endif
 1588   1      }
 1589          #endif
 1590          
 1591          PUBLIC void MMI_AIR_AirohaL2capHandler(U8 linkIndex, U8 XDATA_PTR ptr1)
 1592          {
 1593   1      #ifdef PRODUCT_TYPE_K
                 MMI_Share_AirohaL2capHandler(linkIndex, ptr1);
               #elif defined PRODUCT_TYPE_A 
 1596   1        MMI_Share_AirohaL2capHandler(linkIndex, ptr1);
 1597   1      #else
                 UNUSED(linkIndex);
                 OSMEM_Put(ptr1);
               #endif
 1601   1      }
 1602          
 1603          PUBLIC void MMI_AIR_WriteLocalBdAddrCpl(BOOL isSuccess)
 1604          {
 1605   1      #ifdef PRODUCT_TYPE_K
                 MMI_Share_WriteLocalBdAddrCpl(isSuccess);
               #else
 1608   1        UNUSED(isSuccess);
 1609   1      #endif
 1610   1      }
 1611          
 1612          PUBLIC BOOL MMI_AIR_CheckPairingTimeOutTimerExist(void)
 1613          {
 1614   1        #ifdef TWS_SETTINGS
 1615   1        return (gMMI_Air_ctl.stateTimeOutTimer == (OST XDATA_PTR) NULL) ? FALSE : TRUE;
 1616   1        #else
                 return FALSE; 
                 #endif
 1619   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
C251 COMPILER V5.57.0,  MMI_AirModule                                                      08/11/20  06:33:45  PAGE 26  

  ecode size           =      8773     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        32     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       773     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
