C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 1   


C251 COMPILER V5.57.0, COMPILATION OF MODULE MMI_HCI
OBJECT MODULE PLACED IN .\output\AB1520D_AiroStereoHeadset\MMI_HCI.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE source\MMI\MMI_HCI.c XSMALL HPTR FUNCTIONS(REENTRANT) ROM(HUGE) WARNIN
                    -GLEVEL(3) OPTIMIZE(9,SPEED) BROWSE ORDER INCDIR(.\source\COMMON;.\source\SECTOR;.\source\ABSDRIVER;.\source\OS;.\source\
                    -HC;.\source\LM;.\source\LC;.\source\ROM;.\source\ROM\COMMON;.\source\ROM\OS;.\source\ROM\HC;.\source\ROM\LL;.\source\ROM
                    -\LC;.\source\ROM\HAL;.\source\ROM\KERNEL;.\source\ROM\DRIVER;.\source\ROM\L2CAP;.\source\ROM\GAP;.\source\ROM\MMI_LE;.\s
                    -ource\ROM\SECTOR;.\source\ROM\SECTOR\Config0;.\source\SECTOR\Config0;.\source\SECTOR\Config1;.\source\SECTOR\DspData;.\s
                    -ource\SECTOR\Runtime;.\source\SECTOR\VoiceData;.\source\SECTOR\SectorBoundary;.\source\SECTOR\ToolMisc) DEFINE(FLASH_INI
                    -T=1,AB1520D,MIGRATE_ROM_TO_FLASH,DFU_LOADER_IN_BOOT_CODE,TWS_SETTINGS) DEBUG PRINT(.\LST\AB1520D_AiroStereoHeadset\MMI_H
                    -CI.lst) TABS(2) OBJECT(.\output\AB1520D_AiroStereoHeadset\MMI_HCI.obj) 

stmt  level    source

    1          //////////////////////////////////////////////////////////
    2          // Copyright@ 2009 Airoha.  All right reserved.
    3          //////////////////////////////////////////////////////////
    4          #include "reside_flash.inc"
    5          
    6          #define _MMI_HCI_C_
    7          
    8          #include "os.h"
    9          #include "bt_config_profile.h"
   10          
   11          #include "align_flash.h"
   12          #include "os_flash.h"
   13          #include "MMI.h"
   14          #include "MMI_Base.h"
   15          #include "MMI_Protocol.h"
   16          #include "MMI_State.h"
   17          #include "MMI_Driver.h"
   18          #include "MMI_SDAP.h"
   19          #include "MMI_Timer.h"
   20          #include "MMI_HCI.h"
   21          #include "MMI_AVRCP.h"
   22          #include "MMI_A2DP.h"
   23          #include "MMI_HFP.h"
   24          #include "MMI_AirModule.h"
   25          #include "MMI_ChgBat.h"
   26          #include "MMI_Reconnect.h"
   27          #include "MMI_LineIn.h"
   28          #include "MMI_SectorManager.h"
   29          #ifdef FAST_CONNECT_DONGLE
               #include "MMI_FCD.h"
               #endif
   32          #ifdef SPP_Profile
   33          #include "..\SPP\SPP_interface.h"
   34          #endif
   35          #ifdef SUPPORT_LE_XPORT
               #include "..\LE_XPORT\le_xport_interface.h"
               #endif
   38          #ifdef OLED_ENABLE
               #include "..\Driver\OLED.h"
               #endif
   41          #include "..\A2DP\A2DP_interface.h"
   42          #include "..\L2CAP\L2CAP_Interface.h"
   43          #include "..\HC\HC_Interface.h"
   44          #include "..\GAP\GAP_interface.h"
   45          #include "drivers_flash.h"
   46          #include "sector_gap_nvram_type.h"
   47          #include "sector_tool_misc.h"
   48          #include "..\LM\LM_Interface.h"
   49          #include "..\RFCOMM\RFCOMM_Interface.h"
   50          #include "..\AVCTP\AVCTP_Interface.h"
   51          
   52          #include "I2C.h"
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 2   

   53          
   54          #ifdef TRSPX_App
               #include "MMI_TrspXport.h"
               #endif
   57          
   58          #ifdef IAP2_Profile
               #include "..\iAP2\iAP2_interface.h"
               #endif
   61          
   62          #ifdef AIRAPP_Profile
   63          #include "..\AirApp\AirApp_Interface.h"
   64          #endif
   65          
   66          #ifdef PEQ_ENABLE
   67          #include "..\Driver\Peq_HPF.h"
   68          #endif
   69          
   70          #ifdef MMI_INQUIRY_CMD
               #include "MMI_Inquiry.h"
               #endif
   73          
   74          #ifdef HID_Profile
               #include "MMI_HID.h"
               #endif
   77          
   78          #include "..\SDK_Proxy\SDK_Proxy.h"
   79          extern VFUN XDATA api_iosys_evt_func[API_GRP_IOSYS_CB_CNT];
   80          extern VFUN XDATA api_profile_func[API_GRP_PF_CB_CNT];
   81          
   82          #define MMI_CMD_PARA_PAGE_SCAN_MODE_R1    0x01
   83          
   84          PUBLIC void MMI_HCI_AirohaCmd_SendResponse(U8 cmdOpcode, U8 resultCode);
   85          PUBLIC void MMI_HCI_AirohaCmd_ExtSendResponse(U8 cmdOpcode, U16 extendOCF, U8 resultCode);
   86          PRIVATE void MMI_HCI_ConnectionReq(MMIMsgType XDATA_PTR msgPtr);
   87          PRIVATE void MMI_HCI_DisconnectionComplete(MMIMsgType XDATA_PTR msgPtr);
   88          PRIVATE void MMI_HCI_CommandComplete(MMIMsgType XDATA_PTR msgPtr);
   89          PRIVATE void MMI_HCI_ConnectionComplete(MMIMsgType XDATA_PTR msgPtr);
   90          PRIVATE void MMI_HCI_SCOConnectionChange(MMIMsgType XDATA_PTR msgPtr);
   91          PRIVATE void MMI_HCI_PinCodeRequest(MMIMsgType XDATA_PTR msgPtr);
   92          PRIVATE void MMI_HCI_LinkKeyRequest(MMIMsgType XDATA_PTR msgPtr);
   93          PRIVATE void MMI_HCI_LinkKeyNotification(MMIMsgType XDATA_PTR msgPtr);
   94          PRIVATE void MMI_HCI_AuthenticationComplete(MMIMsgType XDATA_PTR msgPtr);
   95          PRIVATE void MMI_HCI_EncryptionChange(MMIMsgType XDATA_PTR msgPtr);
   96          PRIVATE void MMI_HCI_QosSetupComplete(MMIMsgType XDATA_PTR msgPtr);
   97          PRIVATE void MMI_HCI_CommandStatus(MMIMsgType XDATA_PTR msgPtr);
   98          PRIVATE void MMI_HCI_InquiryResult(MMIMsgType XDATA_PTR msgPtr);
   99          PRIVATE void MMI_HCI_InquiryResultwithRSSI(MMIMsgType XDATA_PTR msgPtr);
  100          PRIVATE void MMI_HCI_ExtendedInquiryResult(MMIMsgType XDATA_PTR msgPtr);
  101          PRIVATE void MMI_HCI_InquiryComplete(MMIMsgType XDATA_PTR msgPtr);
  102          PRIVATE void MMI_HCI_ModeChange(MMIMsgType XDATA_PTR msgPtr);
  103          PRIVATE void MMI_HCI_IOCapabilityRequest(MMIMsgType XDATA_PTR msgPtr);
  104          PRIVATE void MMI_HCI_IOCapabilityResponse(MMIMsgType XDATA_PTR msgPtr);
  105          PRIVATE void MMI_HCI_UserConfirmationRequest(MMIMsgType XDATA_PTR msgPtr);
  106          PRIVATE void MMI_HCI_RoleChange(MMIMsgType XDATA_PTR msgPtr);
  107          PRIVATE void MMI_HCI_SCOPacketType(MMIMsgType XDATA_PTR msgPtr);
  108          PRIVATE void MMI_HCI_NumberOfCompletePktEvt(MMIMsgType XDATA_PTR msgPtr);
  109          PRIVATE void MMI_HCI_VendorEvt(MMIMsgType XDATA_PTR msgPtr);
  110          PRIVATE void MMI_HCI_ToolCommand(MMIMsgType XDATA_PTR msgPtr);
  111          PRIVATE void MMI_HCI_UARTCommand(MMIMsgType XDATA_PTR msgPtr);
  112          PRIVATE void MMI_HCI_ExtUARTCommand(MMIMsgType XDATA_PTR msgPtr);
  113          PRIVATE void MMI_HCI_SPPCommand(MMIMsgType XDATA_PTR msgPtr);
  114          PRIVATE void MMI_GAP_WriteSecurityModeComplete(MMIMsgType XDATA_PTR msgPtr);
  115          PRIVATE void MMI_GAP_WriteConnectabilityModeComplete(MMIMsgType XDATA_PTR msgPtr);
  116          PRIVATE void MMI_GAP_WriteDiscoverabilityModeComplete(MMIMsgType XDATA_PTR msgPtr);
  117          
  118          PRIVATE void MMI_ScanHandlerWhenSCO(BOOL isStart);
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 3   

  119          PRIVATE void MMI_HCI_AcceptSCOReqProfileHandle(U8 linkIndex);
  120          PRIVATE void MMI_HCI_ScoDiscHandle(U8 linkIndex);
  121          PRIVATE void MMI_HCI_ScoDiscProfileHandle(U8 linkIndex);
  122          PRIVATE void MMI_HCI_ScoConnOKHandle(U8 linkIndex);
  123          PRIVATE void MMI_HCI_ScoConnOKProfileHandle(U8 linkIndex);
  124          PRIVATE void MMI_HCI_ScoConnFailHandle(U8 linkIndex);
  125          PRIVATE void MMI_HCI_ScoConnFailProfileHandle(U8 linkIndex);
  126          PRIVATE void MMI_HCI_AclDiscHandle(U8 linkIndex);
  127          PRIVATE void MMI_HCI_RemoveSCOAudioLink(U8 linkIndex);
  128          PRIVATE void MMI_HCI_AddSCOAudioLink(U8 linkIndex);
  129          
  130          #ifdef TRSPX_App
               PRIVATE void MMI_HCI_SendKeypressNtf(MMIMsgType XDATA_PTR msgPtr);
               PRIVATE void MMI_HCI_PasskeyReply(U8 linkIndex, MMIMsgType XDATA_PTR msgPtr);
               PRIVATE void MMI_HCI_TrspXportCommand(MMIMsgType XDATA_PTR msgPtr);
               PRIVATE void MMI_HCI_TrspXUserConfirmationRequest(MMIMsgType XDATA_PTR msgPtr);
               #endif
  136          PRIVATE void MMI_HCI_PasskeyRequest(MMIMsgType XDATA_PTR msgPtr);
  137          PRIVATE void MMI_HCI_SSPCmpEvt(MMIMsgType XDATA_PTR msgPtr);
  138          PRIVATE void MMI_HCI_ReadRemoteNameEvt(MMIMsgType XDATA_PTR msgPtr);
  139          PRIVATE void MMI_HCI_PairingFailHandle(U8 XDATA_PTR  bdAddrPtr, U8 reason);
  140          PRIVATE void MMI_HCI_PairingSuccessfulHandle(U8 XDATA_PTR bdAddrPtr);
  141          PRIVATE void MMI_HCI_UpdateRole(U8 linkIndex, U8 role);
  142          
  143          typedef struct
  144          {
  145            HCI_VCMD_OPCODE_STRU VOpCode;
  146              U8 ServiceType;
  147              U8 FlowStatus;  
  148          }MMIHCIVCmdQosSetupParaType;
  149          
  150          typedef union
  151          {
  152            U8 role; //HCI_CMD_SWITCH_ROLE
  153            MMIHCIVCmdQosSetupParaType vQosPara; //HCI_VCMD_OCF_SETUP_QOS
  154            HCI_VCMD_OPCODE_STRU VOpCode;
  155          }MMIHCIParaType;
  156          
  157          typedef struct
  158          {
  159            U8 cmdCode;
  160            U8 linkIndex;
  161            MMIHCIParaType para;
  162            OSMQ cmdQueue;
  163          }MMIHCICtlType;
  164          
  165          MMIHCICtlType XDATA gMMI_HCI_ctl;
  166          
  167          PUBLIC void MMI_HCI_SendCmd(MMIMsgType XDATA_PTR msgPtr)
  168          {
  169   1        MMIMsgType XDATA_PTR tempPtr;
  170   1        
  171   1        switch(msgPtr->msgOpcode)
  172   1        {
  173   2          case HCI_VCMD_AIROHA_TO_UART:
  174   2            OSMQ_Put (OSMQ_HCIDRV_Command_From_GAP_ptr, (U8 XDATA_PTR)msgPtr);
  175   2            break;
  176   2          case HCI_VCMD_AIROHA:
  177   2            if(msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf == HCI_VENDOR_OGF_AUDIO && msgPtr->msgBodyPtr.hciVCmd.VO
             -pCode.VCmdOcf == HCI_VCMD_OCF_SETUP_QOS)
  178   2            {
  179   3              if(gMMI_HCI_ctl.cmdCode)
  180   3              {
  181   4                U8 i = OSMQ_Entries(&gMMI_HCI_ctl.cmdQueue);
  182   4                while(i--)
  183   4                {
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 4   

  184   5                  tempPtr = (MMIMsgType XDATA_PTR)OSMQ_Get(&gMMI_HCI_ctl.cmdQueue);
  185   5                  if( tempPtr->msgOpcode == HCI_VCMD_AIROHA && 
  186   5                    tempPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf == HCI_VENDOR_OGF_AUDIO && tempPtr->msgBodyPtr.hciVCmd
             -.VOpCode.VCmdOcf == HCI_VCMD_OCF_SETUP_QOS &&
  187   5                    *((U16 XDATA_PTR)&tempPtr->msgBodyPtr.hciVCmd.VPara.setupQosCmd.ConnHdlB0) == *((U16 XDATA_PTR)&ms
             -gPtr->msgBodyPtr.hciVCmd.VPara.setupQosCmd.ConnHdlB0))
  188   5                  {
  189   6                    OSMEM_Put((U8 XDATA_PTR)tempPtr);
  190   6                  }
  191   5                  else
  192   5                  {
  193   6                    OSMQ_Put (&gMMI_HCI_ctl.cmdQueue, (U8 XDATA_PTR)tempPtr);
  194   6                  }
  195   5                }
  196   4                
  197   4                if( gMMI_HCI_ctl.cmdCode == msgPtr->msgOpcode &&
  198   4                  gMMI_HCI_ctl.para.vQosPara.VOpCode.VCmdOgf == HCI_VENDOR_OGF_AUDIO && gMMI_HCI_ctl.para.vQosPara.VO
             -pCode.VCmdOcf == HCI_VCMD_OCF_SETUP_QOS &&
  199   4                  gMMI_HCI_ctl.linkIndex == MMI_GetLinkIndexByConnHandle(ENDIAN_TRANSFORM_U16(*((U16 XDATA_PTR)&msgPt
             -r->msgBodyPtr.hciVCmd.VPara.setupQosCmd.ConnHdlB0))) &&
  200   4                  gMMI_HCI_ctl.para.vQosPara.ServiceType == msgPtr->msgBodyPtr.hciVCmd.VPara.setupQosCmd.ServiceType 
             -&&
  201   4                  gMMI_HCI_ctl.para.vQosPara.FlowStatus == msgPtr->msgBodyPtr.hciVCmd.VPara.setupQosCmd.FlowStatus)
  202   4                {
  203   5                  OSMEM_Put((U8 XDATA_PTR)msgPtr);
  204   5                }
  205   4                else
  206   4                {
  207   5                  OSMQ_Put (&gMMI_HCI_ctl.cmdQueue, (U8 XDATA_PTR)msgPtr);
  208   5                }
  209   4              }
  210   3              else
  211   3              {
  212   4                gMMI_HCI_ctl.cmdCode = msgPtr->msgOpcode;
  213   4                gMMI_HCI_ctl.linkIndex = MMI_GetLinkIndexByConnHandle(ENDIAN_TRANSFORM_U16(*((U16 XDATA_PTR)&msgPtr-
             ->msgBodyPtr.hciVCmd.VPara.setupQosCmd.ConnHdlB0)));
  214   4                gMMI_HCI_ctl.para.vQosPara.VOpCode.VCmdOgf = HCI_VENDOR_OGF_AUDIO;
  215   4                gMMI_HCI_ctl.para.vQosPara.VOpCode.VCmdOcf = HCI_VCMD_OCF_SETUP_QOS;
  216   4                gMMI_HCI_ctl.para.vQosPara.ServiceType = msgPtr->msgBodyPtr.hciVCmd.VPara.setupQosCmd.ServiceType;
  217   4                gMMI_HCI_ctl.para.vQosPara.FlowStatus = msgPtr->msgBodyPtr.hciVCmd.VPara.setupQosCmd.FlowStatus;  
  218   4                OSMQ_Put (OSMQ_HCIDRV_Command_From_GAP_ptr, (U8 XDATA_PTR)msgPtr);  
  219   4                LightDbgPrint("send airoha qos cmd:%x,%x",(U8)gMMI_HCI_ctl.para.vQosPara.ServiceType, (U8)gMMI_HCI_c
             -tl.para.vQosPara.FlowStatus);
  220   4              }     
  221   3            }
  222   2            else if(msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf == HCI_VENDOR_OGF_GENERAL_V2 && msgPtr->msgBodyPtr.
             -hciVCmd.VOpCode.VCmdOcf == HCI_VCMD_OCF_GENERAL_WRITE_BD_ADDR)
  223   2            {
  224   3              if(gMMI_HCI_ctl.cmdCode)
  225   3              {
  226   4                OSMQ_Put (&gMMI_HCI_ctl.cmdQueue, (U8 XDATA_PTR)msgPtr);
  227   4              }
  228   3              else
  229   3              {
  230   4                gMMI_HCI_ctl.cmdCode = msgPtr->msgOpcode;
  231   4                gMMI_HCI_ctl.linkIndex = MMI_EOF;
  232   4                gMMI_HCI_ctl.para.VOpCode.VCmdOgf = HCI_VENDOR_OGF_GENERAL_V2;
  233   4                gMMI_HCI_ctl.para.VOpCode.VCmdOcf = HCI_VCMD_OCF_GENERAL_WRITE_BD_ADDR; 
  234   4                OSMQ_Put (OSMQ_HCIDRV_Command_From_GAP_ptr, (U8 XDATA_PTR)msgPtr);  
  235   4                LightDbgPrint("send airoha write bd addr cmd");
  236   4              }         
  237   3            }
  238   2            else
  239   2            {
  240   3              OSMQ_Put (OSMQ_HCIDRV_Command_From_GAP_ptr, (U8 XDATA_PTR)msgPtr);
  241   3            }
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 5   

  242   2            break;
  243   2        
  244   2          case HCI_CMD_CREATE_CONNECTION:
  245   2            if(gMMI_HCI_ctl.cmdCode)
  246   2            {
  247   3              OSMQ_Put (&gMMI_HCI_ctl.cmdQueue, (U8 XDATA_PTR)msgPtr);
  248   3            }
  249   2            else
  250   2            {
  251   3              OSMQ_Put (OSMQ_HCIDRV_Command_From_GAP_ptr, (U8 XDATA_PTR)msgPtr);  
  252   3            }   
  253   2            break;
  254   2          
  255   2          case HCI_CMD_SWITCH_ROLE:
  256   2            if(gMMI_HCI_ctl.cmdCode)
  257   2            {
  258   3              U8 i = OSMQ_Entries(&gMMI_HCI_ctl.cmdQueue);
  259   3              while(i--)
  260   3              {
  261   4                tempPtr = (MMIMsgType XDATA_PTR)OSMQ_Get(&gMMI_HCI_ctl.cmdQueue);
  262   4                if( HCI_CMD_SWITCH_ROLE == tempPtr->msgOpcode && 
  263   4                  MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.switchRoleCmd.BdAddr) == MMI_GetLink
             -IndexByBdA((U8 XDATA_PTR)&tempPtr->msgBodyPtr.hciCmd.switchRoleCmd.BdAddr))
  264   4                {
  265   5                  OSMEM_Put((U8 XDATA_PTR)tempPtr);
  266   5                }
  267   4                else
  268   4                {
  269   5                  OSMQ_Put (&gMMI_HCI_ctl.cmdQueue, (U8 XDATA_PTR)tempPtr);
  270   5                }
  271   4              }
  272   3              
  273   3              if( gMMI_HCI_ctl.cmdCode == msgPtr->msgOpcode && 
  274   3                gMMI_HCI_ctl.linkIndex == MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.switchRoleC
             -md.BdAddr) && 
  275   3                gMMI_HCI_ctl.para.role == msgPtr->msgBodyPtr.hciCmd.switchRoleCmd.Role)
  276   3              {
  277   4                OSMEM_Put((U8 XDATA_PTR)msgPtr);
  278   4              }
  279   3              else
  280   3              {         
  281   4                OSMQ_Put (&gMMI_HCI_ctl.cmdQueue, (U8 XDATA_PTR)msgPtr);
  282   4              }
  283   3            }
  284   2            else
  285   2            {
  286   3              gMMI_HCI_ctl.cmdCode = msgPtr->msgOpcode;
  287   3              gMMI_HCI_ctl.linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.switchRoleCmd
             -.BdAddr);
  288   3              gMMI_HCI_ctl.para.role = msgPtr->msgBodyPtr.hciCmd.switchRoleCmd.Role;
  289   3              OSMQ_Put (OSMQ_HCIDRV_Command_From_GAP_ptr, (U8 XDATA_PTR)msgPtr);
  290   3              LightDbgPrint("Send hci role switch to GAP");
  291   3            }
  292   2            break;  
  293   2            
  294   2          default:
  295   2            OSMQ_Put (OSMQ_HCIDRV_Command_From_GAP_ptr, (U8 XDATA_PTR)msgPtr);
  296   2            break;  
  297   2        }
  298   1      }
  299          
  300          
  301          PRIVATE void MMI_HCI_ClearCmdState(U8 cmdCode, U8 linkIndex, U8 VCmdOgf, U8 VCmdOcf)
  302          {
  303   1        if(cmdCode == gMMI_HCI_ctl.cmdCode)
  304   1        {
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 6   

  305   2          switch(cmdCode)
  306   2          {
  307   3            case HCI_CMD_SWITCH_ROLE:
  308   3              if(linkIndex == MMI_EOF || linkIndex == gMMI_HCI_ctl.linkIndex)
  309   3                MMI_SniffEnable(gMMI_HCI_ctl.linkIndex, MMI_SNIFF_ROLE_SWITCH);
  310   3              break;
  311   3            case HCI_VCMD_AIROHA:
  312   3              if(VCmdOgf == HCI_VENDOR_OGF_AUDIO && VCmdOcf == HCI_VCMD_OCF_SETUP_QOS)
  313   3              {
  314   4                if(gMMI_HCI_ctl.para.vQosPara.VOpCode.VCmdOgf == HCI_VENDOR_OGF_AUDIO && gMMI_HCI_ctl.para.vQosPara.
             -VOpCode.VCmdOcf == HCI_VCMD_OCF_SETUP_QOS)
  315   4                {
  316   5                  break;
  317   5                }         
  318   4              }
  319   3              else if(VCmdOgf == HCI_VENDOR_OGF_GENERAL_V2 && VCmdOcf == HCI_VCMD_OCF_GENERAL_WRITE_BD_ADDR)
  320   3              {
  321   4                if(gMMI_HCI_ctl.para.VOpCode.VCmdOgf == HCI_VENDOR_OGF_GENERAL_V2 && gMMI_HCI_ctl.para.VOpCode.VCmdO
             -cf == HCI_VCMD_OCF_GENERAL_WRITE_BD_ADDR)
  322   4                {
  323   5                  break;
  324   5                }
  325   4              }
  326   3              return;
  327   3              
  328   3            default:
  329   3              ASSERT(FALSE);
  330   3              break;
  331   3          }
  332   2          
  333   2          gMMI_HCI_ctl.cmdCode = 0;
  334   2          gMMI_HCI_ctl.linkIndex = 0;
  335   2          OS_memset(&gMMI_HCI_ctl.para, 0, sizeof(MMIHCIParaType));
  336   2          LightDbgPrint("Clear HCI_Ctl.cmdCode:%x,%x,%x",(U8)cmdCode, (U8)VCmdOgf, (U8)VCmdOcf);
  337   2          
  338   2          if(OSMQ_Entries(&gMMI_HCI_ctl.cmdQueue))
  339   2          {
  340   3            MMI_HCI_SendCmd(OSMQ_Get(&gMMI_HCI_ctl.cmdQueue));
  341   3          }
  342   2        }
  343   1      }
  344          
  345          PRIVATE BOOL MMI_HCI_IsCmdInBusy(U8 cmdCode, U8 linkIndex, U8 VCmdOgf, U8 VCmdOcf)
  346          {
  347   1        U8 i;
  348   1        BOOL isBusy = FALSE;
  349   1        
  350   1        if(gMMI_HCI_ctl.cmdCode)
  351   1        {
  352   2          if(cmdCode == gMMI_HCI_ctl.cmdCode && linkIndex == gMMI_HCI_ctl.linkIndex)
  353   2          {
  354   3            switch(cmdCode)
  355   3            {
  356   4              case HCI_VCMD_AIROHA:
  357   4                if(gMMI_HCI_ctl.para.VOpCode.VCmdOgf == VCmdOgf && gMMI_HCI_ctl.para.VOpCode.VCmdOcf == VCmdOcf)
  358   4                  return TRUE;
  359   4                break;
  360   4              default:
  361   4                ASSERT(FALSE);
  362   4                break;
  363   4            }
  364   3          }
  365   2        }
  366   1        
  367   1        i = OSMQ_Entries(&gMMI_HCI_ctl.cmdQueue);
  368   1        while(i--)
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 7   

  369   1        {
  370   2          MMIMsgType XDATA_PTR tempPtr;
  371   2          tempPtr = (MMIMsgType XDATA_PTR)OSMQ_Get(&gMMI_HCI_ctl.cmdQueue);
  372   2          if(cmdCode == tempPtr->msgOpcode)
  373   2          {
  374   3            if(cmdCode == HCI_VCMD_AIROHA)
  375   3            {
  376   4              if(VCmdOgf == HCI_VENDOR_OGF_AUDIO && VCmdOcf == HCI_VCMD_OCF_SETUP_QOS)
  377   4              {
  378   5                if(tempPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf == HCI_VENDOR_OGF_AUDIO && tempPtr->msgBodyPtr.hciVCm
             -d.VOpCode.VCmdOcf == HCI_VCMD_OCF_SETUP_QOS)
  379   5                {
  380   6                  if(linkIndex == MMI_GetLinkIndexByConnHandle(ENDIAN_TRANSFORM_U16(*((U16 XDATA_PTR)&tempPtr->msgBod
             -yPtr.hciVCmd.VPara.setupQosCmd.ConnHdlB0))))
  381   6                    isBusy = TRUE;
  382   6                } 
  383   5              }
  384   4            }
  385   3          }
  386   2          if(tempPtr != (MMIMsgType XDATA_PTR)NULL)
  387   2            OSMQ_Put (&gMMI_HCI_ctl.cmdQueue, (U8 XDATA_PTR)tempPtr);
  388   2        }
  389   1        return isBusy;
  390   1      }
  391          //------------------------------------------------------------------------------
  392          //NOTE!!/////////////////////
  393          //HCI_EVENT_ROLE_CHANGE
  394          //IVT dongle would do role switch even if we send CreateConnection HCI command with "MMI_CMD_PARA_NOT_ALL
             -OW_ROLE_SWITCH".
  395          //In that case, HCI_EVENT_ROLE_CHANGE would pass to MMI before we get Connection Handle, and that's the p
             -roblem.
  396          //Try to do Role Switch one more time as long as current role is SLAVE,
  397          //no matter Role Switch last time is sucessful or not.
  398          
  399          PUBLIC void MMI_HCI_Handler(void)
  400          {
  401   1        MMIMsgType XDATA_PTR msgPtr;
  402   1      
  403   1        if ((msgPtr = (MMIMsgType XDATA_PTR)OSMQ_Get (OSMQ_GAP_Event_To_MMI_ptr)) != (MMIMsgType XDATA_PTR)NULL)
  404   1        {
  405   2          switch (msgPtr->eventCode)
  406   2          {
  407   3            case HCI_EVENT_CONNECTION_REQUEST:
  408   3              MMI_HCI_ConnectionReq(msgPtr);
  409   3              break;
  410   3      
  411   3            case HCI_EVENT_DISCONNECTION_COMPLETE:
  412   3              MMI_HCI_DisconnectionComplete(msgPtr);
  413   3              break;
  414   3      
  415   3            case HCI_EVENT_COMMAND_COMPLETE:
  416   3               MMI_HCI_CommandComplete(msgPtr);
  417   3              break;
  418   3      
  419   3            case HCI_EVENT_CONNECTION_COMPLETE:
  420   3            case HCI_EVENT_SYNCHRONOUS_CONNECTION_COMPLETE:
  421   3              MMI_HCI_ConnectionComplete(msgPtr);
  422   3              break;
  423   3      
  424   3            case HCI_EVENT_SYNCHRONOUS_CONNECTION_CHANGED:
  425   3              MMI_HCI_SCOConnectionChange(msgPtr);
  426   3              break;
  427   3      
  428   3            case HCI_EVENT_PIN_CODE_REQUEST:
  429   3              MMI_HCI_PinCodeRequest(msgPtr);
  430   3              break;
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 8   

  431   3      
  432   3            case HCI_EVENT_LINK_KEY_REQUEST:
  433   3              MMI_HCI_LinkKeyRequest(msgPtr);
  434   3              break;
  435   3      
  436   3            case HCI_EVENT_LINK_KEY_NOTIFICATION:
  437   3              MMI_HCI_LinkKeyNotification(msgPtr);
  438   3              break;
  439   3      
  440   3            case HCI_EVENT_AUTHENTICATION_COMPLETE:
  441   3              MMI_HCI_AuthenticationComplete(msgPtr);
  442   3              break;
  443   3      
  444   3            case HCI_EVENT_ENCRYPTION_CHANGE:
  445   3              MMI_HCI_EncryptionChange(msgPtr);
  446   3              break;
  447   3      
  448   3            case HCI_EVENT_QOS_SETUP_COMPLETE:
  449   3              MMI_HCI_QosSetupComplete(msgPtr);
  450   3              break;
  451   3      
  452   3            case HCI_EVENT_COMMAND_STATUS:
  453   3              MMI_HCI_CommandStatus(msgPtr);
  454   3              break;
  455   3              
  456   3            case HCI_EVENT_INQUIRY_RESULT:
  457   3              MMI_HCI_InquiryResult(msgPtr);
  458   3              break;
  459   3      
  460   3            case HCI_EVENT_INQUIRY_RESULT_WITH_RSSI:
  461   3              MMI_HCI_InquiryResultwithRSSI(msgPtr);
  462   3              break;
  463   3      
  464   3            case HCI_EVENT_EXTENDED_INQUIRY_RESULT:
  465   3              MMI_HCI_ExtendedInquiryResult(msgPtr);
  466   3              break;
  467   3      
  468   3            case HCI_EVENT_INQUIRY_COMPLETE:
  469   3              MMI_HCI_InquiryComplete(msgPtr);
  470   3              break;
  471   3      
  472   3            case GAP_EVENT_TO_PROFILE_SNIFF_MODE_COMPLETE:
  473   3            case GAP_EVENT_TO_PROFILE_EXIT_SNIFF_MODE_COMPLETE:
  474   3            case HCI_EVENT_MODE_CHANGE:
  475   3              MMI_HCI_ModeChange(msgPtr);
  476   3              break;
  477   3      
  478   3            case HCI_EVENT_IO_CAPABILITY_REQUEST:
  479   3              MMI_HCI_IOCapabilityRequest(msgPtr);
  480   3              break;
  481   3            case HCI_EVENT_IO_CAPABILITY_RESPONSE:
  482   3              MMI_HCI_IOCapabilityResponse(msgPtr);
  483   3              break;
  484   3      
  485   3            case HCI_EVENT_USER_CONFIRMATION_REQUEST:
  486   3                      #ifdef TRSPX_App
                               MMI_HCI_TrspXUserConfirmationRequest(msgPtr);
                               #else
  489   3              MMI_HCI_UserConfirmationRequest(msgPtr);
  490   3                      #endif
  491   3              break;
  492   3      
  493   3            case HCI_EVENT_ROLE_CHANGE:
  494   3              MMI_HCI_RoleChange(msgPtr);
  495   3              break;
  496   3      
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 9   

  497   3            case HCI_EVENT_SCO_PACKET_TYPE:
  498   3              MMI_HCI_SCOPacketType(msgPtr);
  499   3              break;
  500   3      
  501   3            case HCI_EVENT_PASSKEY_REQUEST:
  502   3              MMI_HCI_PasskeyRequest(msgPtr);
  503   3              break;
  504   3      
  505   3            case HCI_EVENT_SIMPLE_PAIRING_COMPLETE:
  506   3              MMI_HCI_SSPCmpEvt(msgPtr);
  507   3              break;
  508   3      
  509   3            case HCI_EVENT_REMOTE_NAME_REQUEST_COMPLETE:
  510   3              MMI_HCI_ReadRemoteNameEvt(msgPtr);
  511   3              break;
  512   3      
  513   3            case HCI_EVENT_NUMBER_OF_COMPLETED_PACKETS:
  514   3              MMI_HCI_NumberOfCompletePktEvt(msgPtr);
  515   3              break;
  516   3      
  517   3            #ifdef AUDIO_BIST
  518   3            case HCI_EVENT_BIST_CMD:
  519   3              MMI_DRV_AudioBistHCICommand(msgPtr);
  520   3              break;
  521   3            #endif
  522   3      
  523   3            case HCI_EVENT_AIROHA_VENDOR:
  524   3              MMI_HCI_VendorEvt(msgPtr);
  525   3              break;
  526   3      
  527   3            case GAP_EVENT_TO_PROFILE_WRITE_SECURITY_MODE_COMPLETE:
  528   3              MMI_GAP_WriteSecurityModeComplete(msgPtr);
  529   3              break;
  530   3      
  531   3            case GAP_EVENT_TO_PROFILE_WRITE_CONNECTABILITY_MODE_COMPLETE:
  532   3              MMI_GAP_WriteConnectabilityModeComplete(msgPtr);
  533   3              break;
  534   3      
  535   3            case GAP_EVENT_TO_PROFILE_WRITE_DISCOVERABILITY_MODE_COMPLETE:
  536   3              MMI_GAP_WriteDiscoverabilityModeComplete(msgPtr);
  537   3              break;
  538   3      
  539   3            default:
  540   3              OSMEM_Put ((U8 XDATA_PTR)msgPtr);
  541   3              break;
  542   3          }
  543   2        }
  544   1      }
  545          
  546          PRIVATE void MMI_HCI_SetU16(U16 XDATA_PTR targetPtr, U16 value)
  547          {
  548   1        *targetPtr = ENDIAN_TRANSFORM_U16(value);
  549   1      }
  550          
  551          PRIVATE void MMI_HCI_SetU32(U32 XDATA_PTR targetPtr, U32 value)
  552          {
  553   1        *targetPtr = ENDIAN_TRANSFORM_U32(value);
  554   1      }
  555          
  556          PUBLIC void MMI_HCI_WriteLinkPolicySetting(U8 linkIndex, U16 link_policy_settings)
  557          {
  558   1        MMIMsgType XDATA_PTR msgPtr;
  559   1      
  560   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_WRITE_LINK_POLICY_SETTINGS)) != (MMIMsgType XDATA_PTR)NUL
             -L)
  561   1        {
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 10  

  562   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_WR_LINK_POLICY_SETTING_STRU); 
  563   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.writeLinkPolicySetting.ConnHdlB0, gMMI_ctl.mmi
             -Info[linkIndex].linkPara.aclConnHandle);
  564   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.writeLinkPolicySetting.LinkPolicySettingB0, li
             -nk_policy_settings);
  565   2          MMI_HCI_SendCmd(msgPtr);
  566   2        }
  567   1        else
  568   1        {
  569   2          ASSERT_PRINT("MEM ALLOC ERR");
  570   2        }
  571   1      }
  572          
  573          PRIVATE void MMI_HCI_ConnectionReq(MMIMsgType XDATA_PTR msgPtr)
  574          {
  575   1        U8 linkIndex;
  576   1      
  577   1        switch(msgPtr->msgBodyPtr.hciEvt.connRequestEvt.LinkType)
  578   1        {
  579   2          case LINK_TYPE_SCO_CONNECTION_REQUEST:
  580   2          case LINK_TYPE_eSCO_CONNECTION_REQUEST:
  581   2            msgPtr->dataOffset = CMD_OFFSET;
  582   2            linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.connRequestEvt.BdAddr);
  583   2            if(linkIndex < MAX_MULTI_POINT_NO)
  584   2            {
  585   3              if(!SCO_EXISTS(linkIndex))
  586   3              {
  587   4                gMMI_ctl.mmiInfo[linkIndex].linkPara.scoIsActiveEstablished = FALSE;
  588   4                // verson 2.0
  589   4                msgPtr->msgOpcode = HCI_CMD_ACCEPT_SYNCHRONOUS_CONNECTION_REQUEST;
  590   4                msgPtr->paraLen = sizeof(HCI_CMD_PARA_ACP_SCO_CONN_REQ_STRU); //21;
  591   4                //msgPtr->msgBodyPtr.hciAcpScoCnf.bdAddr already existes, it doesnt need to
  592   4                MMI_HCI_SetU32((U32 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.acceptSCOConnReqCmd.TxBandwidth, gMMI_nvram
             -.scoPktPara.TxBandwidth); //(U32)8000);
  593   4                MMI_HCI_SetU32((U32 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.acceptSCOConnReqCmd.RxBandwidth, gMMI_nvram
             -.scoPktPara.RxBandwidth); //(U32)8000);
  594   4                MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.acceptSCOConnReqCmd.MaxLatencyB0, gMMI_nvra
             -m.scoPktPara.MaxLatency); //0XFFFF); //dont care
  595   4                MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.acceptSCOConnReqCmd.ContentFormatB0, gMMI_n
             -vram.scoPktPara.VoiceSetting); //(U16)0X0060); // 2's complement, 16-bit sample size, CVSD
  596   4                msgPtr->msgBodyPtr.hciCmd.acceptSCOConnReqCmd.ReTxEffort = gMMI_nvram.scoPktPara.ReTxEffort;//dont c
             -are
  597   4                MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.acceptSCOConnReqCmd.PacketTypeB0, gMMI_nvra
             -m.scoPktPara.scoPktType); //(U16)0X0004); //HV3
  598   4                
  599   4                MMI_HCI_AcceptSCOReqProfileHandle(linkIndex);
  600   4              }
  601   3              else
  602   3              {
  603   4                msgPtr->msgOpcode = HCI_CMD_REJECT_SYNCHRONOUS_CONNECTION_REQUEST;
  604   4                msgPtr->paraLen = sizeof(HCI_CMD_PARA_REJ_SCO_CONN_REQ_STRU); //7;
  605   4                msgPtr->msgBodyPtr.hciCmd.rejectSCOConnReqCmd.Reason = ERR_CONNECTION_REJECTED_DUE_TO_LIMITED_RESOUR
             -CES;
  606   4              }
  607   3            }
  608   2            else
  609   2            {
  610   3              msgPtr->msgOpcode = HCI_CMD_REJECT_SYNCHRONOUS_CONNECTION_REQUEST;
  611   3              msgPtr->paraLen = sizeof(HCI_CMD_PARA_REJ_SCO_CONN_REQ_STRU); //7;
  612   3              msgPtr->msgBodyPtr.hciCmd.rejectSCOConnReqCmd.Reason = ERR_CONNECTION_REJECTED_DUE_TO_UNACCEPTABLE_BD
             -_ADDR;
  613   3            }
  614   2            MMI_HCI_SendCmd(msgPtr);
  615   2            break;
  616   2      
  617   2          case LINK_TYPE_ACL_CONNECTION_REQUEST:
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 11  

  618   2            msgPtr->dataOffset = CMD_OFFSET;
  619   2            if((linkIndex = MMI_GetEmptyLinkIndex((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.connRequestEvt.BdAddr, 
             -FALSE)) < MAX_MULTI_POINT_NO )
  620   2            {
  621   3              ACCEPT_CONN_REQ:
  622   3              if(MMI_CONN_STATE_WAITING_ACTIVE == MMI_GetConnectionState(linkIndex))
  623   3              {
  624   4                MMI_PageFailHandler(linkIndex);
  625   4              }
  626   3              else if(MMI_CONN_STATE_WAIT_FOR_DETACH == MMI_GetConnectionState(linkIndex))
  627   3              {
  628   4                goto REJECT_CONN_REQ;
  629   4              }
  630   3              
  631   3              #ifdef AIR_MODULE
  632   3              MMI_AIR_ACLConnRequest(linkIndex);
  633   3              #endif
  634   3      
  635   3              OSMEM_memcpy_xdata_xdata ((U8 XDATA_PTR)gMMI_ctl.mmiInfo[linkIndex].bdAddr,
  636   3                    (U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.connRequestEvt.BdAddr, 6);
  637   3              OSMEM_memcpy_xdata_xdata ((U8 XDATA_PTR)gMMI_ctl.mmiInfo[linkIndex].linkPara.classOfDev,
  638   3                    (U8 XDATA_PTR)msgPtr->msgBodyPtr.hciEvt.connRequestEvt.ClassOfDevice, 3);
  639   3      
  640   3              MMI_SetConnectionState(linkIndex, MMI_CONN_STATE_WAITING_PASS);
  641   3                  
  642   3              MMI_HCI_UpdateRole(linkIndex, ROLE_SLAVE);
  643   3                          
  644   3              msgPtr->msgOpcode = HCI_CMD_ACCEPT_CONNECTION_REQUEST;
  645   3              if (MMI_ROLE_SWITCH_TO_MASTER_DURING_ACCEPT_CONN_FEAT)
  646   3              {
  647   4                msgPtr->msgBodyPtr.hciCmd.acceptConnReqCmd.Role = HCI_CMD_ACCEPT_CONN_REQ_ROLE_IS_MASTER;
  648   4              }
  649   3              else
  650   3              {
  651   4                msgPtr->msgBodyPtr.hciCmd.acceptConnReqCmd.Role = HCI_CMD_ACCEPT_CONN_REQ_ROLE_IS_SLAVE;
  652   4              }
  653   3              #ifdef AIR_MODULE
  654   3              MMI_AIR_AcceptConnReq((U8 XDATA_PTR)gMMI_ctl.mmiInfo[linkIndex].bdAddr, &msgPtr->msgBodyPtr.hciCmd.ac
             -ceptConnReqCmd.Role);
  655   3              #endif
  656   3            }
  657   2            else if((linkIndex = MMI_Reconnect_GetPagingLink()) != MMI_EOF)
  658   2            {
  659   3              MMI_HCI_SendCreateConnectionCancel((U8 XDATA_PTR)gMMI_ctl.mmiInfo[linkIndex].bdAddr);
  660   3              MMI_PageFailHandler(linkIndex);
  661   3              if((linkIndex = MMI_GetEmptyLinkIndex((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.connRequestEvt.BdAddr,
             - FALSE)) < MAX_MULTI_POINT_NO )
  662   3              {
  663   4                goto ACCEPT_CONN_REQ;
  664   4              }
  665   3              else
  666   3              {
  667   4                goto REJECT_CONN_REQ;
  668   4              }
  669   3            }
  670   2            else
  671   2            {
  672   3              REJECT_CONN_REQ:
  673   3              msgPtr->msgOpcode = HCI_CMD_REJECT_CONNECTION_REQUEST;
  674   3              msgPtr->msgBodyPtr.hciCmd.rejectConnReqCmd.Reason = ERR_CONNECTION_REJECTED_DUE_TO_LIMITED_RESOURCES;
  675   3            }
  676   2            MMI_HCI_SendCmd(msgPtr);
  677   2            break;
  678   2      
  679   2          default:
  680   2            ASSERT_PRINT("link type ERR");
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 12  

  681   2            OSMEM_Put ((U8 XDATA_PTR)msgPtr);
  682   2            break;
  683   2        }
  684   1      }
  685          
  686          PRIVATE void MMI_HCI_DisconnectionComplete(MMIMsgType XDATA_PTR msgPtr)
  687          {
  688   1        U8 linkIndex;
  689   1        U16 connHandle;
  690   1        BOOL isActiveDisc;
  691   1        BOOL skipReconnect = FALSE;
  692   1      
  693   1        connHandle = ENDIAN_TRANSFORM_U16(*(U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.discCompleteEvt.ConnHdlB0);
  694   1      
  695   1        //#ifdef DBG_UART_ENABLE_MMI
  696   1        LightDbgPrint("MMI - Disc %D complete:%x",(U32)connHandle,(U8)msgPtr->msgBodyPtr.hciEvt.discCompleteEvt.
             -Reason);
  697   1        //#endif
  698   1      
  699   1        if((linkIndex = MMI_GetLinkIndexByConnHandle(connHandle)) < MAX_MULTI_POINT_NO)
  700   1        {
  701   2          if(MMI_IsActiveLink(linkIndex))
  702   2          {
  703   3            if (connHandle == gMMI_ctl.mmiInfo[linkIndex].linkPara.aclConnHandle)
  704   3            {
  705   4              isActiveDisc = MMI_IsLinkActiveDisconnecting(linkIndex) ? TRUE : FALSE;
  706   4              
  707   4              // Out-of-Range Case [Link loss]  //supervision timeout
  708   4              if((msgPtr->msgBodyPtr.hciEvt.discCompleteEvt.Reason == ERR_LMP_RESPONSE_TIMEOUT || msgPtr->msgBodyPt
             -r.hciEvt.discCompleteEvt.Reason == ERR_CONNECTION_TIMEOUT))
  709   4              {
  710   5                gMMI_ctl.mmiInfo[linkIndex].linkPara.miscMask |= MMI_LINK_LOSS;
  711   5                #ifdef AIR_MODULE
  712   5                if(linkIndex == MMI_AIR_GetAirLink(PRODUCT_AIR_SCO_WOOFER))
  713   5                {
  714   6                  skipReconnect = TRUE;
  715   6                }
  716   5                #endif
  717   5                
  718   5                #ifdef AIR_UPDATE_DONGLE
                           skipReconnect = TRUE;
                         #endif
  721   5                OSMEM_memcpy_xdata_xdata(&gMMI_ctl.reconnectCtl.linkLossBdAddr, (U8 XDATA_PTR)&gMMI_ctl.mmiInfo[link
             -Index].bdAddr, sizeof(BD_ADDR));
  722   5              }
  723   4              #if 1 //mantis 9183
  724   4              else if(msgPtr->msgBodyPtr.hciEvt.discCompleteEvt.Reason == ERR_REMOTE_USER_TERMINATED_CONNECTION)
  725   4              {
  726   5                if(!MMI_Reconnect_FindTarget((U8 XDATA_PTR)&gMMI_ctl.mmiInfo[linkIndex].bdAddr))
  727   5                  skipReconnect = TRUE;
  728   5              }
  729   4              #endif
  730   4      
  731   4              MMI_HCI_AclDiscHandle(linkIndex);
  732   4      
  733   4              #ifdef TRSPX_App
                       // after delete ACL
                       MMI_TrspX_connectHandle(linkIndex, MMI_TRSPX_CONNECTED_NONE);
                       #endif
  737   4      
  738   4              //Enable auto switch off timer if there is no acl links.
  739   4              MMI_TIMER_ResetAutoSwitchOffTimer();
  740   4              
  741   4              #ifdef FAST_CONNECT_DONGLE
                       MMI_FCD_ReportAction(HCI_VEVT_OCF_FCD_ACL_DISC);
                       #endif
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 13  

  744   4              #ifdef OLED_ENABLE
                       OLED_DisconnectionShow();
                       #endif
  747   4      
  748   4              if(MMI_KEY_STATE_POWER_OFF != MMI_GetKeyState()) // Not Power off
  749   4              {
  750   5                if (CURRENT_ACTIVE_LINK_CNT < gMMI_ctl.currentSupportDeviceNo)
  751   5                {
  752   6                  if( !(MMI_NO_CONNECTABLE_IN_LINE_IN_FEAT && MMI_CheckInLineInState()) && !(MMI_NO_CONNECTABLE_IN_FM
             -_FEAT && MMI_CheckInFMState()))
  753   6                  {
  754   7                    MMI_ConnectabilityHandle(CMD_SET_CONNECTABLE);
  755   7                  }
  756   6                  if(MMI_DISCOVER_MODE_AFTER_DISCONNECT_FEAT)
  757   6                  {
  758   7                    if(CURRENT_ACTIVE_LINK_CNT == 0)
  759   7                      MMI_SetEnterDiscoverable(TRUE);
  760   7                    else
  761   7                      MMI_DiscoverabilityHandle(CMD_SET_NORMAL_DISCOVERABLE);
  762   7                  }
  763   6                }
  764   5      
  765   5                if(isActiveDisc && msgPtr->msgBodyPtr.hciEvt.discCompleteEvt.Reason != ERR_CONNECTION_TIMEOUT)
  766   5                {
  767   6                  if(!gMMI_ctl.activeLinkRecord)
  768   6                  {
  769   7                    if(MMI_IsEnterDiscoverableAfterDisc())
  770   7                    {
  771   8                      MMI_SetEnterDiscoverable(TRUE);
  772   8                      MMI_SetEnterDiscoverableAfterDisc(FALSE);
  773   8                    }
  774   7                  }
  775   6                  if(msgPtr->msgBodyPtr.hciEvt.discCompleteEvt.Reason == ERR_CONNECTION_TERMINATED_BY_LOCAL_HOST)
  776   6                  {
  777   7                    if(!skipReconnect)
  778   7                      MMI_Reconnect_SetDelayTimer(HALF_SEC);
  779   7                  }
  780   6                }
  781   5                else
  782   5                {
  783   6                  // Out-of-Range Case [Link loss]
  784   6                  if(msgPtr->msgBodyPtr.hciEvt.discCompleteEvt.Reason == ERR_LMP_RESPONSE_TIMEOUT || msgPtr->msgBodyP
             -tr.hciEvt.discCompleteEvt.Reason == ERR_CONNECTION_TIMEOUT)
  785   6                  {
  786   7                    if(MMI_DO_NOT_DISCO_DURING_LINK_LOSS_FEAT)
  787   7                    {
  788   8                      MMI_RmvState(MMI_EOF, MMI_CONDISCABLE);
  789   8                      MMI_SetEnterDiscoverable(FALSE);
  790   8                    }
  791   7                    if(MMI_AUTO_RECONN_AFTER_LINK_LOSS_FEAT && !skipReconnect)
  792   7                    {
  793   8                      MMI_Reconnect(RECONNECT_LINK_LOSS);
  794   8                    }
  795   7                  }
  796   6                  #if 1 //mantis 9183
  797   6                  else if(msgPtr->msgBodyPtr.hciEvt.discCompleteEvt.Reason == ERR_REMOTE_USER_TERMINATED_CONNECTION)
  798   6                  {
  799   7                    if(!skipReconnect)
  800   7                      MMI_Reconnect_SetDelayTimer(HALF_SEC);
  801   7                  }
  802   6                  #endif
  803   6                }
  804   5              }
  805   4            }
  806   3            else if (connHandle == gMMI_ctl.mmiInfo[linkIndex].linkPara.scoConnHandle)
  807   3            {
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 14  

  808   4              MMI_HCI_ScoDiscHandle(linkIndex);
  809   4              MMI_HCI_ScoDiscProfileHandle(linkIndex);
  810   4              MMI_HCI_SendExitSniffMode(linkIndex);
  811   4            }
  812   3          }
  813   2        }
  814   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
  815   1      }
  816          
  817          PRIVATE void MMI_HCI_CommandComplete(MMIMsgType XDATA_PTR msgPtr)
  818          {
  819   1        U8 linkIndex;
  820   1      
  821   1        switch(msgPtr->msgBodyPtr.hciEvt.cmdCompleteEvt.OpCodeB0)
  822   1        {
  823   2          case HCI_CMD_CREATE_CONNECTION_CANCEL:
  824   2            {
  825   3              HCI_CMD_RTN_PARA_CREATE_CONN_CANCEL_STRU XDATA_PTR RtnDataPtr = (HCI_CMD_RTN_PARA_CREATE_CONN_CANCEL_
             -STRU XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.cmdCompleteEvt.RtnPara;
  826   3              if((linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&RtnDataPtr->BdAddr)) < MAX_MULTI_POINT_NO)
  827   3              {
  828   4                MMI_PageFailHandler(linkIndex);   
  829   4                MMI_ClearMMILinkSettingType(linkIndex);         
  830   4              }
  831   3            }
  832   2            break;
  833   2      
  834   2          case HCI_CMD_INQUIRY_CANCEL:
  835   2            MMI_HCI_InquiryComplete(msgPtr);
  836   2            return; // msgPtr will be put in MMI_HCI_InquiryComplete(), need return to avoid put twice at the end 
             -of this switch case;
  837   2      
  838   2          case HCI_CMD_READ_RSSI:
  839   2            {
  840   3              HCI_CMD_RTN_PARA_RD_RSSI_STRU XDATA_PTR RtnDataPtr = (HCI_CMD_RTN_PARA_RD_RSSI_STRU XDATA_PTR)&msgPtr
             -->msgBodyPtr.hciEvt.cmdCompleteEvt.RtnPara;
  841   3              if(MMI_DETECT_PHONE_IS_TOO_FAR_FEAT)
  842   3              {
  843   4                if(RtnDataPtr->RSSI && RtnDataPtr->RSSI < gMMI_nvram.rssiDefaultBoundry)
  844   4                {
  845   5                  if(ENDIAN_TRANSFORM_U16(*(U16 XDATA_PTR)&RtnDataPtr->HandleB0) == gMMI_ctl.mmiInfo[gMMI_ctl.latestC
             -onnectedLinkInd].linkPara.aclConnHandle)
  846   5                    MMI_PushMediaEvent(MEDIA_EVT_PHONE_IS_TOO_FAR_2);
  847   5                  else
  848   5                    MMI_PushMediaEvent(MEDIA_EVT_PHONE_IS_TOO_FAR_1);       
  849   5                }
  850   4              }
  851   3              #ifdef FAST_CONNECT_DONGLE
                       if((linkIndex = MMI_GetLinkIndexByConnHandle(ENDIAN_TRANSFORM_U16(*(U16 XDATA_PTR)&RtnDataPtr->Handle
             -B0))) != MAX_MULTI_POINT_NO)
                       {
                         MMI_FCD_ReportDevRSSI(RtnDataPtr->RSSI);
                         #ifdef OLED_ENABLE
                         OLED_ConnectionShow(&gMMI_ctl.mmiInfo[linkIndex].bdAddr[0], &gMMI_ctl.mmiInfo[linkIndex].linkPara.re
             -moteName[0], RtnDataPtr->RSSI);
                         #endif
                       }
                       #endif
  860   3            }
  861   2            break;
  862   2          case HCI_VCMD_AIROHA:
  863   2            {
  864   3              HCI_EVT_PARA_CMD_CPL_RTN_VDATA_STRU XDATA_PTR VCmdCplEvtPtr = (HCI_EVT_PARA_CMD_CPL_RTN_VDATA_STRU XD
             -ATA_PTR)&msgPtr->msgBodyPtr.hciEvt.cmdCompleteEvt.RtnPara;
  865   3              
  866   3              if(VCmdCplEvtPtr->vcmdCplEvt.VOpCode.VCmdOgf == HCI_VENDOR_OGF_AUDIO)
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 15  

  867   3              {
  868   4                switch(VCmdCplEvtPtr->vcmdCplEvt.VOpCode.VCmdOcf)
  869   4                {
  870   5                  case HCI_VCMD_OCF_ESCO_NULL_PACKET:
  871   5                    #ifdef AIR_MODULE
  872   5                    MMI_AIR_HCISCONullPktCmdCpl((VCmdCplEvtPtr->scoNullCmdCplEvt.IsEnable)?TRUE:FALSE);
  873   5                    #endif              
  874   5                    break;
  875   5                  case HCI_VCMD_OCF_AUDIO_SWITCH:
  876   5                    linkIndex = MMI_GetLinkIndexByConnHandle(ENDIAN_TRANSFORM_U16(*(U16 XDATA_PTR)&VCmdCplEvtPtr->audi
             -oSwitchCmdCplEvt.ScoHandleB0));
  877   5                    if( linkIndex < MAX_MULTI_POINT_NO && VCmdCplEvtPtr->audioSwitchCmdCplEvt.vcmdCpl.Status == AUDIO_
             -SWITCH_OK)
  878   5                    {
  879   6                      gMMI_ctl.driverCtl.audioSwitchHandler = ENDIAN_TRANSFORM_U16(*(U16 XDATA_PTR)&VCmdCplEvtPtr->audi
             -oSwitchCmdCplEvt.ScoHandleB0);
  880   6                      gMMI_ctl.driverCtl.audioSwitchState = MMI_AUDIO_SWITCH_ILDE;
  881   6                    }
  882   5                    else
  883   5                    {
  884   6                      gMMI_ctl.driverCtl.audioSwitchHandler = MMI_EOF_HANDLER;
  885   6                      if(gMMI_ctl.driverCtl.audioSwitchState == MMI_AUDIO_SWITCH_WAITING_HCI_EVT)
  886   6                        gMMI_ctl.driverCtl.audioSwitchState = MMI_AUDIO_SWITCH_ERROR;             
  887   6                    }
  888   5                    break;
  889   5                  case HCI_VCMD_OCF_SETUP_QOS:
  890   5                    //if((linkIndex = MMI_GetLinkIndexByConnHandle(ENDIAN_TRANSFORM_U16(*(U16 XDATA_PTR)&VCmdCplEvtPtr
             -->setupQosCmdCplEvt.ConnHdlB0))) != MAX_MULTI_POINT_NO)
  891   5                    {
  892   6                      LightDbgPrint("recv airoha qos response");
  893   6                      MMI_HCI_ClearCmdState(HCI_VCMD_AIROHA, 0 /*link index is don't care */, HCI_VENDOR_OGF_AUDIO, HCI
             -_VCMD_OCF_SETUP_QOS);
  894   6                    }
  895   5                    break;
  896   5                }
  897   4              }
  898   3            }
  899   2            break;
  900   2        }
  901   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
  902   1      }
  903          
  904          PRIVATE void MMI_HCI_ConnectionComplete(MMIMsgType XDATA_PTR msgPtr)
  905          {
  906   1        //After HCI_CMD_ADD_SCO process is done,
  907   1        //HCI_EVENT_CONNECTION_COMPLETE would be sent to MMI,
  908   1        //not HCI_EVENT_SCO_CONNECTION_COMPLETE.
  909   1        //
  910   1        //Therefore, we should check parameter "LinkType" in event
  911   1        //HCI_EVENT_CONNECTION_COMPLETE first.
  912   1        U8 LDATA connectionState;
  913   1        U8 linkIndex;
  914   1        U16 connHandle = ENDIAN_TRANSFORM_U16(*(U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.connCompleteEvt.ConnHdl
             -B0);
  915   1      
  916   1        if((linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.connCompleteEvt.BdAddr)) 
             -< MAX_MULTI_POINT_NO)
  917   1        {
  918   2          switch(msgPtr->msgBodyPtr.hciEvt.connCompleteEvt.LinkType)
  919   2          {
  920   3            case LINK_TYPE_SCO_CONNECTION_REQUEST:
  921   3            case LINK_TYPE_eSCO_CONNECTION_REQUEST:
  922   3              LightDbgPrint("USR - SCO ConnCpl[%d][%D]:%d",(U8)linkIndex, (U32)connHandle, (U8)msgPtr->msgBodyPtr.h
             -ciEvt.connCompleteEvt.Status);
  923   3      
  924   3              if(msgPtr->msgBodyPtr.hciEvt.connCompleteEvt.Status) // Fail situation
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 16  

  925   3              {
  926   4                MMI_HCI_ScoConnFailHandle(linkIndex);
  927   4                MMI_HCI_ScoConnFailProfileHandle(linkIndex);
  928   4              }
  929   3              else // successful situation
  930   3              {
  931   4                gMMI_ctl.mmiInfo[linkIndex].linkPara.scoConnHandle = connHandle;
  932   4                gMMI_ctl.mmiInfo[linkIndex].linkPara.scoType = msgPtr->msgBodyPtr.hciEvt.connCompleteEvt.LinkType;
  933   4                gMMI_ctl.mmiInfo[linkIndex].linkPara.txInterval = msgPtr->msgBodyPtr.hciEvt.connCompleteEvt.txInterv
             -al;
  934   4                gMMI_ctl.mmiInfo[linkIndex].linkPara.rxPacketLen = ENDIAN_TRANSFORM_U16(msgPtr->msgBodyPtr.hciEvt.co
             -nnCompleteEvt.rxPacketLen);
  935   4                MMI_SendDSPCmd(linkIndex, DSP_DISABLED);
  936   4                MMI_HCI_ScoConnOKHandle(linkIndex);
  937   4                MMI_HCI_ScoConnOKProfileHandle(linkIndex);
  938   4              }
  939   3              break;
  940   3      
  941   3            case LINK_TYPE_ACL_CONNECTION_REQUEST:
  942   3              LightDbgPrint("USR - ACL ConnCpl[%d][%D]:%d",(U8)linkIndex,(U32)connHandle, (U8)msgPtr->msgBodyPtr.hc
             -iEvt.connCompleteEvt.Status);
  943   3      
  944   3              if(msgPtr->msgBodyPtr.hciEvt.connCompleteEvt.Status == STATUS_OK)
  945   3              {
  946   4                gMMI_ctl.mmiInfo[linkIndex].linkPara.aclConnHandle = connHandle;
  947   4                MMI_ADD_LINK(linkIndex);
  948   4                gMMI_ctl.mmiInfo[linkIndex].linkPara.scoCodecType = SCO_CODEC_CVSD; //set default SCO type to CVSD
  949   4                connectionState = MMI_CONN_STATE_ACL_CONNECTED;
  950   4                MMI_HCI_UartSendUnSolicitedIndication(MMI_UART_IND_ACL_LINK_STATUS, &connectionState, linkIndex);
  951   4                
  952   4                L2CAP_SetupLinkInfo(linkIndex, connHandle);
  953   4                
  954   4                if(MMI_CONN_STATE_WAIT_FOR_DETACH == MMI_GetConnectionState(linkIndex))
  955   4                {
  956   5                  MMI_HCI_SendRelAcl(linkIndex);
  957   5                  break;
  958   5                }
  959   4                
  960   4                #if !defined(AIR_UPDATE_DONGLE)         
  961   4                MMI_LinkKey_SetLinkSoundLevelByHistory(linkIndex);
  962   4      
  963   4                
  964   4                #ifdef AIR_MODULE
  965   4                MMI_AIR_ACLConnectedNotify(linkIndex);        
  966   4                #endif
  967   4                
  968   4                if(MMI_CONN_STATE_WAITING_ACTIVE == MMI_GetConnectionState(linkIndex))
  969   4                {
  970   5                  MMI_PageOKHandler(linkIndex);
  971   5                }
  972   4                #endif
  973   4                
  974   4                MMI_SetConnectionState(linkIndex, MMI_CONN_STATE_ACL_CONNECTED);
  975   4      
  976   4                MMI_ConnectableStateChangeWhenConnected();
  977   4      
  978   4                //To speed up connection & disconnection process, we should avoid
  979   4                //sending Sniff_Req to remote AG if ACL is ready but SLC is not.
  980   4                //Slow connection problem appears very often when using smart phone
  981   4                //(e.g. HTC Desire or Wildfire) to connect with our system right after
  982   4                //disconnection of SLC when ACL still exists.
  983   4                MMI_SniffDisable(linkIndex, MMI_SNIFF_ACL_READY_SLC_NOT_YET);
  984   4      
  985   4                MMI_HCI_SendChangeConnectionPacketType (linkIndex, LINK_TYPE_ACL_CONNECTION_REQUEST);
  986   4                if (MMI_ROLE_SWITCH_TO_MASTER_DURING_ACCEPT_CONN_FEAT)
  987   4                {
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 17  

  988   5                  MMI_HCI_WriteLinkPolicySetting(linkIndex, HCI_LINK_POLICY_ENABLE_HOLD_MODE|HCI_LINK_POLICY_ENABLE_S
             -NIFF_MODE);//disable role switch
  989   5                }
  990   4      
  991   4                #ifdef TRSPX_App
                         MMI_TrspX_connectHandle(linkIndex, MMI_TRSPX_CONNECTED_BR_EDR);
                         #endif
  994   4      
  995   4                #ifdef FAST_CONNECT_DONGLE
                         MMI_FCD_ReportDevAddr(&gMMI_ctl.mmiInfo[linkIndex].bdAddr[0]);
                         MMI_HCI_SendReadRemoteName(linkIndex);
                         #endif
  999   4      
 1000   4                #ifdef BLE_AIRApp
 1001   4                MMI_HCI_SendReadRemoteName(linkIndex);
 1002   4                #endif
 1003   4      
 1004   4                #if AB1520B_UPDATE_LINK_HISTORY_PERIODICALLY
                         SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.sysTimer.writeFlashTimer, 20*ONE_SEC);
                         #endif
 1007   4              }
 1008   3              else
 1009   3              {
 1010   4                if (msgPtr->msgBodyPtr.hciEvt.connCompleteEvt.Status == ERR_LMP_ERROR_TRANSACTION_COLLISION )
 1011   4                {
 1012   5                  break;//if only transaction collision, ignore this message;
 1013   5                }
 1014   4                
 1015   4                if(MMI_CONN_STATE_WAITING_ACTIVE == MMI_GetConnectionState(linkIndex))
 1016   4                {
 1017   5                  MMI_PageFailHandler(linkIndex);
 1018   5                  
 1019   5                  if(msgPtr->msgBodyPtr.hciEvt.connCompleteEvt.Status == ERR_ACL_CONNECTION_ALREADY_EXISTS
 1020   5                    || msgPtr->msgBodyPtr.hciEvt.connCompleteEvt.Status == ERR_LMP_RESPONSE_TIMEOUT)
 1021   5                  {
 1022   6                    MMI_Reconnect_SetDelayTimer(ONE_SEC * 23);
 1023   6                  }
 1024   5                }
 1025   4                else if(MMI_CONN_STATE_WAITING_PASS == MMI_GetConnectionState(linkIndex))
 1026   4                {
 1027   5                  if(msgPtr->msgBodyPtr.hciEvt.connCompleteEvt.Status != ERR_ACL_CONNECTION_ALREADY_EXISTS || gMMI_ct
             -l.mmiInfo[linkIndex].linkPara.aclConnHandle != 0)
 1028   5                  {
 1029   6                    #ifdef AIR_MODULE
 1030   6                    MMI_AIR_ACLConnFailPassive(linkIndex);
 1031   6                    #endif
 1032   6                    MMI_ClearMMILinkSettingType(linkIndex);
 1033   6                  }
 1034   5                }
 1035   4                else if(MMI_CONN_STATE_WAIT_FOR_DETACH == MMI_GetConnectionState(linkIndex))
 1036   4                {
 1037   5                  MMI_ClearMMILinkSettingType(linkIndex);
 1038   5                }
 1039   4              }
 1040   3              break;
 1041   3          }
 1042   2        }
 1043   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1044   1      }
 1045          
 1046          PRIVATE void MMI_HCI_SCOConnectionChange(MMIMsgType XDATA_PTR msgPtr)
 1047          {
 1048   1        U8 linkIndex;
 1049   1        
 1050   1        linkIndex = MMI_GetLinkIndexByConnHandle(ENDIAN_TRANSFORM_U16(*(U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt
             -.scoChangeEvt.ConnHdlB0));
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 18  

 1051   1        if(linkIndex != MAX_MULTI_POINT_NO)
 1052   1        {
 1053   2          if(msgPtr->msgBodyPtr.hciEvt.scoChangeEvt.Status) // Fail situation
 1054   2          {
 1055   3      
 1056   3          }
 1057   2          else // successful situation
 1058   2          {
 1059   3            gMMI_ctl.mmiInfo[linkIndex].linkPara.txInterval = msgPtr->msgBodyPtr.hciEvt.scoChangeEvt.txInterval;
 1060   3            gMMI_ctl.mmiInfo[linkIndex].linkPara.rxPacketLen = ENDIAN_TRANSFORM_U16(msgPtr->msgBodyPtr.hciEvt.scoC
             -hangeEvt.rxPacketLen);
 1061   3            #ifdef AIR_MODULE
 1062   3            MMI_AIR_SCOConnectedNotify(linkIndex, FALSE);
 1063   3            #endif
 1064   3          }
 1065   2        }
 1066   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1067   1      }
 1068          
 1069          PRIVATE void MMI_HCI_PinCodeRequest(MMIMsgType XDATA_PTR msgPtr)
 1070          {
 1071   1        msgPtr->dataOffset = CMD_OFFSET;
 1072   1        msgPtr->msgOpcode = HCI_CMD_PIN_CODE_REQUEST_REPLY;
 1073   1        msgPtr->paraLen = 23;
 1074   1        msgPtr->msgBodyPtr.hciCmd.pinCodeReqReplyCmd.PinCodeLen = gMMI_nvram.pinCodeCtl.length;
 1075   1        MMI_ReadNvramDataChunk ((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.pinCodeReqReplyCmd.PinCode, &gMMI_nvram
             -.pinCodeCtl.value[0], gMMI_nvram.pinCodeCtl.length);
 1076   1        MMI_HCI_SendCmd(msgPtr);
 1077   1        MMI_PushMediaEvent(MEDIA_EVT_PINCODE_REQUEST);
 1078   1      }
 1079          
 1080          PRIVATE void MMI_HCI_LinkKeyRequest(MMIMsgType XDATA_PTR msgPtr)
 1081          {
 1082   1        U8 linkIndex;
 1083   1        LinkHistoryType XDATA_PTR linkListPtr;
 1084   1      
 1085   1        linkListPtr = MMI_LinkKey_SearchHistoryByBdAddr((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.linkKeyReqEvt.B
             -dAddr, TRUE, FALSE);
 1086   1        linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.linkKeyReqEvt.BdAddr);
 1087   1        if(linkListPtr == (LinkHistoryType XDATA_PTR)NULL || (linkIndex < MAX_MULTI_POINT_NO && gMMI_ctl.mmiInfo
             -[linkIndex].linkPara.isPairFailed))
 1088   1        {
 1089   2          msgPtr->dataOffset = CMD_OFFSET;
 1090   2          msgPtr->msgOpcode = HCI_CMD_LINK_KEY_REQUEST_NEGATIVE_REPLY;
 1091   2          msgPtr->paraLen = 6;
 1092   2        }
 1093   1        else
 1094   1        {
 1095   2          msgPtr->dataOffset = CMD_OFFSET;
 1096   2          msgPtr->msgOpcode = HCI_CMD_LINK_KEY_REQUEST_REPLY;
 1097   2          msgPtr->paraLen = 22;
 1098   2          OSMEM_memcpy_xdata_xdata ((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.linkKeyReqReplyCmd.LinkKey, (U8 XDAT
             -A_PTR)&linkListPtr->linkData.linkKey[0], 16);
 1099   2        }
 1100   1        if(linkIndex != MAX_MULTI_POINT_NO)
 1101   1        {
 1102   2          MMI_TIMER_ReleaseDetachTimer(linkIndex);
 1103   2        }
 1104   1        MMI_HCI_SendCmd(msgPtr);
 1105   1      }
 1106          
 1107          PRIVATE void MMI_HCI_LinkKeyNotification(MMIMsgType XDATA_PTR msgPtr)
 1108          {
 1109   1        //HCI_EVENT_LINK_KEY_NOTIFICATION indicates a successful pairing.
 1110   1        MMI_HCI_PairingSuccessfulHandle((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.linkKeyNotifyEvt);
 1111   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 19  

 1112   1      }
 1113          
 1114          PRIVATE void MMI_HCI_AuthenticationComplete(MMIMsgType XDATA_PTR msgPtr)
 1115          {
 1116   1        U8 index;
 1117   1      
 1118   1        if((index = MMI_GetLinkIndexByConnHandle( ENDIAN_TRANSFORM_U16(*(U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciEv
             -t.authCompleteEvt.ConnHdlB0) )) < MAX_MULTI_POINT_NO)
 1119   1        {
 1120   2          if(msgPtr->msgBodyPtr.hciEvt.authCompleteEvt.Status == STATUS_OK)
 1121   2          {
 1122   3            gMMI_ctl.mmiInfo[index].linkPara.isAuthenticated = AUTH_OK;
 1123   3          }
 1124   2          else
 1125   2          {
 1126   3            if(msgPtr->msgBodyPtr.hciEvt.authCompleteEvt.Status != ERR_COMMAND_DISALLOWED)
 1127   3            {
 1128   4              gMMI_ctl.mmiInfo[index].linkPara.isAuthenticated = AUTH_ERROR;
 1129   4            }
 1130   3            //Issue 569
 1131   3            MMI_HCI_PairingFailHandle((U8 XDATA_PTR)&gMMI_ctl.mmiInfo[index].bdAddr[0], msgPtr->msgBodyPtr.hciEvt.
             -authCompleteEvt.Status);
 1132   3          }
 1133   2        }
 1134   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1135   1      }
 1136          
 1137          PRIVATE void MMI_HCI_EncryptionChange(MMIMsgType XDATA_PTR msgPtr)
 1138          {
 1139   1        U8 index;
 1140   1      
 1141   1        if((index = MMI_GetLinkIndexByConnHandle( ENDIAN_TRANSFORM_U16(*(U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciEv
             -t.encryptChangeEvt.ConnHdlB0) )) < MAX_MULTI_POINT_NO)
 1142   1        {
 1143   2          if(msgPtr->msgBodyPtr.hciEvt.encryptChangeEvt.Status == STATUS_OK)
 1144   2          {
 1145   3            gMMI_ctl.mmiInfo[index].linkPara.isEncrypted = ENCRYPTED_OK;
 1146   3          }
 1147   2          else if(msgPtr->msgBodyPtr.hciEvt.encryptChangeEvt.Status == ERR_DIFFERENT_TRANSACTION_COLLISION && !gM
             -MI_ctl.mmiInfo[index].linkPara.isEncryptionFailed)
 1148   2          {
 1149   3            //Mantis 10988 & 11005 LM report error code ERR_DIFFERENT_TRANSACTION_COLLISION
 1150   3            //Need to send Connection Encrtyption again
 1151   3            MMI_HCI_SendSetConnectionEncryption(index);
 1152   3            gMMI_ctl.mmiInfo[index].linkPara.isEncryptionFailed = TRUE;
 1153   3          }
 1154   2          else if(msgPtr->msgBodyPtr.hciEvt.encryptChangeEvt.Status != ERR_COMMAND_DISALLOWED)
 1155   2          {
 1156   3            //Do nothing to maintain this substate,
 1157   3            //because ERR_COMMAND_DISALLOWED means that remote
 1158   3            //side will do encryption again.
 1159   3            gMMI_ctl.mmiInfo[index].linkPara.isEncrypted = ENCRYPTED_ERROR;
 1160   3          }
 1161   2      
 1162   2          //Headset project should be returned set encryption on.
 1163   2          if(gMMI_nvram.timerCtl.RefreshEncKeyTimer)
 1164   2          {
 1165   3            SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.connTimer[index].refreshEncKeyTimer, (U32)(gMMI_nvram.timerCtl.Ref
             -reshEncKeyTimer) * ONE_MIN);
 1166   3          }
 1167   2        }
 1168   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1169   1      }
 1170          
 1171          PRIVATE void MMI_HCI_QosSetupComplete(MMIMsgType XDATA_PTR msgPtr)
 1172          {
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 20  

 1173   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1174   1      }
 1175          
 1176          PRIVATE void MMI_HCI_CommandStatus(MMIMsgType XDATA_PTR msgPtr)
 1177          {
 1178   1        switch(msgPtr->msgBodyPtr.hciEvt.cmdStatusEvt.OpCodeB0)
 1179   1        {
 1180   2          case HCI_CMD_CREATE_CONNECTION:
 1181   2            if(msgPtr->msgBodyPtr.hciEvt.cmdStatusEvt.Status != STATUS_OK)
 1182   2            {
 1183   3              MMI_PageFailHandler(MMI_Reconnect_GetPagingLink());
 1184   3            }
 1185   2            break;
 1186   2      
 1187   2          case HCI_CMD_SWITCH_ROLE:
 1188   2            if(msgPtr->msgBodyPtr.hciEvt.cmdStatusEvt.Status != STATUS_OK)
 1189   2            {
 1190   3              MMI_HCI_ClearCmdState(HCI_CMD_SWITCH_ROLE, MMI_EOF, MMI_EOF, MMI_EOF);
 1191   3            }
 1192   2            break;
 1193   2          case HCI_CMD_INQUIRY:
 1194   2            if(gMMI_ctl.inquiryState == INQUIRY_BUSY_SDK)
 1195   2            {
 1196   3              if(api_profile_func[API_GRP_PF_CB_HCI_INQUIRY_CMD_STATUS])
 1197   3              {
 1198   4                ((API_PROFILE_HCI_INQUIRY_CMD_STATUS_FUNC)api_profile_func[API_GRP_PF_CB_HCI_INQUIRY_CMD_STATUS])(ms
             -gPtr->msgBodyPtr.hciEvt.cmdStatusEvt.Status);
 1199   4              }
 1200   3            }
 1201   2            else if(gMMI_ctl.inquiryState == INQUIRY_BUSY_NDK)
 1202   2            {
 1203   3              MMI_HCI_SetInquiryOnGoing((msgPtr->msgBodyPtr.hciEvt.cmdStatusEvt.Status != STATUS_OK) ? INQUIRY_IDLE
             - : INQUIRY_OK_NDK);
 1204   3            }
 1205   2            break;
 1206   2        }
 1207   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1208   1      }
 1209          
 1210          PRIVATE void MMI_HCI_InquiryResult(MMIMsgType XDATA_PTR msgPtr)
 1211          {
 1212   1        if(gMMI_ctl.inquiryState == INQUIRY_BUSY_SDK || gMMI_ctl.inquiryState == INQUIRY_OK_SDK)
 1213   1        {
 1214   2          if(api_profile_func[API_GRP_PF_CB_HCI_INQUIRY_RESULT_EVT])
 1215   2          {
 1216   3            ((API_PROFILE_HCI_INQ_RESULT_EVT_FUNC)api_profile_func[API_GRP_PF_CB_HCI_INQUIRY_RESULT_EVT])((U8 XDAT
             -A_PTR)&msgPtr->msgBodyPtr.hciEvt.inqResultEvt);
 1217   3          }
 1218   2        }
 1219   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1220   1      }
 1221          
 1222          PRIVATE void MMI_HCI_InquiryResultwithRSSI(MMIMsgType XDATA_PTR msgPtr)
 1223          {
 1224   1        if(gMMI_ctl.inquiryState == INQUIRY_BUSY_SDK || gMMI_ctl.inquiryState == INQUIRY_OK_SDK)
 1225   1        {
 1226   2          if(api_profile_func[API_GRP_PF_CB_HCI_INQUIRY_RESULT_RSSI_EVT])
 1227   2          {
 1228   3            ((API_PROFILE_HCI_INQ_RESULT_RSSI_EVT_FUNC)api_profile_func[API_GRP_PF_CB_HCI_INQUIRY_RESULT_RSSI_EVT]
             -)((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.inqResultWithRSSIEvt);
 1229   3          }
 1230   2        }
 1231   1        else
 1232   1        {
 1233   2          #ifdef AIR_MODULE
 1234   2          U8 i, numResponse = msgPtr->msgBodyPtr.hciEvt.inqResultWithRSSIEvt.NumRsp;
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 21  

 1235   2          for(i = 0; i < numResponse; i++)
 1236   2          {
 1237   3            MMI_AIR_GetInquiryResultWithRSSI(*((U8 XDATA_PTR)(&msgPtr->msgBodyPtr.hciEvt.inqResultWithRSSIEvt.BdAd
             -dr + numResponse * (sizeof(BD_ADDR)+ 7) + i)),
 1238   3                            (U8 XDATA_PTR)(&msgPtr->msgBodyPtr.hciEvt.inqResultWithRSSIEvt.BdAddr + (i * sizeof(BD_ADDR)))
             -,
 1239   3                            (U8 XDATA_PTR)(&msgPtr->msgBodyPtr.hciEvt.inqResultWithRSSIEvt.BdAddr + numResponse * (sizeof(
             -BD_ADDR)+ 2)+ i * 3));
 1240   3          }
 1241   2          MMI_AIR_DecideStopInquiry();
 1242   2          #endif
 1243   2          #ifdef FAST_CONNECT_DONGLE
                   U8 i, numResponse = msgPtr->msgBodyPtr.hciEvt.inqResultWithRSSIEvt.NumRsp;
                   for(i = 0; i < numResponse; i++)
                   {
                     MMI_FCD_GetInquiryResultWithRSSI(*((U8 XDATA_PTR)(&msgPtr->msgBodyPtr.hciEvt.inqResultWithRSSIEvt.BdAd
             -dr + numResponse * (sizeof(BD_ADDR)+ 7) + i)),
                                     (U8 XDATA_PTR)(&msgPtr->msgBodyPtr.hciEvt.inqResultWithRSSIEvt.BdAddr + (i * sizeof(BD_ADDR)))
             -,
                                     (U8 XDATA_PTR)(&msgPtr->msgBodyPtr.hciEvt.inqResultWithRSSIEvt.BdAddr + numResponse * (sizeof(
             -BD_ADDR)+ 2)+ i * 3));
                   }
                   #endif
 1252   2          #ifdef MMI_INQUIRY_CMD
                     MMI_INQ_GetInquiryResultWithRSSI((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.inqResultWithRSSIEvt);
                   #endif
 1255   2          #ifdef DBG_UART_ENABLE_MMI
                     LightDbgPrint("MMI-InqResWithRSSI");
                   #endif
 1258   2        }
 1259   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1260   1      }
 1261          
 1262          PRIVATE void MMI_HCI_ExtendedInquiryResult(MMIMsgType XDATA_PTR msgPtr)
 1263          {
 1264   1        if(gMMI_ctl.inquiryState == INQUIRY_BUSY_SDK || gMMI_ctl.inquiryState == INQUIRY_OK_SDK)
 1265   1        {
 1266   2          if(api_profile_func[API_GRP_PF_CB_HCI_EXT_INQUIRY_RESULT_EVT])
 1267   2          {
 1268   3            ((API_PROFILE_HCI_EXT_INQ_RESULT_EVT_FUNC)api_profile_func[API_GRP_PF_CB_HCI_EXT_INQUIRY_RESULT_EVT])(
             -(U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.extInquiryResultEvt);
 1269   3          } 
 1270   2        }
 1271   1        else
 1272   1        {
 1273   2          #ifdef AIR_MODULE
 1274   2          MMI_AIR_GetInquiryResultWithRSSI(msgPtr->msgBodyPtr.hciEvt.extInquiryResultEvt.Rssi,
 1275   2                          (U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.extInquiryResultEvt.BdAddr,
 1276   2                          (U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.extInquiryResultEvt.ClassOfDevice[0]);
 1277   2          MMI_AIR_DecideStopInquiry();
 1278   2          #endif
 1279   2          #ifdef FAST_CONNECT_DONGLE
                   MMI_FCD_GetInquiryResultWithRSSI(msgPtr->msgBodyPtr.hciEvt.extInquiryResultEvt.Rssi,
                                   (U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.extInquiryResultEvt.BdAddr,
                                   (U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.extInquiryResultEvt.ClassOfDevice[0]);
                   #endif
 1284   2          #ifdef MMI_INQUIRY_CMD
                     MMI_INQ_GetExtendedInquiryResult((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.extInquiryResultEvt);
                   #endif
 1287   2        }
 1288   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1289   1      }
 1290          
 1291          PRIVATE void MMI_HCI_InquiryComplete(MMIMsgType XDATA_PTR msgPtr)
 1292          {
 1293   1        if(gMMI_ctl.inquiryState == INQUIRY_BUSY_SDK ||  gMMI_ctl.inquiryState == INQUIRY_OK_SDK)
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 22  

 1294   1        {
 1295   2          if(msgPtr->eventCode == HCI_EVENT_INQUIRY_COMPLETE)
 1296   2          {
 1297   3            if(api_profile_func[API_GRP_PF_CB_HCI_INQUIRY_CPL_EVT])
 1298   3            {
 1299   4              ((API_PROFILE_HCI_INQUIRY_CPL_EVT_FUNC)api_profile_func[API_GRP_PF_CB_HCI_INQUIRY_CPL_EVT])(msgPtr->m
             -sgBodyPtr.hciEvt.inqCompleteEvt.Status);
 1300   4            }
 1301   3          }
 1302   2          else
 1303   2          {
 1304   3            if(api_profile_func[API_GRP_PF_CB_HCI_INQ_CANCEL_CMD_CPL_EVT])
 1305   3            {
 1306   4              ((API_PROFILE_HCI_INQ_CANCEL_CMD_CPL_EVT_FUNC)api_profile_func[API_GRP_PF_CB_HCI_INQ_CANCEL_CMD_CPL_E
             -VT])(msgPtr->msgBodyPtr.hciEvt.cmdCompleteEvt.RtnPara[0]);
 1307   4            }   
 1308   3          }
 1309   2        }
 1310   1        else
 1311   1        {
 1312   2          MMI_HCI_SetInquiryOnGoing(INQUIRY_IDLE);
 1313   2          #ifdef AIR_MODULE
 1314   2          MMI_AIR_GetInquiryComplete();
 1315   2          #endif
 1316   2          #ifdef FAST_CONNECT_DONGLE
                   MMI_FCD_GetInquiryComplete();
                   #endif
 1319   2          #ifdef MMI_INQUIRY_CMD
                   MMI_INQ_GetInquiryComplete();
                   #endif
 1322   2        }
 1323   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1324   1      }
 1325          
 1326          PRIVATE void MMI_HCI_ModeChange(MMIMsgType XDATA_PTR msgPtr)
 1327          {
 1328   1        U8 linkIndex = MMI_GetLinkIndexByConnHandle(ENDIAN_TRANSFORM_U16(*(U16 XDATA_PTR)&msgPtr->msgBodyPtr.hci
             -Evt.modeChangeEvt.ConnHdlB0));
 1329   1        if(linkIndex < MAX_MULTI_POINT_NO)
 1330   1        {
 1331   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.mode = msgPtr->msgBodyPtr.hciEvt.modeChangeEvt.CurrentMode;
 1332   2          if(msgPtr->msgBodyPtr.hciEvt.modeChangeEvt.Status == NO_ERROR)
 1333   2          {
 1334   3            switch(gMMI_ctl.mmiInfo[linkIndex].linkPara.mode)
 1335   3            {
 1336   4              case MODE_SNIFF:
 1337   4                gMMI_ctl.mmiInfo[linkIndex].linkPara.sniffInterval = ENDIAN_TRANSFORM_U16(msgPtr->msgBodyPtr.hciEvt.
             -modeChangeEvt.Interval);
 1338   4                MMI_PowerSaving(TRUE, MMI_PWRSAVING_EXIT_SNIFF, linkIndex);
 1339   4                SYS_ReleaseTimer(&gMMI_ctl.mmiTimerInfo.connTimer[linkIndex].sniffTimerPtr);
 1340   4      
 1341   4                if(MMI_IsSniffAllowed(linkIndex))
 1342   4                {
 1343   5                  MMI_PowerSaving(TRUE, MMI_SNIFF_DISABLE, linkIndex);
 1344   5                  SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.connTimer[linkIndex].checkRemoteAGAcceptEnterSniffTimer,(U32)gM
             -MI_nvram.timerCtl.CheckRemoteAGAcceptEnterSniffTimer * ONE_SEC);
 1345   5                }
 1346   4                else
 1347   4                {
 1348   5                  MMI_HCI_SendExitSniffMode(linkIndex);
 1349   5                }
 1350   4                break;
 1351   4              case MODE_ACTIVE:
 1352   4                gMMI_ctl.mmiInfo[linkIndex].linkPara.sniffInterval = 0;
 1353   4                MMI_PowerSaving(FALSE, MMI_PWRSAVING_EXIT_SNIFF, linkIndex);
 1354   4      
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 23  

 1355   4                if(MMI_IsSniffAllowed(linkIndex))
 1356   4                {
 1357   5                  if (gMMI_ctl.mmiInfo[linkIndex].linkPara.sniffTryCnt <= gMMI_nvram.retrySniffCnt)
 1358   5                  {
 1359   6                    if (gMMI_ctl.mmiTimerInfo.connTimer[linkIndex].checkRemoteAGAcceptEnterSniffTimer)
 1360   6                    {
 1361   7                      gMMI_ctl.mmiInfo[linkIndex].linkPara.sniffTryCnt++; //remote hope to keep active
 1362   7                    }
 1363   6                    SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.connTimer[linkIndex].sniffTimerPtr,(U32)gMMI_nvram.timerCtl.Sn
             -iffTimer*64L);
 1364   6                  }
 1365   5                }
 1366   4                else
 1367   4                {
 1368   5                  gMMI_ctl.mmiInfo[linkIndex].linkPara.sniffTryCnt = 0;
 1369   5                }
 1370   4                break;
 1371   4              default:
 1372   4                break;
 1373   4            }
 1374   3          }
 1375   2          else
 1376   2          {
 1377   3            if(MMI_IsSniffAllowed(linkIndex))
 1378   3            {
 1379   4              SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.connTimer[linkIndex].sniffTimerPtr,(U32)gMMI_nvram.timerCtl.Sniff
             -Timer*64L);
 1380   4            }
 1381   3          }
 1382   2        }
 1383   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1384   1      }
 1385          
 1386          PRIVATE void MMI_HCI_IOCapabilityRequest(MMIMsgType XDATA_PTR msgPtr)
 1387          {
 1388   1      #ifdef SUPPORT_SIMPLE_PAIRING
 1389   1        U8 linkIndex;
 1390   1        if((linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.ioCapReqEvt.BdAddr)) < MA
             -X_MULTI_POINT_NO)
 1391   1        {
 1392   2          msgPtr->dataOffset = CMD_OFFSET;
 1393   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_IO_CAPABILITY_REQ_REPLY_STRU);
 1394   2          msgPtr->msgOpcode = HCI_CMD_IO_CAPABILITY_REQUEST_REPLY;
 1395   2          if(gMMI_ctl.mmiInfo[linkIndex].linkPara.isIoCapRespSet)
 1396   2          {
 1397   3            if( gMMI_ctl.mmiInfo[linkIndex].linkPara.remoteIoCap == IO_CAP_PARA_DISPLAY_YES_NO 
 1398   3              && gMMI_ctl.mmiInfo[linkIndex].linkPara.remoteAuthReq == AUTH_REQUIRE_PARA_GENERAL_BOND_IO_CAP
 1399   3              )
 1400   3            {
 1401   4              msgPtr->msgBodyPtr.hciCmd.ioCapReqReplyCmd.IoCapability = gMMI_ctl.mmiInfo[linkIndex].linkPara.remote
             -IoCap;
 1402   4              msgPtr->msgBodyPtr.hciCmd.ioCapReqReplyCmd.OobDataPresent = gMMI_ctl.mmiInfo[linkIndex].linkPara.remo
             -teOobAuthData;
 1403   4              msgPtr->msgBodyPtr.hciCmd.ioCapReqReplyCmd.AuthRequire = gMMI_ctl.mmiInfo[linkIndex].linkPara.remoteA
             -uthReq;      
 1404   4            }
 1405   3            else
 1406   3            {
 1407   4              goto SEND_DEFAULT_IOCAP;
 1408   4            }
 1409   3          }
 1410   2          else
 1411   2          {
 1412   3            SEND_DEFAULT_IOCAP:
 1413   3            msgPtr->msgBodyPtr.hciCmd.ioCapReqReplyCmd.IoCapability = MMI_SIMPLE_PAIRING_PARA.ioCapabilities;
 1414   3            msgPtr->msgBodyPtr.hciCmd.ioCapReqReplyCmd.OobDataPresent = MMI_SIMPLE_PAIRING_PARA.oobAuthData;
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 24  

 1415   3            msgPtr->msgBodyPtr.hciCmd.ioCapReqReplyCmd.AuthRequire = MMI_SIMPLE_PAIRING_PARA.authRequirement;   
 1416   3          }
 1417   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.isIoCapRespSet = FALSE;
 1418   2        }
 1419   1        else
 1420   1        {
 1421   2          msgPtr->dataOffset = CMD_OFFSET;
 1422   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_IO_CAPABILITY_REQ_NEG_REPLY_STRU);
 1423   2          msgPtr->msgOpcode = HCI_CMD_IO_CAPABILITY_REQ_NEGATIVE_REPLY;
 1424   2          msgPtr->msgBodyPtr.hciCmd.ioCapReqNegReplyCmd.Reason = ERR_UNKNOWN_CONNECTION_IDENTIFIER;
 1425   2        }
 1426   1        MMI_HCI_SendCmd(msgPtr);
 1427   1      #else
                 OSMEM_Put((U8 XDATA_PTR)msgPtr);
               #endif
 1430   1      }
 1431          
 1432          PRIVATE void MMI_HCI_IOCapabilityResponse(MMIMsgType XDATA_PTR msgPtr)
 1433          {
 1434   1        U8 linkIndex;
 1435   1        
 1436   1        if((linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.ioCapRespEvt.BdAddr)) < M
             -AX_MULTI_POINT_NO)
 1437   1        {
 1438   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.remoteIoCap = msgPtr->msgBodyPtr.hciEvt.ioCapRespEvt.IOCapability;
 1439   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.remoteOobAuthData = msgPtr->msgBodyPtr.hciEvt.ioCapRespEvt.OOBData
             -Present;
 1440   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.remoteAuthReq = msgPtr->msgBodyPtr.hciEvt.ioCapRespEvt.AuthRequire
             -ments;
 1441   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.isIoCapRespSet = TRUE;
 1442   2        }
 1443   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1444   1      }
 1445          
 1446          PRIVATE void MMI_HCI_UserConfirmationRequest(MMIMsgType XDATA_PTR msgPtr)
 1447          {
 1448   1      #ifdef SUPPORT_SIMPLE_PAIRING
 1449   1        U8 linkIndex;
 1450   1      
 1451   1        MMI_PushMediaEvent(MEDIA_EVT_CONFIRMATION_REQUEST);
 1452   1        if((linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.userConfirmNegReplyCmd.Bd
             -Addr)) < MAX_MULTI_POINT_NO)
 1453   1        {
 1454   2          if(MMI_CONFIRMATION_ACCEPT_REJECT_VIA_KEY)
 1455   2          {
 1456   3            MMI_HCI_UartSendUnSolicitedIndication(MMI_UART_IND_CONFIRMATION_REQUEST, (U8 XDATA_PTR)NULL, linkIndex
             -);
 1457   3            OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1458   3          }
 1459   2          else
 1460   2          {
 1461   3            msgPtr->dataOffset = CMD_OFFSET;
 1462   3            msgPtr->paraLen = 6;
 1463   3            msgPtr->msgOpcode = HCI_CMD_USR_CONFIRMATION_REQ_REPLY;
 1464   3            MMI_HCI_SendCmd(msgPtr);
 1465   3          }
 1466   2        }
 1467   1        else
 1468   1        {
 1469   2          msgPtr->dataOffset = CMD_OFFSET;
 1470   2          msgPtr->paraLen = 6;
 1471   2          msgPtr->msgOpcode = HCI_CMD_USR_CONFIRMATION_REQ_NEGATIVE_REPLY;
 1472   2          MMI_HCI_SendCmd(msgPtr);
 1473   2        }
 1474   1      #else
                 OSMEM_Put((U8 XDATA_PTR)msgPtr);
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 25  

               #endif
 1477   1      }
 1478          
 1479          PRIVATE void MMI_HCI_RoleChange(MMIMsgType XDATA_PTR msgPtr)
 1480          {
 1481   1      #ifdef SUPPORT_SIMPLE_PAIRING
 1482   1        U8 linkIndex;
 1483   1      
 1484   1        if((linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.roleChangeEvt.BdAddr)) < 
             -MAX_MULTI_POINT_NO)
 1485   1        {
 1486   2          MMI_HCI_ClearCmdState(HCI_CMD_SWITCH_ROLE, linkIndex, MMI_EOF, MMI_EOF);
 1487   2          
 1488   2          if(msgPtr->msgBodyPtr.hciEvt.roleChangeEvt.Status == STATUS_OK)
 1489   2          {
 1490   3            MMI_HCI_UpdateRole(linkIndex, (msgPtr->msgBodyPtr.hciEvt.roleChangeEvt.NewRole == HCI_EVT_ROLE_CHANGE_
             -IS_SLAVE)?ROLE_SLAVE:ROLE_MASTER);
 1491   3            if(MMI_IsActiveLink(linkIndex)) //This should be send after connection complete
 1492   3            {
 1493   4              MMI_HCI_SendChangeConnectionPacketType (linkIndex, LINK_TYPE_ACL_CONNECTION_REQUEST);
 1494   4              if(gMMI_ctl.mmiInfo[linkIndex].linkPara.QosServiceType == SERVICE_TYPE_BEST_EFFORT || gMMI_ctl.mmiInf
             -o[linkIndex].linkPara.QosServiceType == SERVICE_TYPE_GUARANTEED) //Do not send Qos if no need (PS Vita)
 1495   4              {
 1496   5                MMI_HCI_SendVCmdAudioQosSetup(linkIndex, gMMI_ctl.mmiInfo[linkIndex].linkPara.QosServiceType, gMMI_c
             -tl.mmiInfo[linkIndex].linkPara.QosFlowStatus, FALSE);
 1497   5              }
 1498   4            }
 1499   3          }
 1500   2          if(api_profile_func[API_GRP_PF_CB_HCI_ROLE_CHANGED_EVT])
 1501   2          {
 1502   3            ((API_PROFILE_HCI_ROLE_CHANGED_EVT_FUNC)api_profile_func[API_GRP_PF_CB_HCI_ROLE_CHANGED_EVT])(linkInde
             -x, msgPtr->msgBodyPtr.hciEvt.roleChangeEvt.Status, (msgPtr->msgBodyPtr.hciEvt.roleChangeEvt.NewRole == HCI_EVT_ROLE_CHAN
             -GE_IS_SLAVE)?ROLE_SLAVE:ROLE_MASTER);
 1503   3          }
 1504   2          #ifdef AIR_MODULE
 1505   2          LightDbgPrint("MMI - Role: %d,%d", (U8)msgPtr->msgBodyPtr.hciEvt.roleChangeEvt.Status, (U8)msgPtr->msgB
             -odyPtr.hciEvt.roleChangeEvt.NewRole);
 1506   2          MMI_AIR_HCIRoleChangeEventNotify(linkIndex, msgPtr->msgBodyPtr.hciEvt.roleChangeEvt.Status, (msgPtr->ms
             -gBodyPtr.hciEvt.roleChangeEvt.NewRole)? TRUE: FALSE);
 1507   2          #endif
 1508   2          if(gMMI_ctl.mmiTimerInfo.connTimer[linkIndex].roleSwitchTimer)
 1509   2          {
 1510   3            SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.connTimer[linkIndex].roleSwitchTimer, 0);
 1511   3          }
 1512   2        }
 1513   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1514   1      #else
                 OSMEM_Put((U8 XDATA_PTR)msgPtr);
               #endif
 1517   1      }
 1518          
 1519          PRIVATE void MMI_HCI_SCOPacketType(MMIMsgType XDATA_PTR msgPtr)
 1520          {
 1521   1      #ifdef SUPPORT_SIMPLE_PAIRING
 1522   1        U8 linkIndex;
 1523   1      
 1524   1        if((linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.scoPktTypeEvt.BdAddr)) < 
             -MAX_MULTI_POINT_NO)
 1525   1        {
 1526   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.scoPktType = msgPtr->msgBodyPtr.hciEvt.scoPktTypeEvt.PacketType;
 1527   2        }
 1528   1      #endif
 1529   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1530   1      }
 1531          
 1532          PUBLIC void MMI_HCI_SendToolCommandResponse(U8 ocf, U8 resultCode)
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 26  

 1533          {
 1534   1        MMIMsgType XDATA_PTR msgPtr;
 1535   1        if(msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA_TO_UART))
 1536   1        {
 1537   2          msgPtr->paraLen = sizeof(HCI_VCMD_OPCODE_STRU) + sizeof(HCI_VCMD_PARA_AIR_CMD_RESP);
 1538   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = ocf;
 1539   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_UART_TOOL_CMD;
 1540   2          msgPtr->msgBodyPtr.hciVCmd.VPara.respVEvtCmd.resultCode = resultCode;
 1541   2          MMI_HCI_SendCmd(msgPtr);
 1542   2        }
 1543   1      }
 1544          
 1545          PUBLIC void MMI_HCI_SendToolCommandResponseWithData(U8 ocf, U8 resultCode, U16 reportADCvalue)
 1546          {
 1547   1        MMIMsgType XDATA_PTR msgPtr;
 1548   1        if(msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA_TO_UART))
 1549   1        {
 1550   2          msgPtr->paraLen = sizeof(HCI_VCMD_OPCODE_STRU) + sizeof(HCI_VCMD_PARA_AIR_CMD_RESP_DATA);
 1551   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = ocf;
 1552   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_UART_TOOL_CMD;
 1553   2          msgPtr->msgBodyPtr.hciVCmd.VPara.respVEvtCmdData.resultCode = resultCode;
 1554   2          msgPtr->msgBodyPtr.hciVCmd.VPara.respVEvtCmdData.ResDataLow=(U8)reportADCvalue;
 1555   2          msgPtr->msgBodyPtr.hciVCmd.VPara.respVEvtCmdData.ResDataHigh=(U8)(reportADCvalue>>8);
 1556   2          MMI_HCI_SendCmd(msgPtr);
 1557   2        }
 1558   1      }
 1559          
 1560          PUBLIC void MMI_HCI_ToolDSPRefGainCmdResponse(U8 ocf, U8 resultCode)
 1561          {
 1562   1        MMIMsgType XDATA_PTR msgPtr;
 1563   1      
 1564   1        if (resultCode == HCI_VEVT_OCF_RESULT_CODE_SUCCESS)
 1565   1        {
 1566   2          if (msgPtr=MMI_GetCommandMessageMem(HCI_VCMD_AIROHA_TO_UART) )
 1567   2          {
 1568   3            msgPtr->paraLen=sizeof(HCI_VCMD_OPCODE_STRU)+sizeof(HCI_VCMD_PARA_AIR_CMD_RESP_DSP_DATA);
 1569   3            msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = ocf;
 1570   3            msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_UART_TOOL_CMD;
 1571   3            msgPtr->msgBodyPtr.hciVCmd.VPara.respVEvtCmdDSPData.resultCode = resultCode;
 1572   3            // Respond DSP data
 1573   3            msgPtr->msgBodyPtr.hciVCmd.VPara.respVEvtCmdDSPData.CH1_REF_GAIN =  gAlignDSP.Mailbox.d2m_ctl.evt_word
             -.para.dsp_report_para.ref_gain_para.CH1_REF_GAIN;
 1574   3            msgPtr->msgBodyPtr.hciVCmd.VPara.respVEvtCmdDSPData.CH2_REF_GAIN =  gAlignDSP.Mailbox.d2m_ctl.evt_word
             -.para.dsp_report_para.ref_gain_para.CH2_REF_GAIN;
 1575   3            msgPtr->msgBodyPtr.hciVCmd.VPara.respVEvtCmdDSPData.CH3_REF_GAIN =  gAlignDSP.Mailbox.d2m_ctl.evt_word
             -.para.dsp_report_para.ref_gain_para.CH3_REF_GAIN;
 1576   3            msgPtr->msgBodyPtr.hciVCmd.VPara.respVEvtCmdDSPData.CH4_REF_GAIN =  gAlignDSP.Mailbox.d2m_ctl.evt_word
             -.para.dsp_report_para.ref_gain_para.CH4_REF_GAIN;
 1577   3            msgPtr->msgBodyPtr.hciVCmd.VPara.respVEvtCmdDSPData.CH1_REF2_GAIN = gAlignDSP.Mailbox.d2m_ctl.evt_word
             -.para.dsp_report_para.ref_gain_para.CH1_REF2_GAIN;
 1578   3            msgPtr->msgBodyPtr.hciVCmd.VPara.respVEvtCmdDSPData.CH2_REF2_GAIN = gAlignDSP.Mailbox.d2m_ctl.evt_word
             -.para.dsp_report_para.ref_gain_para.CH2_REF2_GAIN;
 1579   3            msgPtr->msgBodyPtr.hciVCmd.VPara.respVEvtCmdDSPData.CH3_REF2_GAIN = gAlignDSP.Mailbox.d2m_ctl.evt_word
             -.para.dsp_report_para.ref_gain_para.CH3_REF2_GAIN;
 1580   3            msgPtr->msgBodyPtr.hciVCmd.VPara.respVEvtCmdDSPData.CH4_REF2_GAIN = gAlignDSP.Mailbox.d2m_ctl.evt_word
             -.para.dsp_report_para.ref_gain_para.CH4_REF2_GAIN;
 1581   3            
 1582   3            MMI_HCI_SendCmd(msgPtr);    
 1583   3          }
 1584   2        }
 1585   1        /*
 1586   1        else
 1587   1        {
 1588   1          if (msgPtr=MMI_GetCommandMessageMem(HCI_VCMD_AIROHA_TO_UART) )
 1589   1          {
 1590   1            msgPtr->paralen=sizeof(HCI_VCMD_OPCODE_STRU)+sizeof(HCI_VCMD_PARA_AIR_CMD_RESP);
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 27  

 1591   1            msgPtr->msgBodyPtr.hciVCmdDSPData.VOpCode.VCmdOcf = ocf;
 1592   1            msgPtr->msgBodyPtr.hciVCmdDSPData.VOpCode.VCmdOgf = HCI_VENDOR_OGF_UART_TOOL_CMD;
 1593   1            msgPtr->msgBodyPtr.hciVCmdDSPData.VParaDSPData.respVEvtCmdDSPData.resultCode = resultCode;
 1594   1      
 1595   1            MMI_HCI_SendCmd(msgPtr);    
 1596   1          }
 1597   1        }
 1598   1        */
 1599   1      }
 1600          
 1601          PUBLIC void MMI_Tool_DSPSuspended_Event(void)
 1602          {
 1603   1        MMI_HCI_SendToolCommandResponse(HCI_VCMD_OCF_TOOL_SUSPEND_DSP, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 1604   1      }
 1605          
 1606          PRIVATE void MMI_HCI_ToolCmd_EnableAudioBIST()
 1607          {
 1608   1        U8 misc = gMMI_DRV_ctl.isMiscEnabled;
 1609   1        
 1610   1        gMMI_DRV_ctl.isMiscEnabled |= IS_LED_DISABLED;
 1611   1        if(gMMI_DRV_ctl.isMiscEnabled != misc)
 1612   1          DRIVER_Cmd_LED_Restart(DRIVER_CMD_LED_RESTART_PARA_FG_AND_BG);
 1613   1        
 1614   1        gMMI_DRV_ctl.isMiscEnabled |= IS_VP_DISABLED;
 1615   1        MMI_DRV_SetButtonLock(TRUE);
 1616   1        HC_DisableLightDbgPrint();
 1617   1      }
 1618          
 1619          PRIVATE void MMI_HCI_ToolCommand(MMIMsgType XDATA_PTR msgPtr)
 1620          {
 1621   1        switch(msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf)
 1622   1        {
 1623   2          case HCI_VCMD_OCF_TOOL_STOP_VP:
 1624   2            MMI_DRV_SendVoicepromptStopCmd();
 1625   2            MMI_DRV_SendRingtoneStopCmd();
 1626   2            gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled |=  (IS_VP_DISABLED|IS_RINGTONE_DISABLED);
 1627   2            gMMI_DRV_ctl.isMiscEnabled |= IS_VP_DISABLED;
 1628   2            MMI_HCI_SendToolCommandResponse(HCI_VCMD_OCF_TOOL_STOP_VP, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 1629   2            break;
 1630   2          case HCI_VCMD_OCF_TOOL_SUSPEND_DSP:
 1631   2            MMI_DRV_SuspendDSP(DRV_SUSPEND_DSP_REASON_TOOL, MMI_Tool_DSPSuspended_Event);
 1632   2            break;
 1633   2          case HCI_VCMD_OCF_TOOL_RESUME_DSP:
 1634   2            MMI_DRV_ResumeDSP(DRV_SUSPEND_DSP_REASON_TOOL);
 1635   2            MMI_HCI_SendToolCommandResponse(HCI_VCMD_OCF_TOOL_RESUME_DSP, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 1636   2            break;
 1637   2          case HCI_VCMD_OCF_TOOL_DISABLE_LIGHT_DBG_PRINT:
 1638   2            HC_DisableLightDbgPrint();
 1639   2            MMI_HCI_SendToolCommandResponse(HCI_VCMD_OCF_TOOL_DISABLE_LIGHT_DBG_PRINT, HCI_VEVT_OCF_RESULT_CODE_SU
             -CCESS);
 1640   2            break;
 1641   2          case HCI_VCMD_OCF_TOOL_ENABLE_LIGHT_DBG_PRINT:
 1642   2            HC_EnableLightDbgPrint();
 1643   2            MMI_HCI_SendToolCommandResponse(HCI_VCMD_OCF_TOOL_ENABLE_LIGHT_DBG_PRINT, HCI_VEVT_OCF_RESULT_CODE_SUC
             -CESS);
 1644   2            break;
 1645   2          case HCI_VCMD_OCF_TOOL_GET_ADC_DATA:
 1646   2            MMI_DRV_ADCRealTimeReading(msgPtr->msgBodyPtr.hciVCmd.VPara.AdcChannel);
 1647   2            break;
 1648   2          case HCI_VCMD_OCF_TOOL_GET_DSP_REF_GAIN:
 1649   2            MMI_DRV_DSPRefGainCmd();      
 1650   2            break;
 1651   2          case HCI_VCMD_OCF_TOOL_ENTER_MP_STATE:
 1652   2            MMI_DRV_EnterMPStateCmd();
 1653   2            break;
 1654   2          case HCI_VCMD_OCF_TOOL_SET_VOL_GAIN:
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 28  

 1655   2            MMI_DRV_ToolSetVolGain(&msgPtr->msgBodyPtr.hciVCmd.VPara.getVolCmd);
 1656   2            MMI_HCI_SendToolCommandResponse(HCI_VCMD_OCF_TOOL_SET_VOL_GAIN, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 1657   2            break;
 1658   2          case HCI_VCMD_OCF_TOOL_SET_CURRENT_GAIN:
 1659   2            MMI_DRV_ToolSetCurrentGain(&msgPtr->msgBodyPtr.hciVCmd.VPara.setCurrGainCmd);
 1660   2            MMI_HCI_SendToolCommandResponse(HCI_VCMD_OCF_TOOL_SET_CURRENT_GAIN, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 1661   2            break;
 1662   2          case HCI_VCMD_OCF_TOOL_AUDIO_BIST:
 1663   2            MMI_HCI_ToolCmd_EnableAudioBIST();
 1664   2            MMI_HCI_SendToolCommandResponse(HCI_VCMD_OCF_TOOL_AUDIO_BIST, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 1665   2            break;
 1666   2          case HCI_VCMD_OCF_TOOL_NTC_RATIO_VALUE_REPORT:
 1667   2            MMI_DRV_NTCValueReport();
 1668   2            break;
 1669   2          #ifdef PEQ_ENABLE
 1670   2          case HCI_VCMD_OCF_TOOL_SET_REALTIME_PEQ_HPF:
 1671   2            MMI_DRV_RealTimeSetPeqHpf(msgPtr);
 1672   2            MMI_HCI_SendToolCommandResponse(HCI_VCMD_OCF_TOOL_SET_REALTIME_PEQ_HPF, HCI_VEVT_OCF_RESULT_CODE_SUCCE
             -SS);
 1673   2            return;
 1674   2          #endif
 1675   2          default:
 1676   2            MMI_HCI_SendToolCommandResponse(HCI_VCMD_OCF_TOOL_RESUME_DSP, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 1677   2            break;
 1678   2        }
 1679   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1680   1      }
 1681          
 1682          PRIVATE void MMI_HCI_GeneralV2CmdCpl(MMIMsgType XDATA_PTR msgPtr)
 1683          {
 1684   1        if(msgPtr->msgBodyPtr.hciVEvt.VOpCode.VCmdOcf == HCI_VEVT_OCF_COMMAND_COMPLETE_V2)
 1685   1        {
 1686   2          if(msgPtr->msgBodyPtr.hciVEvt.VPara.vCmdCplPara.vOcf == HCI_VCMD_OCF_GENERAL_WRITE_BD_ADDR && msgPtr->m
             -sgBodyPtr.hciVEvt.VPara.vCmdCplPara.vOgf == HCI_VENDOR_OGF_GENERAL_V2)
 1687   2          {
 1688   3            if(msgPtr->msgBodyPtr.hciVEvt.VPara.vCmdCplPara.status == HCI_ERRCODE_SUCCESS)
 1689   3            {
 1690   4              LightDbgPrint("==WriteBdaddr OK!!!");
 1691   4              MMI_HCI_ClearCmdState(HCI_VCMD_AIROHA, MMI_EOF, HCI_VENDOR_OGF_GENERAL_V2, HCI_VCMD_OCF_GENERAL_WRITE
             -_BD_ADDR);
 1692   4              #ifdef AIR_MODULE
 1693   4              MMI_AIR_WriteLocalBdAddrCpl(TRUE);
 1694   4              #endif
 1695   4            }
 1696   3            else
 1697   3            {
 1698   4              LightDbgPrint("==WriteBdaddr Fail!!!");
 1699   4              #ifdef AIR_MODULE
 1700   4              MMI_AIR_WriteLocalBdAddrCpl(FALSE);
 1701   4              #endif
 1702   4              MMI_HCI_ClearCmdState(HCI_VCMD_AIROHA, MMI_EOF, HCI_VENDOR_OGF_GENERAL_V2, HCI_VCMD_OCF_GENERAL_WRITE
             -_BD_ADDR);        
 1703   4            }
 1704   3          }
 1705   2        }
 1706   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1707   1      }
 1708          
 1709          
 1710          PRIVATE void MMI_HCI_AirohaCmd_ReconnectToIndex(MMIMsgType XDATA_PTR msgPtr);
 1711          PRIVATE void MMI_HCI_AirohaCmd_ReadBdAddr(MMIMsgType XDATA_PTR msgPtr);
 1712          PRIVATE void MMI_HCI_AirohaCmd_WriteDeviceName(MMIMsgType XDATA_PTR msgPtr);
 1713          PRIVATE void MMI_HCI_AirohaCmd_QueryLinkHistory(MMIMsgType XDATA_PTR msgPtr);
 1714          PRIVATE void MMI_HCI_AirohaCmd_Connectable(MMIMsgType XDATA_PTR msgPtr);
 1715          PRIVATE void MMI_HCI_AirohaCmd_NoneConnectable(MMIMsgType XDATA_PTR msgPtr);
 1716          PRIVATE void MMI_HCI_AirohaCmd_DisconnectLinkByBdAddr(MMIMsgType XDATA_PTR msgPtr);
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 29  

 1717          PRIVATE void MMI_HCI_AirohaCmd_CheckChargerStatus(MMIMsgType XDATA_PTR msgPtr);
 1718          PRIVATE void MMI_HCI_AirohaCmd_StopVoicePrompt(MMIMsgType XDATA_PTR msgPtr);
 1719          PRIVATE void MMI_HCI_AirohaCmd_PlayVoicePrompt(MMIMsgType XDATA_PTR msgPtr);
 1720          PRIVATE void MMI_HCI_AirohaCmd_QueryServiceIndex(MMIMsgType XDATA_PTR msgPtr);
 1721          PRIVATE void MMI_HCI_AirohaCmd_VolumeSet(MMIMsgType XDATA_PTR msgPtr);
 1722          PRIVATE void MMI_HCI_AirohaCmd_PairingConfirm(MMIMsgType XDATA_PTR msgPtr);
 1723          PRIVATE void MMI_HCI_AirohaCmd_ChangeAudioSel(MMIMsgType XDATA_PTR msgPtr);
 1724          PRIVATE void MMI_HCI_AirohaCmd_SetAVRCPVolume(MMIMsgType XDATA_PTR msgPtr);
 1725          PRIVATE void MMI_HCI_AirohaCmd_HighQualityCodec(MMIMsgType XDATA_PTR msgPtr);
 1726          PRIVATE void MMI_HCI_AirohaCmd_QueryLinkKeyByBdAddr(MMIMsgType XDATA_PTR msgPtr);
 1727          PRIVATE void MMI_HCI_AirohaCmd_I2CRead(MMIMsgType XDATA_PTR msgPtr);
 1728          PRIVATE void MMI_HCI_AirohaCmd_I2CWrite(MMIMsgType XDATA_PTR msgPtr);
 1729          PRIVATE void MMI_HCI_AirohaCmd_GetRemoteName(MMIMsgType XDATA_PTR msgPtr);
 1730          PRIVATE void MMI_HCI_AirohaCmd_GetFWVersion(MMIMsgType XDATA_PTR msgPtr);
 1731          PRIVATE void MMI_HCI_AirohaCmd_DSPFreqSelect(MMIMsgType XDATA_PTR msgPtr);
 1732          PRIVATE void MMI_HCI_AirohaCmd_ProfileSupport(MMIMsgType XDATA_PTR msgPtr);
 1733          PRIVATE void MMI_HCI_AirohaCmd_FindMyAccessory(MMIMsgType XDATA_PTR msgPtr);
 1734          PRIVATE void MMI_HCI_AirohaCmd_Inquiry(MMIMsgType XDATA_PTR msgPtr);
 1735          PRIVATE void MMI_HCI_AirohaCmd_CreateConnection(MMIMsgType XDATA_PTR msgPtr);
 1736          PRIVATE void MMI_HCI_AirohaCmd_UnSupported(MMIMsgType XDATA_PTR msgPtr);
 1737          PRIVATE void MMI_HCI_AirohaCmd_KeyEvent(MMIMsgType XDATA_PTR msgPtr);
 1738          PRIVATE void MMI_HCI_AirohaCmd_SecondKeyEvent(MMIMsgType XDATA_PTR msgPtr);
 1739          
 1740          typedef struct
 1741          {
 1742            void (*airohaCmdFunc)(MMIMsgType XDATA_PTR msgPtr);
 1743          }MmiHciAirohaCmdFuncType;
 1744          
 1745          MmiHciAirohaCmdFuncType CODE uartCmdFunc[UART_CMD_NUM] = 
 1746          {
 1747            MMI_HCI_AirohaCmd_ReconnectToIndex,     //UART_CMD_RECONNECT_TO_INDEX = UART_CMD_START = 0xA0,
 1748            MMI_HCI_AirohaCmd_ReadBdAddr,         //UART_CMD_READ_BD_ADDR,
 1749            MMI_HCI_AirohaCmd_WriteDeviceName,      //UART_CMD_WRITE_DEVICE_NAME,
 1750            MMI_HCI_AirohaCmd_QueryLinkHistory,     //UART_CMD_QUERY_LINK_HISTORY,
 1751            MMI_HCI_AirohaCmd_Connectable,        //UART_CMD_CONNECTABLE,
 1752            MMI_HCI_AirohaCmd_NoneConnectable,      //UART_CMD_NONE_CONNECTABLE,
 1753            MMI_HCI_AirohaCmd_DisconnectLinkByBdAddr, //UART_CMD_DISCONNECT_SPECIFIC_LINK,
 1754            MMI_HCI_AirohaCmd_CheckChargerStatus,   //UART_CMD_CHECK_CHARGER_STATUS,
 1755            MMI_HCI_AirohaCmd_StopVoicePrompt,      //UART_CMD_STOP_VOICEPROMPT,
 1756            MMI_HCI_AirohaCmd_PlayVoicePrompt,      //UART_CMD_PLAY_VOICE_PROMPT,
 1757            MMI_HCI_AirohaCmd_QueryServiceIndex,    //UART_CMD_QUERY_SERVICE_INDEX,
 1758            MMI_HCI_AirohaCmd_VolumeSet,        //UART_CMD_VOLUME_SET,
 1759            MMI_HCI_AirohaCmd_PairingConfirm,     //UART_CMD_PAIRING_CONFIRM,
 1760            MMI_HCI_AirohaCmd_ChangeAudioSel,     //UART_CMD_CHANGE_AUDIO_SEL,
 1761            MMI_HCI_AirohaCmd_SetAVRCPVolume,     //UART_CMD_SET_AVRCP_VOL,
 1762            MMI_HCI_AirohaCmd_HighQualityCodec,     //UART_CMD_HIGH_QUALITY_AUDIO_CODEC,
 1763          
 1764            //0xBX
 1765            MMI_HCI_AirohaCmd_QueryLinkKeyByBdAddr,   //UART_CMD_QUERY_LINKKEY_BY_BDADDR,
 1766            MMI_HCI_AirohaCmd_I2CRead,          //UART_CMD_I2C_READ,
 1767            MMI_HCI_AirohaCmd_I2CWrite,         //UART_CMD_I2C_WRITE,
 1768            MMI_HCI_AirohaCmd_GetRemoteName,      //UART_CMD_GET_REMOTE_NAME,
 1769            MMI_HCI_AirohaCmd_GetFWVersion,       //UART_CMD_GET_FW_VERSION,    
 1770            MMI_HCI_AirohaCmd_DSPFreqSelect,      //UART_CMD_DSP_FREQUENCT_SELECT,
 1771            MMI_HCI_AirohaCmd_ProfileSupport,     //UART_CMD_SET_PROFILE_SUPPORT_STATUS,
 1772            MMI_HCI_AirohaCmd_FindMyAccessory,      //UART_CMD_FIND_MY_ACCESSORY,
 1773            MMI_HCI_AirohaCmd_Inquiry,          //UART_CMD_INQUIRY,
 1774            MMI_HCI_AirohaCmd_CreateConnection,     //UART_CMD_CREATE_CONNECTION,
 1775          };
 1776          
 1777          PRIVATE void MMI_HCI_UARTCommand(MMIMsgType XDATA_PTR msgPtr)
 1778          {
 1779   1        if(msgPtr->msgBodyPtr.hciVEvt.VOpCode.VCmdOcf < KEY_TOTAL_NO)
 1780   1        {
 1781   2          MMI_HCI_AirohaCmd_KeyEvent(msgPtr);
 1782   2        }
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 30  

 1783   1        else if(msgPtr->msgBodyPtr.hciVEvt.VOpCode.VCmdOcf >= UART_CMD_START && msgPtr->msgBodyPtr.hciVEvt.VOpCo
             -de.VCmdOcf < UART_CMD_END)
 1784   1        {
 1785   2          uartCmdFunc[msgPtr->msgBodyPtr.hciVEvt.VOpCode.VCmdOcf-UART_CMD_START].airohaCmdFunc(msgPtr);
 1786   2        }
 1787   1        else
 1788   1        {
 1789   2          MMI_HCI_AirohaCmd_UnSupported(msgPtr);
 1790   2        }
 1791   1        
 1792   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1793   1      }
 1794          
 1795          PRIVATE void MMI_HCI_ExtUARTCommand(MMIMsgType XDATA_PTR msgPtr)
 1796          {
 1797   1        if(msgPtr->msgBodyPtr.hciVEvt.VOpCode.VCmdOcf == HCI_VENDOR_OCF_SECOND_KEY_EVENT_CMD)
 1798   1        {
 1799   2          if(msgPtr->msgBodyPtr.hciVEvt.VPara.extendedPara.OCF >= KEY_SECOND_TABLE_START_INDEX && msgPtr->msgBody
             -Ptr.hciVEvt.VPara.extendedPara.OCF < KEY_SECOND_TABLE_END)
 1800   2          {
 1801   3            MMI_HCI_AirohaCmd_SecondKeyEvent(msgPtr);
 1802   3            OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1803   3            return;
 1804   3          }
 1805   2        }
 1806   1        MMI_HCI_AirohaCmd_ExtSendResponse(msgPtr->msgBodyPtr.hciVEvt.VOpCode.VCmdOcf, msgPtr->msgBodyPtr.hciVEvt
             -.VPara.extendedPara.OCF, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 1807   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1808   1      }
 1809          
 1810          PUBLIC void MMI_HCI_SendSPPCmdResponse(U8 cmdOpcode, U8 resultCode)
 1811          {
 1812   1        MMIMsgType XDATA_PTR msgPtr;
 1813   1        msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA_TO_UART);
 1814   1        if(msgPtr)
 1815   1        {
 1816   2          msgPtr->paraLen = 3;
 1817   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = cmdOpcode;
 1818   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_UART_SPP;
 1819   2          msgPtr->msgBodyPtr.hciVCmd.VPara.respVEvtCmd.resultCode = resultCode;
 1820   2          MMI_HCI_SendCmd(msgPtr);
 1821   2        }
 1822   1      }
 1823          
 1824          PRIVATE void MMI_HCI_SPPCommand(MMIMsgType XDATA_PTR msgPtr)
 1825          {
 1826   1      #ifdef SPP_Profile
 1827   1        U8 linkIndex;
 1828   1        if (MMI_SPP_DATA_TO_UART_FEAT)
 1829   1        {
 1830   2          if (msgPtr->msgBodyPtr.hciUARTSppData.cmdOpCode == HCI_VEVT_OCF_SPP_TX_DATA_TO_REMOTE_REQ
 1831   2            #ifdef SONGPAL_Profile
                     || msgPtr->msgBodyPtr.hciUARTSppData.cmdOpCode == HCI_VEVT_OCF_SONGPAL_ANDROID_TX_DATA_TO_REMOTE_REQ
                     || msgPtr->msgBodyPtr.hciUARTSppData.cmdOpCode == HCI_VEVT_OCF_SONGPAL_IAP2_TX_DATA_TO_REMOTE_REQ
                     #endif
 1835   2                  #ifdef IAP2_Profile
                           || msgPtr->msgBodyPtr.hciUARTSppData.cmdOpCode == HCI_VEVT_OCF_IAP2_TX_DATA_TO_REMOTE_REQ
                           #endif
 1838   2            )
 1839   2          {
 1840   3            MMI_SwitchEndianBDAddr((U8 XDATA_PTR)msgPtr->msgBodyPtr.hciUARTSppData.bdAddr.member);
 1841   3      
 1842   3            if((linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciUARTSppData.bdAddr)) < MAX_
             -MULTI_POINT_NO)
 1843   3            {
 1844   4              msgPtr->msgOpcode = msgPtr->msgBodyPtr.hciUARTSppData.cmdOpCode;
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 31  

 1845   4              msgPtr->paraLen -= (sizeof(HciUARTSppDataType) - 1);
 1846   4              MMI_SwitchEndianBDAddr((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciUARTSppData.bdAddr.member);
 1847   4      
 1848   4                      #ifdef IAP2_Profile
                               if(msgPtr->msgBodyPtr.hciUARTSppData.cmdOpCode == HCI_VEVT_OCF_IAP2_TX_DATA_TO_REMOTE_REQ
             -)
                               {
                         IAP2_SendExtASessionFromUART(linkIndex, (U8 XDATA_PTR)msgPtr);
                               }
                               else
                               #endif
 1855   4                      {
 1856   5                          OSMQ_Put(OSMQ_SPP_Command_From_MMI_ptr[linkIndex], (U8 XDATA_PTR)msgPtr);
 1857   5                      }
 1858   4      
 1859   4              MMI_HCI_SendSPPCmdResponse((U8)(msgPtr->msgBodyPtr.hciUARTSppData.cmdOpCode + HCI_VEVT_OCF_SPP_TX_DAT
             -A_TO_REMOTE_RSP - HCI_VEVT_OCF_SPP_TX_DATA_TO_REMOTE_REQ),
 1860   4                            HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 1861   4              MMI_SniffDisable(linkIndex, MMI_SNIFF_SPP);
 1862   4              return;
 1863   4            }
 1864   3            else
 1865   3            {
 1866   4              MMI_HCI_SendSPPCmdResponse((U8)(msgPtr->msgBodyPtr.hciUARTSppData.cmdOpCode + HCI_VEVT_OCF_SPP_TX_DAT
             -A_TO_REMOTE_RSP - HCI_VEVT_OCF_SPP_TX_DATA_TO_REMOTE_REQ),
 1867   4                            HCI_VEVT_OCF_RESULT_CODE_FAIL);
 1868   4            }
 1869   3          }
 1870   2        }
 1871   1      #endif
 1872   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 1873   1      }
 1874          
 1875          #ifdef TRSPX_App
               PRIVATE void MMI_HCI_SendKeypressNtf(MMIMsgType XDATA_PTR msgPtr)
               {
                 msgPtr->dataOffset = CMD_OFFSET;
                 msgPtr->msgOpcode = HCI_CMD_SEND_KEYPRESS_NOTIFICATION;
                 msgPtr->paraLen = 7;
                   OSMEM_memcpy_xdata_xdata(msgPtr->msgBodyPtr.hciSendPresskeyNtfCmd.bdAddr.member, msgPtr->msgBodyPtr.h
             -ciUARTTrspXData.bdAddr.member, sizeof(BD_ADDR));
                   msgPtr->msgBodyPtr.hciSendPresskeyNtfCmd.ntfType = msgPtr->msgBodyPtr.hciUARTTrspXData.para.pkRsp.ntf
             -Type;
               
                 MMI_HCI_SendCmd(msgPtr);
               }
               
               PRIVATE void MMI_HCI_PasskeyReply(U8 linkIndex, MMIMsgType XDATA_PTR msgPtr)
               {
                   MMIMsgType XDATA_PTR hciPtr;
               
                   if (((hciPtr = (MMIMsgType XDATA_PTR)SYS_MemoryGet((OS_OFFSET_OF(MMIMsgType, msgBodyPtr)) + 10))) != 
             -NULL)
                   {
                     hciPtr->dataOffset = CMD_OFFSET;
                       OSMEM_memcpy_xdata_xdata((U8 XDATA_PTR)&hciPtr->msgBodyPtr.hciCmd.userPasskeyReqReplyCmd.BdAddr, 
             -msgPtr->msgBodyPtr.hciSendPresskeyNtfCmd.bdAddr.member, sizeof(BD_ADDR));
                       if (gMMI_ctl.passkey[linkIndex] != MMI_TRSPX_PASSKEY_INVALID)
                       {
                           hciPtr->msgOpcode = HCI_CMD_USR_PASSKEY_REQ_REPLY;
                           hciPtr->paraLen = sizeof(HCI_CMD_PARA_USER_PASSKEY_REQ_REPLY_STRU); //10;
                     MMI_HCI_SetU32((U16 XDATA_PTR)&hciPtr->msgBodyPtr.hciCmd.userPasskeyReqReplyCmd.NumericValue, gMMI_ctl
             -.passkey[linkIndex]);
                       }
                       else
                       {
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 32  

                           hciPtr->msgOpcode = HCI_CMD_USR_PASSKEY_REQ_NEGATIVE_REPLY;
                           hciPtr->paraLen = sizeof(BD_ADDR);
                       }
                   MMI_HCI_SendCmd(msgPtr);
                   }
               }
               
               PRIVATE U8 MMI_EtrKeyMapValue(U8 etrKey)
               {
                   if (etrKey >= 0x30 && etrKey <= 0x39 )
                   {
                       return (etrKey - 0x30);
                   }
                   else
                   {
                       return MMI_TRSPX_ETRKEY_INVALID_VALUE;
                   }
               }
               
               PRIVATE void MMI_HCI_UserCnfReply(MMIMsgType XDATA_PTR msgPtr)
               {
                   msgPtr->dataOffset = CMD_OFFSET;
                   msgPtr->paraLen = sizeof(BD_ADDR);
                   OSMEM_memcpy_xdata_xdata((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.userConfirmNegReplyCmd.BdAddr, msgP
             -tr->msgBodyPtr.hciUARTTrspXData.bdAddr.member, sizeof(BD_ADDR));
                 msgPtr->msgOpcode = (msgPtr->msgBodyPtr.hciUARTTrspXData.para.option == MMI_TRSPX_DISPLAY_ENTERED_INFO_Y
             -ES)? HCI_CMD_USR_CONFIRMATION_REQ_REPLY : HCI_CMD_USR_CONFIRMATION_REQ_NEGATIVE_REPLY;
                 MMI_HCI_SendCmd(msgPtr);
               }
               
               #ifdef SUPPORT_LE_XPORT
               PRIVATE void MMI_HCI_TrspXport2LeCommand(MMIMsgType XDATA_PTR msgPtr)
               {
                   switch (msgPtr->msgBodyPtr.hciUARTTrspXData.cmdOpCode)
                   {
                       case MMI_TRSPX_TX_DATA_FROM_LOCAL_REQ:
                     {
                     msgPtr->msgOpcode = SPP_CMD_FROM_MMI_DATA;
                     msgPtr->paraLen -= (OS_OFFSET_OF(HciUARTSppDataType, dataBegin));
                     OSMQ_Put(OSMQ_SPP_CMD_To_LE_XPORT_ptr, (U8 XDATA_PTR)msgPtr);
                           return;
                       }
                       break;
                   }
                   OSMEM_Put((U8 XDATA_PTR)msgPtr);
               }
               #endif
               
               PRIVATE void MMI_HCI_TrspXport2SPPCommand(MMIMsgType XDATA_PTR msgPtr)
               {
                 U8 linkIndex;
                   switch (msgPtr->msgBodyPtr.hciUARTTrspXData.cmdOpCode)
                   {
                       case MMI_TRSPX_TX_DATA_FROM_LOCAL_REQ:
                     {
                     MMI_SwitchEndianBDAddr((U8 XDATA_PTR)msgPtr->msgBodyPtr.hciUARTTrspXData.bdAddr.member);
                     if((linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciUARTTrspXData.bdAddr)) < MA
             -X_MULTI_POINT_NO)
                     {
                       msgPtr->msgOpcode = SPP_CMD_FROM_MMI_DATA;
                       msgPtr->paraLen -= (OS_OFFSET_OF(HciUARTSppDataType, dataBegin));
                       OSMQ_Put(OSMQ_SPP_Command_From_MMI_ptr[linkIndex], (U8 XDATA_PTR)msgPtr);
                       MMI_SniffDisable(linkIndex, MMI_SNIFF_SPP);
                       return;
                     }
                       }
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 33  

                       break;
               
                       case MMI_TRSPX_PASSKEY_ENTRY_RSP:
                       {
                     MMI_SwitchEndianBDAddr((U8 XDATA_PTR)msgPtr->msgBodyPtr.hciUARTTrspXData.bdAddr.member);
                     if((linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciUARTTrspXData.bdAddr)) < MA
             -X_MULTI_POINT_NO)
                     {
                         switch (msgPtr->msgBodyPtr.hciUARTTrspXData.para.pkRsp.ntfType)
                               {
                                   case MMI_TRSPX_PASSKEY_DIGIT_ENTERED:
                                       if (gMMI_ctl.passkey[linkIndex] == MMI_TRSPX_PASSKEY_INVALID)
                                       {
                                           gMMI_ctl.passkey[linkIndex] = 0;
                                       }
                                       if (MMI_EtrKeyMapValue(msgPtr->msgBodyPtr.hciUARTTrspXData.para.pkRsp.etrPasskey)
             - != MMI_TRSPX_ETRKEY_INVALID_VALUE)
                                       {
                                           gMMI_ctl.passkey[linkIndex] = gMMI_ctl.passkey[linkIndex] * 10 + MMI_EtrKeyMa
             -pValue(msgPtr->msgBodyPtr.hciUARTTrspXData.para.pkRsp.etrPasskey);
               
                                           MMI_HCI_SendKeypressNtf(msgPtr);
                                           return;
                                       }
                                       break;
               
                                   case MMI_TRSPX_PASSKEY_DIGIT_ERASED:
                                       MMI_HCI_SendKeypressNtf(msgPtr);
                                       if (gMMI_ctl.passkey[linkIndex] != MMI_TRSPX_PASSKEY_INVALID)
                                       {
                                           gMMI_ctl.passkey[linkIndex] /= 10;
                                       }
                                       return;
               
                                   case MMI_TRSPX_PASSKEY_CLEARED:
                                       MMI_HCI_SendKeypressNtf(msgPtr);
                                       gMMI_ctl.passkey[linkIndex] = MMI_TRSPX_PASSKEY_INVALID;
                                       return;
               
                                   case MMI_TRSPX_PASSKEY_ENTRY_COMPLETED:
                                       MMI_HCI_SendKeypressNtf(msgPtr);
                                       MMI_HCI_PasskeyReply(linkIndex, msgPtr);
                                       return;
               
                                   default:
                                       break;
                               }
                           }
                       }
                       break;
               
                       case MMI_TRSPX_DISPLAY_YES_OR_NO_RSP:
                       {
                     MMI_SwitchEndianBDAddr((U8 XDATA_PTR)msgPtr->msgBodyPtr.hciUARTTrspXData.bdAddr.member);
                     if (MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciUARTTrspXData.bdAddr) < MAX_MULTI_POINT
             -_NO)
                     {
                         MMI_HCI_UserCnfReply(msgPtr);
                               return;
                           }
                       }
                       break;
                   }
                   OSMEM_Put((U8 XDATA_PTR)msgPtr);
               }
               #endif
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 34  

 2028          
 2029          #ifdef TRSPX_App
               PRIVATE void MMI_HCI_TrspXportCommand(MMIMsgType XDATA_PTR msgPtr)
               {
                   if (gMMI_ctl.connectedMode == MMI_TRSPX_CONNECTED_BR_EDR)
                   {
                       MMI_HCI_TrspXport2SPPCommand(msgPtr);
                   }
               #ifdef SUPPORT_LE_XPORT
                   else
                   {
                       MMI_HCI_TrspXport2LeCommand(msgPtr);
                   }
               #endif
               }
               #endif
 2044          
 2045          #ifdef HID_Profile
               PRIVATE void MMI_HCI_HIDCommand(MMIMsgType XDATA_PTR msgPtr)
               {
                   U8 linkIndex;
               
                   if (msgPtr->paraLen <= OS_OFFSET_OF(HciUARTHIDDataType, dataBegin))
                   {
                       OSMEM_Put((U8 XDATA_PTR)msgPtr);
                       return;
                   }
                   if (msgPtr->msgBodyPtr.hciUARTHIDData.cmdOpCode == MMI_HID_OCF_UART_CMD)
                   {
                       if((linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciUARTHIDData.bdAddr)) <
             - MAX_MULTI_POINT_NO)
                     {
                         MMI_HID_ProcessUartCmd(linkIndex, msgPtr->paraLen - OS_OFFSET_OF(HciUARTHIDDataType, dataBegin),
             - msgPtr->msgBodyPtr.hciUARTHIDData.dataBegin, (U8 XDATA_PTR)msgPtr);
                         return;
                     }
                   }
                 
                   else if (msgPtr->msgBodyPtr.hciUARTHIDData.cmdOpCode == MMI_HID_OCF_PIN_CODE_CMD)
                   {
                       MMIMsgType XDATA_PTR sendPtr;
               
                       if (sendPtr = SYS_MemoryGet(OS_OFFSET_OF(MMIMsgType, msgBodyPtr) + sizeof(HCI_CMD_PARA_PIN_CODE_R
             -EQ_REPLY_STRU)))
                       {
                           sendPtr->dataOffset = CMD_OFFSET;
                         sendPtr->msgOpcode = HCI_CMD_PIN_CODE_REQUEST_REPLY;
                         sendPtr->paraLen = 23;
                         sendPtr->msgBodyPtr.hciCmd.pinCodeReqReplyCmd.PinCodeLen = msgPtr->msgBodyPtr.hciUARTHIDData.dat
             -aBegin[0];
                         OSMEM_memcpy_xdata_xdata(sendPtr->msgBodyPtr.hciCmd.pinCodeReqReplyCmd.BdAddr, (U8 XDATA_PTR)&ms
             -gPtr->msgBodyPtr.hciUARTHIDData.bdAddr, 6);
                         MMI_ReadNvramDataChunk ((U8 XDATA_PTR)&sendPtr->msgBodyPtr.hciCmd.pinCodeReqReplyCmd.PinCode, ms
             -gPtr->msgBodyPtr.hciUARTHIDData.dataBegin + 1, msgPtr->msgBodyPtr.hciUARTHIDData.dataBegin[0]);
                         MMI_HCI_SendCmd(sendPtr);
                         MMI_PushMediaEvent(MEDIA_EVT_PINCODE_REQUEST);
                     }
                   }
                 
                   OSMEM_Put((U8 XDATA_PTR)msgPtr);
               }
               #endif
 2084          
 2085          PRIVATE void MMI_HCI_PasskeyRequest(MMIMsgType XDATA_PTR msgPtr)
 2086          {
 2087   1          #ifdef TRSPX_App
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 35  

                 //U8 linkIndex;
                 if (MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.userPasskeyReqEvt.BdAddr) < MAX_MULTI
             -_POINT_NO)
                   {
                       MMI_SwitchEndianBDAddr((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.userPasskeyReqEvt.BdAddr);
                       msgPtr->paraLen = sizeof(BD_ADDR);
                       MMI_HCI_SendTrspXUARTEvent(msgPtr, MMI_TRSPX_PASSKEY_REQ);
                   }
                   else
                   {
                       OSMEM_Put((U8 XDATA_PTR)msgPtr);
                   }
                   #else
 2100   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 2101   1          #endif
 2102   1      }
 2103          
 2104          PRIVATE void MMI_HCI_SSPCmpEvt(MMIMsgType XDATA_PTR msgPtr)
 2105          {
 2106   1          #ifdef TRSPX_App
                   if (MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciSSPEvt.bdAddr) < MAX_MULTI_POINT_NO)
                   {
                       MMI_SwitchEndianBDAddr((U8 XDATA_PTR)msgPtr->msgBodyPtr.hciSSPEvt.bdAddr.member);
                       *((U8 XDATA_PTR)msgPtr->msgBodyPtr.hciSSPEvt.bdAddr.member + sizeof(BD_ADDR)) = msgPtr->msgBodyPt
             -r.hciSSPEvt.status;
                       msgPtr->paraLen = sizeof(HciSSPEvent);
                       MMI_HCI_SendTrspXUARTEvent(msgPtr, MMI_TRSPX_PAIRING_CMP);
                   }
                   else
                   {
                       OSMEM_Put((U8 XDATA_PTR)msgPtr);
                   }
                   #else
 2119   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 2120   1          #endif
 2121   1      }
 2122          
 2123          PRIVATE void MMI_HCI_ReadRemoteNameEvt(MMIMsgType XDATA_PTR msgPtr)
 2124          {
 2125   1        U8 linkIndex;
 2126   1      
 2127   1        if(!msgPtr->msgBodyPtr.hciEvt.remoteNameRequestEvt.Status) // succeeded!! Null-ended
 2128   1        {
 2129   2          //Get link index
 2130   2          if(!((linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.remoteNameRequestEvt.B
             -dAddr))==MAX_MULTI_POINT_NO))
 2131   2          {
 2132   3            //Update Remote device name to linkinfo
 2133   3            OSMEM_memcpy_xdata_xdata(&gMMI_ctl.mmiInfo[linkIndex].linkPara.remoteName[0],
 2134   3                          &msgPtr->msgBodyPtr.hciEvt.remoteNameRequestEvt.RemoteName[0], MAX_REMOTE_NAME_LEN);
 2135   3            gMMI_ctl.mmiInfo[linkIndex].linkPara.remoteName[MAX_REMOTE_NAME_LEN-1] = 0;
 2136   3      
 2137   3            #ifdef FAST_CONNECT_DONGLE
                     MMI_FCD_ReportDevName(&gMMI_ctl.mmiInfo[linkIndex].linkPara.remoteName[0], MAX_REMOTE_NAME_LEN);
                     MMI_HCI_SendReadRSSI(linkIndex);
                     #endif
 2141   3          }
 2142   2        }
 2143   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 2144   1      }
 2145          
 2146          PRIVATE void MMI_HCI_NumberOfCompletePktEvt(MMIMsgType XDATA_PTR msgPtr)
 2147          {
 2148   1        #if 0
                 U8 linkIndex, i;
                 
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 36  

                 HCI_EVT_PARA_NUM_OF_CPL_PKT_STRU XDATA_PTR RtnDataPtr = (HCI_EVT_PARA_NUM_OF_CPL_PKT_STRU XDATA_PTR)&msg
             -Ptr->msgBodyPtr;
                 for(i = 0; i < RtnDataPtr->NumOfHdl; i++)
                 {
                   U8 XDATA_PTR connPtr = (U8 XDATA_PTR)(&RtnDataPtr->ConnHdlB0 + (2*i));
                   
                   if((linkIndex = MMI_GetLinkIndexByConnHandle(ENDIAN_TRANSFORM_U16(*(U16 XDATA_PTR)connPtr))) < MAX_MULT
             -I_POINT_NO)
                   {
                     U16 numOfCplPkt = *((U8 XDATA_PTR)(&RtnDataPtr->ConnHdlB0 + 2 * RtnDataPtr->NumOfHdl + i * 2));
                     L2CAP_AclTxCountHandler(linkIndex, numOfCplPkt);
                   }
                 }
                 #endif
 2163   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 2164   1      }
 2165          
 2166          PRIVATE void MMI_HCI_VendorEvt(MMIMsgType XDATA_PTR msgPtr)
 2167          {
 2168   1        switch(msgPtr->msgBodyPtr.hciVEvt.VOpCode.VCmdOgf)
 2169   1        {
 2170   2          case HCI_VENDOR_OGF_UART_TOOL_CMD:
 2171   2            MMI_HCI_ToolCommand(msgPtr);
 2172   2            break;
 2173   2          case HCI_VENDOR_OGF_UART_CMD:
 2174   2            MMI_HCI_UARTCommand(msgPtr);
 2175   2            break;
 2176   2          case HCI_VENDOR_OGF_UART_SPP:
 2177   2            #ifdef TRSPX_App
                     MMI_HCI_TrspXportCommand(msgPtr);
                     #else
 2180   2            MMI_HCI_SPPCommand(msgPtr);
 2181   2            #endif
 2182   2            break;
 2183   2          #ifdef HID_Profile  
                   case HCI_VENDOR_OGF_UART_HID:
                       MMI_HCI_HIDCommand(msgPtr);
                       break;
                   #endif
 2188   2          
 2189   2          #ifdef AVRCP_Profile
 2190   2          case HCI_VENDOR_OGF_UART_AVRCP:
 2191   2            MMI_AVRCP_HCICommand(msgPtr);
 2192   2            break;
 2193   2          #endif
 2194   2          case HCI_VENDOR_OGF_CUSTOMER_CMD:
 2195   2            if(api_iosys_evt_func[API_GRP_IOSYS_CB_UART_CUST_CMD])
 2196   2            {
 2197   3              ((API_IOSYS_UART_CUST_CMD_CB_FUNC)api_iosys_evt_func[API_GRP_IOSYS_CB_UART_CUST_CMD])((U8 XDATA_PTR)m
             -sgPtr);
 2198   3            }
 2199   2            else
 2200   2            {
 2201   3              OSMEM_Put((U8 XDATA_PTR)msgPtr);
 2202   3            }
 2203   2            break;
 2204   2          case HCI_VENDOR_OGF_EXTENDED_TWO_BYTE_OCF_CMD:
 2205   2            MMI_HCI_ExtUARTCommand(msgPtr);
 2206   2            break;
 2207   2            
 2208   2          case HCI_VENDOR_OGF_GENERAL_V2:
 2209   2            MMI_HCI_GeneralV2CmdCpl(msgPtr);
 2210   2            break;
 2211   2      
 2212   2          #ifdef AIRAPP_Profile
 2213   2          case HCI_VENDOR_OGF_AIRAPP_PASSTHROUGH_TRANSFER_CMD:
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 37  

 2214   2            if(msgPtr->msgBodyPtr.hciVEvt.VOpCode.VCmdOcf == AIRAPP_CMD_PASSTHROUGH_FROM_UART_TO_BT)
 2215   2            {
 2216   3              MMI_PowerSaving(TRUE, MMI_PWRSAVING_ENABLE_ADV, MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyP
             -tr.hciVCmd.VPara.passThroughCmd.bdAddr));
 2217   3              AirApp_PassThroughTransferData((U8 XDATA_PTR)msgPtr, AIRAPP_RSP_PASSTHROUGH_FROM_BT_TO_APP, HCI_VENDO
             -R_OGF_AIRAPP_PASSTHROUGH_TRANSFER_RSP);
 2218   3            }
 2219   2            break;
 2220   2          #endif
 2221   2          default:
 2222   2            OSMEM_Put((U8 XDATA_PTR)msgPtr);
 2223   2            break;
 2224   2        }
 2225   1      }
 2226          
 2227          #ifdef TRSPX_App
               PRIVATE void MMI_HCI_TrspXUserConfirmationRequest(MMIMsgType XDATA_PTR msgPtr)
               {
                   if (MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciEvt.userConfirmReqEvt.BdAddr) < MAX_MU
             -LTI_POINT_NO)
                   {
                       #ifdef TRSPX_SUPPORT_AUTO_CONFIRM
                       msgPtr->dataOffset = CMD_OFFSET;
                   msgPtr->paraLen = 6;
                   msgPtr->msgOpcode = HCI_CMD_USR_CONFIRMATION_REQ_REPLY;
                   MMI_HCI_SendCmd(msgPtr);
                       #else
                       MMI_SwitchEndianBDAddr(&msgPtr->msgBodyPtr.hciEvt.userConfirmReqEvt.BdAddr);
                       msgPtr->msgBodyPtr.hciEvt.userConfirmReqEvt.NumericValue = ENDIAN_TRANSFORM_U32(msgPtr->msgBodyPt
             -r.hciEvt.userConfirmReqEvt.NumericValue);
                       msgPtr->paraLen = sizeof(HCI_EVT_PARA_USER_CONF_REQ_STRU);
                       MMI_HCI_SendTrspXUARTEvent(msgPtr, MMI_TRSPX_DISPLAY_YES_OR_NO_REQ);
                       #endif
                   }
                   else
                   {
                       OSMEM_Put((U8 XDATA_PTR)msgPtr);
                   }
               }
               #endif
 2250          
 2251          PRIVATE void MMI_HCI_PairingFailHandle(U8 XDATA_PTR bdAddrPtr, U8 reason)
 2252          {
 2253   1        U8 linkIndex, airLink;
 2254   1      
 2255   1        linkIndex = MMI_GetLinkIndexByBdA(bdAddrPtr);
 2256   1        airLink = MMI_LinkKey_SearchAirLinkKeyIndex(bdAddrPtr, FALSE);
 2257   1        if(linkIndex < MAX_MULTI_POINT_NO)
 2258   1        {
 2259   2          if(SYS_IsBDAddrIsTheSame((U8 XDATA_PTR)&gMMI_driver_variation_nvram.fast_dongle_link_history_info.linkD
             -ata.bdAddr[0], bdAddrPtr))
 2260   2          {
 2261   3            goto RETRY_ONCE;
 2262   3          }
 2263   2          if(MMI_EOF != airLink && !MMI_AIR_CheckPairingTimeOutTimerExist())
 2264   2          {
 2265   3            goto RETRY_ONCE;
 2266   3          }
 2267   2          if(MMI_AIR_CheckPairingTimeOutTimerExist() && MMI_IsLinkActiveConnected(airLink))
 2268   2          {
 2269   3            MMI_LinkKey_UpdateHistory(bdAddrPtr, FALSE);
 2270   3            MMI_HCI_SendAuthenticationRequested(linkIndex);
 2271   3            gMMI_ctl.mmiInfo[linkIndex].linkPara.isPairFailed = TRUE;
 2272   3            return;
 2273   3          }
 2274   2        
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 38  

 2275   2          switch((MMI_IsLinkActiveConnected(linkIndex))?gMMI_nvram.pariCtl.pairFailActionInActConn:gMMI_nvram.par
             -iCtl.pairFailActionInPasConn)
 2276   2          {
 2277   3            case PAIR_FAIL_RETRY_ONCE:
 2278   3              RETRY_ONCE:
 2279   3              if(!gMMI_ctl.mmiInfo[linkIndex].linkPara.isPairFailed && reason != ERR_PIN_OR_KEY_MISSING)
 2280   3              {
 2281   4                MMI_HCI_SendAuthenticationRequested(linkIndex);
 2282   4              }
 2283   3              else
 2284   3              {
 2285   4                MMI_PushMediaEvent(MEDIA_EVT_PAIRING_FAIL);
 2286   4                if(gMMI_ctl.mmiInfo[linkIndex].linkPara.miscMask & MMI_ACTIVE_CONNECT)
 2287   4                {
 2288   5                  MMI_TIMER_SetDetachTimer(linkIndex, 320L);
 2289   5                  MMI_ClearSequentialActiveProfileList(linkIndex);
 2290   5                  MMI_ClearProfileReconnectListQueue(linkIndex);
 2291   5                }
 2292   4                else
 2293   4                  MMI_TIMER_SetDetachTimer(linkIndex, (U32)(gMMI_nvram.timerCtl.waitDetachTime) * HALF_SEC);
 2294   4                MMI_Reconnect_DeleteInvalidList();
 2295   4                MMI_LinkKey_UpdateHistory(bdAddrPtr, FALSE);
 2296   4              }
 2297   3              break;
 2298   3              
 2299   3            case PAIR_FAIL_ALWAYS_RETRY:
 2300   3              MMI_HCI_SendAuthenticationRequested(linkIndex);
 2301   3              break;
 2302   3              
 2303   3            case PAIR_FAIL_DO_NOTHING:
 2304   3              MMI_PushMediaEvent(MEDIA_EVT_PAIRING_FAIL);
 2305   3              MMI_LinkKey_UpdateHistory(bdAddrPtr, FALSE);
 2306   3              MMI_TIMER_SetDetachTimer(linkIndex, (U32) 30 * ONE_SEC);
 2307   3              SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.connTimer[linkIndex].waitDetachTimer, (U32)30 * ONE_SEC);
 2308   3              MMI_ClearSequentialActiveProfileList(linkIndex);
 2309   3              break;
 2310   3      
 2311   3            case PAIR_FAIL_DISC_DEFAULT:
 2312   3            default:
 2313   3              if(reason == ERR_PIN_OR_KEY_MISSING)
 2314   3                MMI_Reconnect_DeleteInvalidList();
 2315   3              if(gMMI_ctl.mmiInfo[linkIndex].linkPara.miscMask & MMI_ACTIVE_CONNECT)
 2316   3              {
 2317   4                MMI_TIMER_SetDetachTimer(linkIndex, 320L);
 2318   4                MMI_ClearSequentialActiveProfileList(linkIndex);
 2319   4                MMI_ClearProfileReconnectListQueue(linkIndex);
 2320   4              }
 2321   3              else
 2322   3                MMI_TIMER_SetDetachTimer(linkIndex, (U32)(gMMI_nvram.timerCtl.waitDetachTime) * HALF_SEC);
 2323   3      
 2324   3              MMI_LinkKey_UpdateHistory(bdAddrPtr, FALSE);
 2325   3              break;
 2326   3          }
 2327   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.isPairFailed = TRUE;
 2328   2        }
 2329   1      }
 2330          
 2331          PRIVATE void MMI_HCI_PairingSuccessfulHandle(U8 XDATA_PTR bdAddrPtr)
 2332          {
 2333   1        MMI_LinkKey_UpdateHistory(bdAddrPtr, TRUE);
 2334   1        MMI_PushMediaEvent(MEDIA_EVT_PAIRING_SUCCESSFUL);
 2335   1        #ifdef AIR_MODULE
 2336   1        MMI_AIR_LinkKeyNotify(bdAddrPtr);
 2337   1        #endif
 2338   1      }
 2339          
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 39  

 2340          PRIVATE void _initsubState(void)//Mantis 8599 - avoid Warning C183 : Dead Assignment Eliminated
 2341          {
 2342   1        U8 linkIndex;
 2343   1        for(linkIndex = 0; linkIndex < MAX_MULTI_POINT_NO; linkIndex++) 
 2344   1        {
 2345   2          gMMI_ctl.mmiInfo[linkIndex].subState = MMI_INIT_SYS_CONFIGED;
 2346   2        } 
 2347   1      }
 2348          
 2349          PRIVATE void MMI_GAP_WriteSecurityModeComplete(MMIMsgType XDATA_PTR msgPtr)
 2350          {
 2351   1        //Finish configuration. after power on
 2352   1        if(MMI_KEY_STATE_POWER_ON == MMI_GetKeyState())
 2353   1        {
 2354   2          if(msgPtr->msgBodyPtr.gapWriteSecCpt.status == PROFILE_NO_ERROR)
 2355   2          {
 2356   3            _initsubState();
 2357   3      
 2358   3            MMI_ConnectabilityHandle(CMD_SECURITY_MODE_COMPLETE);
 2359   3            MMI_AddTopState(MMI_EOF, MMI_CONNECTABLE);
 2360   3      
 2361   3            if(MMI_IsEnterDiscoverable())
 2362   3            {
 2363   4              MMI_SetEnterDiscoverable(FALSE);
 2364   4              MMI_AddTopState(MMI_EOF, MMI_CONDISCABLE);
 2365   4            }
 2366   3            else
 2367   3            {
 2368   4              MMI_DiscoverabilityHandle(CMD_SET_NON_DISCOVERABLE);
 2369   4            }
 2370   3      
 2371   3            if(MMI_LinkKey_IsLinkWatchdog())
 2372   3            {
 2373   4              SYS_SetTimer((OST XDATA_PTR XDATA_PTR) &gMMI_ctl.mmiTimerInfo.sysTimer.watchDogReconnectTimer, (U32) 
             -gMMI_nvram.timerCtl.mmiWatchDogReconnectTimer * 320L);
 2374   4            }
 2375   3            else if(MMI_AUTO_RECONN_AFTER_PWR_ON_FEAT )
 2376   3            {
 2377   4              MMI_Reconnect(RECONNECT_PWR_ON);
 2378   4            }
 2379   3      
 2380   3            DRIVER_ResetLineInKeyTimer(); //MMI_LINE_IN_DETECT_BY_GPIO
 2381   3      
 2382   3            MMI_TIMER_ResetAutoSwitchOffTimer();
 2383   3            MMI_SetKeyState(MMI_KEY_STATE_NONE);
 2384   3          }
 2385   2          else
 2386   2          {
 2387   3            ASSERT_PRINT("SECURITY MODE ERR!!");
 2388   3          }
 2389   2        }
 2390   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 2391   1      }
 2392          
 2393          PRIVATE void MMI_GAP_WriteConnectabilityModeComplete(MMIMsgType XDATA_PTR msgPtr)
 2394          {
 2395   1        //Corresponding to disabling MMI_PWRSAVING_WRITE_CONNECTABILITY flag in PowerOnLoader.
 2396   1        if(MMI_KEY_STATE_POWER_OFF != MMI_GetKeyState())
 2397   1        {
 2398   2          MMI_PowerSaving(TRUE, MMI_PWRSAVING_WRITE_CONNECTABILITY, MAX_MULTI_POINT_NO);
 2399   2          if (msgPtr->msgBodyPtr.gapWriteConnetabilityModeCpt.connectability_mode != (SAC_NON_CONNECTABLE_MODE|NO
             -N_CONNECTABLE_MODE))
 2400   2          {
 2401   3            MMI_MMI1Handle(FALSE); //CONNECTABLE_RF_ON
 2402   3          }
 2403   2        }
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 40  

 2404   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 2405   1      }
 2406          
 2407          PRIVATE void MMI_GAP_WriteDiscoverabilityModeComplete(MMIMsgType XDATA_PTR msgPtr)
 2408          {
 2409   1        #ifdef AIR_MODULE
 2410   1        MMI_AIR_GAPGetDiscoverabilityModeCpl(msgPtr->msgBodyPtr.gapWriteDiscoverabilityModeCpt.discoverability_m
             -ode);
 2411   1        #endif
 2412   1      
 2413   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 2414   1      }
 2415          
 2416          PRIVATE void MMI_ScanHandlerWhenSCO(BOOL isStart)
 2417          {
 2418   1        if (MMI_SUPPORT_SCO_CLOSE_SCAN_FEAT)
 2419   1        {
 2420   2          if(isStart)
 2421   2          {
 2422   3            MMI_ConnectabilityHandle(CMD_SET_NON_CONNECTABLE_ANYWAY);
 2423   3            MMI_DiscoverabilityHandle(CMD_SET_NON_DISCOVERABLE_ANYWAY);
 2424   3          }
 2425   2          else
 2426   2          {
 2427   3            MMI_DiscoverabilityHandle(CMD_SET_RESUME_DISCOVERABLE);
 2428   3            MMI_ConnectabilityHandle(CMD_SET_RESUME_CONNECTABLE);
 2429   3          }
 2430   2        }
 2431   1      }
 2432          
 2433          PRIVATE void MMI_HCI_AcceptSCOReqProfileHandle(U8 linkIndex)
 2434          {
 2435   1        //MMI_DRV_AudioDeviceRegister(linkIndex, MMI_CheckLinkInCallRelatedState(linkIndex)?AUDIO_DEVICE_SCO:AUD
             -IO_DEVICE_SCO_IDLE);
 2436   1        #ifdef HFP_Profile
 2437   1        SYS_ReleaseTimer(&gMMI_HFP_ctl.HfpCtl[linkIndex].waitToEstSCOInOggCallTimer);
 2438   1        #else
                 UNUSED(linkIndex);
                 #endif
 2441   1      }
 2442          
 2443          PRIVATE void MMI_HCI_ScoDiscHandle(U8 linkIndex)
 2444          {
 2445   1        MMI_DRV_SetSwitchingSCO(FALSE);
 2446   1        if(gMMI_ctl.mmiInfo[linkIndex].linkPara.scoConnHandle == gMMI_ctl.driverCtl.audioSwitchHandler)
 2447   1          gMMI_ctl.driverCtl.audioSwitchHandler = MMI_EOF_HANDLER;
 2448   1        gMMI_ctl.mmiInfo[linkIndex].linkPara.scoConnHandle = 0x00;  // SCO_ON: 9, 10 , 11
 2449   1        gMMI_ctl.mmiInfo[linkIndex].linkPara.isSCOAlive = FALSE;
 2450   1        gMMI_ctl.mmiInfo[linkIndex].linkPara.scoIsActiveEstablished = FALSE;
 2451   1        gMMI_ctl.mmiInfo[linkIndex].linkPara.isSCODisconnecting = FALSE;
 2452   1      
 2453   1        if (SCO_EXISTS(linkIndex))
 2454   1        {
 2455   2          if (--gMMI_ctl.scoCnt == 0)
 2456   2          {
 2457   3            if(MMI_KEY_STATE_POWER_OFF != MMI_GetKeyState()) // Not Power off
 2458   3            {
 2459   4              //There is no sco link now, MMI needs to change scan window parameters back to the original settings.
 2460   4              MMI_ScanHandlerWhenSCO(FALSE);
 2461   4            }
 2462   3          }
 2463   2          MMI_PushMediaEvent(MEDIA_EVT_AUDIO_LINK_CLOSE);
 2464   2          MMI_HCI_SendWritePageScanActivity();
 2465   2        }
 2466   1        MMI_HCI_RemoveSCOAudioLink(linkIndex);
 2467   1      }
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 41  

 2468          
 2469          PRIVATE void MMI_HCI_ScoDiscProfileHandle(U8 linkIndex)
 2470          {
 2471   1        #ifdef HFP_Profile
 2472   1        MMI_HFP_SCODiscHandle(linkIndex);
 2473   1        #endif
 2474   1        #ifdef AIR_MODULE
 2475   1        MMI_AIR_SCODiscNotify(linkIndex);
 2476   1        #endif
 2477   1        if(MMI_IsLinkActiveDisconnecting(linkIndex))
 2478   1        {
 2479   2          MMI_ReleaseProfileLinkAndDetach(linkIndex);
 2480   2        }
 2481   1      }
 2482          
 2483          PRIVATE void MMI_HCI_ScoConnOKHandle(U8 linkIndex)
 2484          {
 2485   1        gMMI_ctl.mmiInfo[linkIndex].linkPara.isSCOAlive = TRUE;
 2486   1        if(gMMI_ctl.scoCnt++ ==0)
 2487   1        {
 2488   2          MMI_HCI_SendWritePageScanActivity();
 2489   2        }
 2490   1        MMI_ScanHandlerWhenSCO(TRUE);
 2491   1      
 2492   1        MMI_PushMediaEvent(MEDIA_EVT_AUDIO_LINK_OPEN);
 2493   1      
 2494   1        MMI_HCI_AddSCOAudioLink(linkIndex);
 2495   1      }
 2496          
 2497          PRIVATE void MMI_HCI_ScoConnOKProfileHandle(U8 linkIndex)
 2498          {
 2499   1        #ifdef HFP_Profile
 2500   1        MMI_HFP_SCOConnectedHandle(linkIndex);
 2501   1        #endif
 2502   1        #ifdef AIR_MODULE
 2503   1        MMI_AIR_SCOConnectedNotify(linkIndex, TRUE);
 2504   1        #endif
 2505   1        #if !defined(HFP_Profile) && !defined(AIR_MODULE)
                 UNUSED(linkIndex);
                 #endif
 2508   1      }
 2509          
 2510          PRIVATE void MMI_HCI_ScoConnFailHandle(U8 linkIndex)
 2511          {
 2512   1        gMMI_ctl.mmiInfo[linkIndex].linkPara.scoIsActiveEstablished = FALSE;
 2513   1        MMI_HCI_RemoveSCOAudioLink(linkIndex);
 2514   1      }
 2515          
 2516          PRIVATE void MMI_HCI_ScoConnFailProfileHandle(U8 linkIndex)
 2517          {
 2518   1        #ifdef HFP_Profile
 2519   1        MMI_HFP_SCOConnectFailHandle(linkIndex);
 2520   1          #else
                   UNUSED(linkIndex);
                 #endif
 2523   1      }
 2524          
 2525          PRIVATE void MMI_HCI_AclDiscHandle(U8 linkIndex)
 2526          {
 2527   1        BOOL isSCOExist = (SCO_EXISTS(linkIndex))?TRUE:FALSE;
 2528   1        U8 LDATA connectionState;
 2529   1        //Save current volumes (voice, mic, ringtone) to nvram, then save to EEPROM
 2530   1        MMI_LinkKey_SaveHistoryWhenDisconnect(linkIndex);
 2531   1      
 2532   1        MMI_HCI_ScoDiscHandle(linkIndex);
 2533   1        if(isSCOExist)
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 42  

 2534   1          MMI_HCI_ScoDiscProfileHandle(linkIndex);
 2535   1      
 2536   1      
 2537   1        #ifdef AIR_MODULE
 2538   1        MMI_AIR_AclDiscHandle(linkIndex);
 2539   1        #endif
 2540   1        //// NOTE!!!!!! this should be the last on coze it will delete the L2capIndex information in HC. After t
             -his, HC_ConnectionHandleToL2CAPIndex(connHandle) can NOT be called
 2541   1        L2CAP_AclDiscHandle(linkIndex);
 2542   1        OSMQ_FlushAndReleaseMemoryBlock(OSMQ_Protocol_Event_To_MMI_ptr[linkIndex]);
 2543   1        MMI_ClearProfileReconnectListQueue(linkIndex);
 2544   1        #ifdef __SEQUENTIAL_ACTIVE_PROFILE__
 2545   1        MMI_ClearSequentialActiveProfileList(linkIndex);
 2546   1        #endif
 2547   1        //DemountAllProfile
 2548   1        MMI_SDAP_ClearCtlData(linkIndex);
 2549   1      
 2550   1        //ACL is disconnected. rest the whole system memory
 2551   1        MMI_PowerSaving(TRUE, 0xFF, linkIndex); // all clear
 2552   1        MMI_DEL_LINK(linkIndex);
 2553   1        MMI_TIMER_ReleaseConnectionTimer(linkIndex);
 2554   1        SYS_ReleaseTimer(&gMMI_ctl.mmiTimerInfo.connTimer[linkIndex].waitDetachTimer);
 2555   1      
 2556   1        gMMI_ctl.mmiInfo[linkIndex].subState = MMI_INIT_SYS_CONFIGED;
 2557   1        MMI_DRV_RemoveServiceLink(linkIndex);
 2558   1      
 2559   1        if(MMI_KEY_STATE_POWER_OFF == MMI_GetKeyState())
 2560   1        {
 2561   2          MMI_ReleaseProfileLinkAndDetach(linkIndex);
 2562   2        }
 2563   1        else
 2564   1        {
 2565   2          MMI_CleanNestState(linkIndex);
 2566   2        }
 2567   1        
 2568   1        connectionState = MMI_CONN_STATE_NONE;
 2569   1        MMI_HCI_UartSendUnSolicitedIndication(MMI_UART_IND_ACL_LINK_STATUS, &connectionState, linkIndex);
 2570   1        MMI_ClearMMILinkSettingType(linkIndex); 
 2571   1      }
 2572          
 2573          PRIVATE void MMI_HCI_RemoveSCOAudioLink(U8 linkIndex)
 2574          {
 2575   1        DRIVER_ClearEnableSCODSPCmd(linkIndex);
 2576   1        #ifdef HFP_Profile
 2577   1        if(MMI_HFP_IsHSPConnected(linkIndex))
 2578   1        {
 2579   2          MMI_DRV_AudioDeviceDeRegister(linkIndex, AUDIO_DEVICE_SCO_HSP);
 2580   2        }
 2581   1        else
 2582   1        #endif
 2583   1        {
 2584   2          MMI_DRV_AudioDeviceDeRegister(linkIndex, AUDIO_DEVICE_SCO);
 2585   2          MMI_DRV_AudioDeviceDeRegister(linkIndex, AUDIO_DEVICE_SCO_IDLE);
 2586   2        }
 2587   1      #if defined HFP_Profile && defined MMI_SUPPORT_MULTI_HFP_FEAT
 2588   1        if(MMI_HFP_SearchCallStatusInd(linkIndex, MMI_CALL_ACTIVE) >= MMI_MAX_ONGOING_CALL_NO || MMI_EOF == MMI_
             -GetNextNormalLink(linkIndex))
 2589   1        {
 2590   2          MMI_DRV_ResumeOtherAudioDevice(linkIndex, AUDIO_DEVICE_SCO_HSP);
 2591   2          MMI_DRV_ResumeOtherAudioDevice(linkIndex, AUDIO_DEVICE_SCO);
 2592   2          MMI_DRV_ResumeOtherAudioDevice(linkIndex, AUDIO_DEVICE_SCO_IDLE);
 2593   2        }
 2594   1      #else
                 MMI_DRV_ResumeOtherAudioDevice(linkIndex, AUDIO_DEVICE_SCO_HSP);
                 MMI_DRV_ResumeOtherAudioDevice(linkIndex, AUDIO_DEVICE_SCO);
                 MMI_DRV_ResumeOtherAudioDevice(linkIndex, AUDIO_DEVICE_SCO_IDLE);
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 43  

               #endif
 2599   1      #ifdef SUPPORT_MIC_IN_A2DP_MODE
 2600   1        if(MMI_GetAudioTransparencyEnable())
 2601   1        {
 2602   2          MMI_LineIn_SendDriverVolCmd();
 2603   2        }
 2604   1      #endif
 2605   1      }
 2606          PRIVATE void MMI_HCI_AddSCOAudioLink(U8 linkIndex)
 2607          {
 2608   1        U8 nextLink = MMI_GetNextNormalLink(linkIndex);
 2609   1      
 2610   1      #ifdef HFP_Profile
 2611   1        U8 audioDev = AUDIO_DEVICE_SCO_HSP;
 2612   1        if(!MMI_HFP_IsHSPConnected(linkIndex))
 2613   1        {
 2614   2          if(MMI_CheckLinkInIncomingState(linkIndex) && (nextLink == MMI_EOF || !MMI_CheckLinkInIncomingState(nex
             -tLink))
 2615   2            || MMI_CheckLinkInOutGoingState(linkIndex) || MMI_CheckLinkInCallActiveState(linkIndex))
 2616   2          {
 2617   3            if(MMI_DRV_AudioDeviceRegister(linkIndex, AUDIO_DEVICE_SCO))
 2618   3            {
 2619   4              if(SCO_EXISTS(linkIndex))
 2620   4                MMI_SendDSPCmd(linkIndex, DSP_ENABLE_BY_SCO);
 2621   4            }
 2622   3          }
 2623   2          audioDev = AUDIO_DEVICE_SCO_IDLE;
 2624   2        }
 2625   1        if(MMI_DRV_AudioDeviceRegister(linkIndex, audioDev))
 2626   1        {
 2627   2          if(SCO_EXISTS(linkIndex))
 2628   2            MMI_SendDSPCmd(linkIndex, DSP_ENABLE_BY_SCO);
 2629   2        }
 2630   1      #else
                 if(MMI_CheckLinkInIncomingState(linkIndex) && (nextLink == MMI_EOF || !MMI_CheckLinkInIncomingState(next
             -Link))
                   || MMI_CheckLinkInOutGoingState(linkIndex) || MMI_CheckLinkInCallActiveState(linkIndex))
                 {
                   if(MMI_DRV_AudioDeviceRegister(linkIndex, AUDIO_DEVICE_SCO))
                   {
                     if(SCO_EXISTS(linkIndex))
                       MMI_SendDSPCmd(linkIndex, DSP_ENABLE_BY_SCO);
                   }
                 }
                 if(MMI_DRV_AudioDeviceRegister(linkIndex, AUDIO_DEVICE_SCO_IDLE))
                 {
                   if(SCO_EXISTS(linkIndex))
                     MMI_SendDSPCmd(linkIndex, DSP_ENABLE_BY_SCO);
                 }
               #endif
 2646   1      }
 2647          
 2648          /* Link Control Command */
 2649          PUBLIC void MMI_HCI_SendInquiry(U8 inquiryType)
 2650          {
 2651   1        MMIMsgType XDATA_PTR msgPtr;
 2652   1        U8 CODE_PTR LapPtr;
 2653   1      
 2654   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_INQUIRY)) != (MMIMsgType XDATA_PTR)NULL)
 2655   1        {
 2656   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_INQ_STRU); //5;
 2657   2          if (inquiryType == INQUIRY_GIAC)
 2658   2          {
 2659   3            LapPtr = (U8 CODE_PTR)&((GAP_NVRAM_TYPE CODE_PTR)(GET_SECTOR_CFG1_ADDR(SECTOR_GAP_NVRAM_INIT)))->GIAC_
             -Lap[0];
 2660   3          }
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 44  

 2661   2          else
 2662   2          {
 2663   3            LapPtr = (U8 CODE_PTR)&((GAP_NVRAM_TYPE CODE_PTR)(GET_SECTOR_CFG1_ADDR(SECTOR_GAP_NVRAM_INIT)))->LIAC_
             -Lap[0];
 2664   3            #ifdef AIR_MODULE
 2665   3            if(gMMI_Air_ctl.isSecurePairing)
 2666   3              LapPtr = (U8 CODE_PTR)&((GAP_NVRAM_TYPE CODE_PTR)(GET_SECTOR_CFG1_ADDR(SECTOR_GAP_NVRAM_INIT)))->LIAC
             -_Lap_Special[0]; //Limited LAP
 2667   3            #endif
 2668   3          }
 2669   2          
 2670   2          OSMEM_memcpy_xdata_code((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.inquiryCmd.Lap[0], LapPtr, sizeof(LAP_
             -ARR));
 2671   2          msgPtr->msgBodyPtr.hciCmd.inquiryCmd.InquiryLength = 8; //8 * 1.28 = 10.24 Second
 2672   2          msgPtr->msgBodyPtr.hciCmd.inquiryCmd.NumResponses = 0; // num_responses
 2673   2          MMI_HCI_SendCmd(msgPtr);
 2674   2      
 2675   2          MMI_HCI_SetInquiryOnGoing(INQUIRY_BUSY_NDK);
 2676   2        }
 2677   1      }
 2678          
 2679          PUBLIC void MMI_HCI_SendInquiryCancel(void)
 2680          {
 2681   1        MMIMsgType XDATA_PTR msgPtr;
 2682   1        
 2683   1        if(!MMI_HCI_IsInquiryOnGoing())
 2684   1          return;
 2685   1        
 2686   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_INQUIRY_CANCEL)) != (MMIMsgType XDATA_PTR)NULL)
 2687   1        {
 2688   2          msgPtr->paraLen = 0;
 2689   2          MMI_HCI_SendCmd(msgPtr);
 2690   2        }
 2691   1      }
 2692          
 2693          PUBLIC void MMI_HCI_SendCreateConnection(U8 linkIndex, U8 XDATA_PTR bd_addr_ptr, U8 type, U8 XDATA_PTR co
             -dPtr)
 2694          {
 2695   1        MMIMsgType XDATA_PTR msgPtr;
 2696   1        
 2697   1        #ifdef AIR_MODULE
 2698   1        if(MMI_AIR_SendCreateConnection(linkIndex, bd_addr_ptr, type, codPtr))
 2699   1          return;
 2700   1        #endif
 2701   1      
 2702   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_CREATE_CONNECTION)) != (MMIMsgType XDATA_PTR)NULL)
 2703   1        {
 2704   2          LightDbgPrint("==CC :%x,%x,%x",(U8)bd_addr_ptr[0], (U8)bd_addr_ptr[1], (U8)bd_addr_ptr[2]);
 2705   2          MMI_PageHandler(TRUE);
 2706   2      
 2707   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_CREATE_CONN_STRU); //13;
 2708   2          OSMEM_memcpy_xdata_xdata ((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.createConnCmd.BdAddr, bd_addr_ptr, 6
             -);
 2709   2          msgPtr->msgBodyPtr.hciCmd.createConnCmd.PacketTypeB0 = 8; // set packet type to DM1
 2710   2          msgPtr->msgBodyPtr.hciCmd.createConnCmd.PacketTypeB1 = 0;// set packet type to DM1
 2711   2          msgPtr->msgBodyPtr.hciCmd.createConnCmd.PageScanRepetMode = MMI_CMD_PARA_PAGE_SCAN_MODE_R1; //page_scan
             -_mode;
 2712   2          msgPtr->msgBodyPtr.hciCmd.createConnCmd.Reserved = 0;
 2713   2          msgPtr->msgBodyPtr.hciCmd.createConnCmd.ClkOffsetB0 = 0x00; //(U8)clock_offset;
 2714   2          msgPtr->msgBodyPtr.hciCmd.createConnCmd.ClkOffsetB1 = 0x00; //(U8)((clock_offset&0xFF00)>>8);
 2715   2          if (MMI_ROLE_SWITCH_TO_MASTER_DURING_ACCEPT_CONN_FEAT)
 2716   2          {
 2717   3            msgPtr->msgBodyPtr.hciCmd.createConnCmd.AllowRoleSwitch = MMI_CMD_PARA_NOT_ALLOW_ROLE_SWITCH; 
 2718   3          }
 2719   2          else
 2720   2          {
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 45  

 2721   3            msgPtr->msgBodyPtr.hciCmd.createConnCmd.AllowRoleSwitch = MMI_CMD_PARA_ALLOW_ROLE_SWITCH; 
 2722   3          }
 2723   2          MMI_HCI_SendCmd(msgPtr);
 2724   2          
 2725   2          gMMI_ctl.reconnectCtl.type = type;
 2726   2          OSMEM_memcpy_xdata_xdata ((U8 XDATA_PTR)gMMI_ctl.mmiInfo[linkIndex].bdAddr, bd_addr_ptr, 6);
 2727   2          OSMEM_memcpy_xdata_xdata ((U8 XDATA_PTR)&gMMI_ctl.mmiInfo[linkIndex].linkPara.classOfDev, codPtr, 3);
 2728   2          MMI_SetConnectionState(linkIndex, MMI_CONN_STATE_WAITING_ACTIVE);
 2729   2          
 2730   2          MMI_HCI_UpdateRole(linkIndex, ROLE_MASTER);
 2731   2          
 2732   2        }
 2733   1      }
 2734          
 2735          PUBLIC void MMI_HCI_SendRelSco(U8 linkIndex)
 2736          {
 2737   1        MMIMsgType XDATA_PTR msgPtr;
 2738   1        #ifdef DBG_UART_ENABLE_MMI
                 ASSERT(SCO_EXISTS(linkIndex));
                 #endif
 2741   1        
 2742   1        #ifdef AIR_MODULE
 2743   1        MMI_AIR_SendRelSco(linkIndex);
 2744   1        #endif
 2745   1      
 2746   1        if (!SCO_EXISTS(linkIndex) || gMMI_ctl.mmiInfo[linkIndex].linkPara.isSCODisconnecting)
 2747   1          return;
 2748   1      
 2749   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_DISCONNECT)) != (MMIMsgType XDATA_PTR)NULL)
 2750   1        {
 2751   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_DISCONNECT_STRU); //3;
 2752   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.disconnectCmd.ConnHdlB0, gMMI_ctl.mmiInfo[link
             -Index].linkPara.scoConnHandle);
 2753   2          msgPtr->msgBodyPtr.hciCmd.disconnectCmd.Reason = ERR_REMOTE_USER_TERMINATED_CONNECTION;
 2754   2          
 2755   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.isSCODisconnecting = TRUE;
 2756   2          MMI_HCI_SendCmd(msgPtr);
 2757   2          #ifdef DBG_UART_ENABLE_MMI
                   LightDbgPrint("MMI - [%d]RelSco %D",(U8)linkIndex, (U32)gMMI_ctl.mmiInfo[linkIndex].linkPara.scoConnHan
             -dle);
                   #endif
 2760   2          SYS_InsertOSTask(HC_TASK);
 2761   2          SYS_InsertOSTask(LM_TASK);
 2762   2        }
 2763   1      }
 2764          
 2765          PUBLIC void MMI_HCI_SendRelAcl(U8 linkIndex)
 2766          {
 2767   1        MMIMsgType XDATA_PTR msgPtr;
 2768   1      
 2769   1        //Unsniff req shall be sent before sending detach, or remote side
 2770   1        //might not get detach because sniff intervel is longer than detach
 2771   1        //timeout timer in LM.
 2772   1        MMI_HCI_SendExitSniffMode(linkIndex);
 2773   1      
 2774   1        //Save current volumes (voice, mic, ringtone) to nvram, then save to EEPROM
 2775   1        MMI_LinkKey_SaveHistoryWhenDisconnect(linkIndex);
 2776   1      
 2777   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_DISCONNECT)) != (MMIMsgType XDATA_PTR)NULL)
 2778   1        {
 2779   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_DISCONNECT_STRU); //3;
 2780   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.disconnectCmd.ConnHdlB0, gMMI_ctl.mmiInfo[link
             -Index].linkPara.aclConnHandle);
 2781   2          msgPtr->msgBodyPtr.hciCmd.disconnectCmd.Reason = ERR_REMOTE_USER_TERMINATED_CONNECTION;
 2782   2          MMI_HCI_SendCmd(msgPtr);
 2783   2          
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 46  

 2784   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.miscMask |= MMI_LINK_DETACHING;
 2785   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.miscMask |= MMI_DISC_ACTIVE;
 2786   2          #ifdef DBG_UART_ENABLE_MMI
                   LightDbgPrint("MMI - [%d]RelAcl%D", (U8)linkIndex, (U32)gMMI_ctl.mmiInfo[linkIndex].linkPara.aclConnHan
             -dle);
                   #endif
 2789   2        }
 2790   1      }
 2791          
 2792          PUBLIC void MMI_HCI_SendCreateConnectionCancel(U8 XDATA_PTR bd_addr_ptr)
 2793          {
 2794   1        MMIMsgType XDATA_PTR msgPtr;
 2795   1        if((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_CREATE_CONNECTION_CANCEL)) != (MMIMsgType XDATA_PTR)NULL)
 2796   1        {
 2797   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_CREATE_CONN_CANCEL_STRU); //6;
 2798   2          OSMEM_memcpy_xdata_xdata ((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.createConnCancelCmd.BdAddr, bd_addr_
             -ptr, 6);
 2799   2          MMI_HCI_SendCmd(msgPtr);
 2800   2      
 2801   2          SYS_InsertOSTask(HC_TASK);
 2802   2          SYS_InsertOSTask(LM_TASK);
 2803   2        }
 2804   1      }
 2805          
 2806          PUBLIC void MMI_HCI_SendChangeConnectionPacketType (U8 linkIndex, U8 pakType)
 2807          {
 2808   1        MMIMsgType XDATA_PTR msgPtr;
 2809   1      
 2810   1        if(pakType == LINK_TYPE_eSCO_CONNECTION_REQUEST)
 2811   1        {
 2812   2          MMI_HCI_SendSetupESCO(linkIndex, gMMI_nvram.changePktTypePara.Esco);
 2813   2        }
 2814   1        else
 2815   1        {
 2816   2          if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_CHANGE_CONNECTION_PACKET_TYPE)) != (MMIMsgType XDATA_PTR
             -)NULL)
 2817   2          {
 2818   3            msgPtr->paraLen = sizeof(HCI_CMD_PARA_CHANGE_CONN_PKT_TYPE_STRU); //4;
 2819   3            if(pakType == LINK_TYPE_ACL_CONNECTION_REQUEST)
 2820   3            {
 2821   4              MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.changeConnPktTypeCmd.ConnHdlB0, gMMI_ctl.mmi
             -Info[linkIndex].linkPara.aclConnHandle);
 2822   4              MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.changeConnPktTypeCmd.PacketTypeB0, gMMI_nvra
             -m.changePktTypePara.Acl);
 2823   4            }
 2824   3            else
 2825   3            {
 2826   4              MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.changeConnPktTypeCmd.ConnHdlB0, gMMI_ctl.mmi
             -Info[linkIndex].linkPara.scoConnHandle);
 2827   4              MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.changeConnPktTypeCmd.PacketTypeB0, gMMI_nvra
             -m.changePktTypePara.Sco);
 2828   4            }
 2829   3            MMI_HCI_SendCmd(msgPtr);
 2830   3          }
 2831   2          else
 2832   2          {
 2833   3            ASSERT_PRINT("MEM ALLOC ERR");
 2834   3          }
 2835   2        }
 2836   1      }
 2837          
 2838          PUBLIC void MMI_HCI_SendAuthenticationRequested(U8 linkIndex)
 2839          {
 2840   1        MMIMsgType XDATA_PTR msgPtr;
 2841   1      
 2842   1        if (msgPtr = MMI_GetCommandMessageMem(HCI_CMD_AUTHENTICATION_REQUESTED))
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 47  

 2843   1        {
 2844   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_AUTHENTICATION_REQUESTED_STRU); //2;
 2845   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.authenRequestedCmd.ConnHdlB0, gMMI_ctl.mmiInfo
             -[linkIndex].linkPara.aclConnHandle);
 2846   2          MMI_HCI_SendCmd(msgPtr);
 2847   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.isAuthenticated = AUTH_ONGOING;
 2848   2        }
 2849   1      }
 2850          
 2851          PUBLIC void MMI_HCI_SendSetConnectionEncryption(U8 linkIndex)
 2852          {
 2853   1        MMIMsgType XDATA_PTR msgPtr;
 2854   1      
 2855   1        if (msgPtr = MMI_GetCommandMessageMem(HCI_CMD_SET_CONNECTION_ENCRYPTION))
 2856   1        {
 2857   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_SET_CONN_ENCRYPTION_STRU); //3;
 2858   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.setConnEncryptionCmd.ConnHdlB0, gMMI_ctl.mmiIn
             -fo[linkIndex].linkPara.aclConnHandle);
 2859   2          msgPtr->msgBodyPtr.hciCmd.setConnEncryptionCmd.EncryptionEnable = 0x01;
 2860   2      
 2861   2          MMI_HCI_SendCmd(msgPtr);
 2862   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.isEncrypted = ENCRYPTED_ONGOING;
 2863   2        }
 2864   1      }
 2865          
 2866          PUBLIC void MMI_HCI_SendReadRemoteName(U8 linkIndex)
 2867          {
 2868   1        MMIMsgType XDATA_PTR msgPtr;
 2869   1      
 2870   1        if(!MMI_IsActiveLink(linkIndex))
 2871   1          return;
 2872   1      
 2873   1        if (msgPtr = MMI_GetCommandMessageMem(HCI_CMD_REMOTE_NAME_REQUEST))
 2874   1        {
 2875   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_REMOTE_NAME_REQ_STRU); //10;
 2876   2          OSMEM_memcpy_xdata_xdata (  (U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.remoteNameReqCmd.BdAddr,
 2877   2                        (U8 XDATA_PTR)gMMI_ctl.mmiInfo[linkIndex].bdAddr,
 2878   2                        6);
 2879   2          msgPtr->msgBodyPtr.hciCmd.remoteNameReqCmd.PageScanRepetMode = MMI_CMD_PARA_PAGE_SCAN_MODE_R1; //page_s
             -can_mode; the same as MMI_HCI_SendCreateConnection
 2880   2          msgPtr->msgBodyPtr.hciCmd.remoteNameReqCmd.Reserved = 0;
 2881   2          msgPtr->msgBodyPtr.hciCmd.remoteNameReqCmd.ClkOffset[0] = 0;
 2882   2          msgPtr->msgBodyPtr.hciCmd.remoteNameReqCmd.ClkOffset[1] = 0;
 2883   2          MMI_HCI_SendCmd(msgPtr);
 2884   2        }
 2885   1      }
 2886          
 2887          PUBLIC void MMI_HCI_SendSetupESCO(U8 linkIndex, U16 scoPktType)
 2888          {
 2889   1        MMIMsgType XDATA_PTR msgPtr;
 2890   1        U32 TxBandwidth;
 2891   1        U32 RxBandwidth;
 2892   1        U16 MaxLatency;
 2893   1        U16 VoiceSetting;
 2894   1        U8 ReTxEffort;
 2895   1      
 2896   1        if(msgPtr = MMI_GetCommandMessageMem(HCI_CMD_SETUP_SYNCHRONOUS_CONNECTION))
 2897   1        {
 2898   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_SETUP_SCO_CONN_STRU); //17;
 2899   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.setupSCOConnCmd.ConnHdlB0, (SCO_EXISTS(linkInd
             -ex))?
 2900   2                                                    gMMI_ctl.mmiInfo[linkIndex].linkPara.scoConnHandle:
 2901   2                                                    gMMI_ctl.mmiInfo[linkIndex].linkPara.aclConnHandle);
 2902   2      
 2903   2          VoiceSetting = 3;
 2904   2          ReTxEffort = 0x01;
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 48  

 2905   2          
 2906   2          if(scoPktType & HCIPKTYPE_AIROHA_PKT_6SLOTS)
 2907   2          {
 2908   3            scoPktType &= ~HCIPKTYPE_AIROHA_PKT_6SLOTS;
 2909   3            //Tesco = 6 slots, Length = 60 bytes : Tx/Rx Bandwidth = 16k , MaxLatency = 6ms, retransmission effort
             - = 0x01, 8Khz data rate, latency ~15ms (HW SRC)
 2910   3            TxBandwidth = 16000L;
 2911   3            RxBandwidth = 16000L;
 2912   3            MaxLatency  = 6;
 2913   3          }
 2914   2          else if(scoPktType & HCIPKTYPE_AIROHA_PKT_16SLOTS)
 2915   2          {
 2916   3            scoPktType &= ~HCIPKTYPE_AIROHA_PKT_16SLOTS;
 2917   3            //Tesco = 16 slots, Length = 40 bytes : Tx/Rx Bandwidth = 4.0k , MaxLatency = 12ms, retransmission eff
             -ort = 0x01, 2Khz data rate, latency ~43ms (SW Down-sampling)
 2918   3            TxBandwidth = 4000L;
 2919   3            RxBandwidth = 4000L;
 2920   3            MaxLatency  = 12;
 2921   3          }
 2922   2              else if(scoPktType & HCIPKTYPE_AIROHA_PKT_20SLOTS)
 2923   2          {
 2924   3            scoPktType &= ~HCIPKTYPE_AIROHA_PKT_20SLOTS;
 2925   3            //Tesco = 20 slots, Length = 52 bytes : Tx/Rx Bandwidth = 4.16k , MaxLatency = 15ms, retransmission ef
             -fort = 0x01, 2Khz data rate, latency ~33.25ms (SW Down-sampling)           
 2926   3                  TxBandwidth = 4160L;
 2927   3            RxBandwidth = 4160L;
 2928   3            MaxLatency  = 15;
 2929   3          }
 2930   2          else if(scoPktType & HCIPKTYPE_AIROHA_PKT_24SLOTS)
 2931   2          {
 2932   3            scoPktType &= ~HCIPKTYPE_AIROHA_PKT_24SLOTS;
 2933   3            //Tesco = 24 slots, Length = 60 bytes : Tx/Rx Bandwidth = 4k , MaxLatency = 17ms, retransmission effor
             -t = 0x01, 2Khz data rate, latency ~58ms (SW Down-sampling)
 2934   3            TxBandwidth = 4000L;
 2935   3            RxBandwidth = 4000L;
 2936   3            MaxLatency  = 17;
 2937   3          }
 2938   2          else if(scoPktType & HCIPKTYPE_AIROHA_PKT_2EV5_FOR_CELT)
 2939   2          {
 2940   3            //Tesco = 8 slots, Length = 336 bytes : Tx/Rx Bandwidth = 33.6k/12k , MaxLatency = 16ms, retransmissio
             -n effort = 0x00, Celt encode data ,
 2941   3            scoPktType = 0x0280;//SOUND_BAR Celt
 2942   3            TxBandwidth = 67200L;//67200L; 
 2943   3            RxBandwidth = 12000L;//12000L;
 2944   3            MaxLatency  = 7;//16 12 7 
 2945   3                  ReTxEffort = 0;//0x01:retransmit  0:No reretransmit
 2946   3          }        
 2947   2          else
 2948   2          {
 2949   3            TxBandwidth = gMMI_nvram.scoPktPara.TxBandwidth;
 2950   3            RxBandwidth = gMMI_nvram.scoPktPara.RxBandwidth;
 2951   3            MaxLatency  = gMMI_nvram.scoPktPara.MaxLatency;
 2952   3            ReTxEffort  = gMMI_nvram.scoPktPara.ReTxEffort;
 2953   3            if (gMMI_ctl.mmiInfo[linkIndex].linkPara.scoCodecType == SCO_CODEC_CVSD)
 2954   3            {
 2955   4              VoiceSetting = gMMI_nvram.scoPktPara.VoiceSetting;
 2956   4            }
 2957   3          }
 2958   2          
 2959   2          MMI_HCI_SetU32((U32 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.setupSCOConnCmd.TxBandwidth, TxBandwidth);
 2960   2          MMI_HCI_SetU32((U32 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.setupSCOConnCmd.RxBandwidth, RxBandwidth);
 2961   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.setupSCOConnCmd.MaxLatencyB0, MaxLatency);
 2962   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.setupSCOConnCmd.VoiceSettingB0, VoiceSetting);
 2963   2          msgPtr->msgBodyPtr.hciCmd.setupSCOConnCmd.ReTxEffort = ReTxEffort;
 2964   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.setupSCOConnCmd.PacketTypeB0, scoPktType);
 2965   2          MMI_HCI_SendCmd(msgPtr);
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 49  

 2966   2          
 2967   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.scoIsActiveEstablished = TRUE;
 2968   2        }
 2969   1      }
 2970          
 2971          PUBLIC void MMI_HCI_SendConfirmationReply(BOOL isAccept, U8 XDATA_PTR bdAddrPt)
 2972          {
 2973   1        MMIMsgType XDATA_PTR msgPtr;
 2974   1      
 2975   1        if ((msgPtr = MMI_GetCommandMessageMem((isAccept)?HCI_CMD_USR_CONFIRMATION_REQ_REPLY: HCI_CMD_USR_CONFIR
             -MATION_REQ_NEGATIVE_REPLY)) != (MMIMsgType XDATA_PTR)NULL)
 2976   1        {
 2977   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_USER_CONFIRM_REQ_NEG_REPLY_STRU); //6;
 2978   2          OSMEM_memcpy_xdata_xdata ((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.userConfirmNegReplyCmd.BdAddr, (U8 X
             -DATA_PTR)bdAddrPt, sizeof(BD_ADDR));
 2979   2      
 2980   2          MMI_HCI_SendCmd(msgPtr);
 2981   2        }
 2982   1      }
 2983          
 2984          /* Link Policy Command */
 2985          #if 0 //for BQB
               PUBLIC void MMI_HCI_SendHoldMode(U8 linkIndex)
               {
                 MMIMsgType XDATA_PTR msgPtr;
               
                 if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_HOLD_MODE)) != (MMIMsgType XDATA_PTR)NULL)
                 {
                   msgPtr->paraLen = sizeof(HCI_CMD_PARA_HOLD_MODE_STRU); //6;
                   MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.holdModeCmd.ConnHdlB0, gMMI_ctl.mmiInfo[linkIn
             -dex].linkPara.aclConnHandle);
                   MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.holdModeCmd.HoldModeMaxIntervalB0, 0x0F16/*gMM
             -I_nvram.sniffPara.Sniff_Max_Interval*/); //800 slots equals to 0.5 sec
                   MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.holdModeCmd.HoldModeMinIntervalB0, 0x0F16/*gMM
             -I_nvram.sniffPara.Sniff_Min_Interval*/); //800
                   MMI_HCI_SendCmd(msgPtr);
                 }
               }
               #endif
 3000          
 3001          PUBLIC void MMI_HCI_SendSniffMode(U8 linkIndex)
 3002          {
 3003   1        MMIMsgType XDATA_PTR msgPtr;
 3004   1      
 3005   1        #ifdef AIR_MODULE //temporary modification
 3006   1        if (linkIndex == MMI_AIR_GetAirLink(PRODUCT_AIR_SCO_WOOFER|PRODUCT_AIR_A2DP_WOOFER))
 3007   1          return;
 3008   1        #endif
 3009   1      
 3010   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_SNIFF_MODE)) != (MMIMsgType XDATA_PTR)NULL)
 3011   1        {
 3012   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_SNIFF_MODE_STRU); //10;
 3013   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.sniffModeCmd.ConnHdlB0, gMMI_ctl.mmiInfo[linkI
             -ndex].linkPara.aclConnHandle);
 3014   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.sniffModeCmd.SniffMaxIntervalB0, gMMI_nvram.sn
             -iffPara.Sniff_Max_Interval); //800 slots equals to 0.5 sec
 3015   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.sniffModeCmd.SniffMinIntervalB0, gMMI_nvram.sn
             -iffPara.Sniff_Min_Interval); //800
 3016   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.sniffModeCmd.SniffAttemptB0, gMMI_nvram.sniffP
             -ara.Sniff_Attempt); //4
 3017   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.sniffModeCmd.SniffTimeOutB0, gMMI_nvram.sniffP
             -ara.Sniff_Timeout); //1
 3018   2          MMI_HCI_SendCmd(msgPtr);
 3019   2        }
 3020   1      }
 3021          
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 50  

 3022          PUBLIC void MMI_HCI_SendExitSniffMode(U8 linkIndex)
 3023          {
 3024   1        MMIMsgType XDATA_PTR msgPtr;
 3025   1      
 3026   1        if(MMI_IsActiveLink(linkIndex))
 3027   1        {
 3028   2          #ifdef AIR_MODULE  //temporary modification
 3029   2          if (!gSYS_update_by_uart_flash_command && linkIndex == MMI_AIR_GetAirLink(PRODUCT_AIR_SOUNDBAR|PRODUCT_
             -AIR_SCO_WOOFER|PRODUCT_AIR_A2DP_WOOFER))
 3030   2            return;
 3031   2          #endif
 3032   2      
 3033   2          if (gMMI_ctl.mmiInfo[linkIndex].linkPara.mode == MODE_SNIFF || gMMI_ctl.mmiInfo[linkIndex].linkPara.mod
             -e == MODE_SNIFFING)
 3034   2          {
 3035   3            if (msgPtr = MMI_GetCommandMessageMem(HCI_CMD_EXIT_SNIFF_MODE))
 3036   3            {
 3037   4              msgPtr->paraLen = sizeof(HCI_CMD_PARA_EXIT_SNIFF_MODE_STRU); //2;
 3038   4              MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.exitSniffModeCmd.ConnHdlB0, gMMI_ctl.mmiInfo
             -[linkIndex].linkPara.aclConnHandle);
 3039   4              MMI_HCI_SendCmd(msgPtr);
 3040   4              
 3041   4              SYS_InsertOSTask(HC_TASK);
 3042   4              SYS_InsertOSTask(LM_TASK);
 3043   4      
 3044   4              gMMI_ctl.mmiInfo[linkIndex].linkPara.mode = MODE_ACTIVATING;
 3045   4              gMMI_ctl.mmiInfo[linkIndex].linkPara.sniffTryCnt = 0;
 3046   4              LightDbgPrint("USR - [%d]SniffDisable:%X",(U8)linkIndex, (U32)gMMI_ctl.mmiInfo[linkIndex].linkPara.sn
             -iffProfileMask);
 3047   4      
 3048   4              //cancel sniff subrating
 3049   4              SYS_ReleaseTimer(&gMMI_ctl.mmiTimerInfo.connTimer[linkIndex].checkRemoteAGAcceptEnterSniffTimer);
 3050   4            }
 3051   3          }
 3052   2        }
 3053   1      }
 3054          
 3055          PUBLIC void MMI_HCI_SendSwitchRole(U8 linkIndex, U8 role)
 3056          {
 3057   1        MMIMsgType XDATA_PTR msgPtr;
 3058   1      
 3059   1        if(!MMI_IsActiveLink(linkIndex) || SCO_EXISTS(linkIndex) /* HCI spec*/|| MMI_IsLinkActiveDisconnecting(l
             -inkIndex))
 3060   1          return;
 3061   1        if((U8)gMMI_ctl.mmiInfo[linkIndex].linkPara.role == role)
 3062   1          return;
 3063   1          
 3064   1        msgPtr = MMI_GetCommandMessageMem( HCI_CMD_SWITCH_ROLE);
 3065   1        if(msgPtr)
 3066   1        {
 3067   2          MMI_SniffDisable(linkIndex, MMI_SNIFF_ROLE_SWITCH);
 3068   2          
 3069   2          OSMEM_memcpy_xdata_xdata (  (U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.switchRoleCmd.BdAddr,
 3070   2                        (U8 XDATA_PTR)gMMI_ctl.mmiInfo[linkIndex].bdAddr,
 3071   2                        6);
 3072   2          msgPtr->msgBodyPtr.hciCmd.switchRoleCmd.Role = (role == ROLE_MASTER)?HCI_CMD_SWITCH_ROLE_IS_MASTER:HCI_
             -CMD_SWITCH_ROLE_IS_SLAVE;
 3073   2          MMI_HCI_SendCmd(msgPtr);
 3074   2      
 3075   2          #ifdef DBG_UART_ENABLE_MMI
                   LightDbgPrint("MMI - RoleSwitch:%d",(U8)linkIndex);
                   #endif
 3078   2          
 3079   2          if( role == ROLE_MASTER)
 3080   2          {
 3081   3            gMMI_ctl.mmiInfo[linkIndex].linkPara.roleSwitchCnt++;
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 51  

 3082   3          }
 3083   2        }
 3084   1      }
 3085          
 3086          PUBLIC void MMI_HCI_SendSniffSubrating(U8 linkIndex)
 3087          {
 3088   1        MMIMsgType XDATA_PTR msgPtr;
 3089   1      
 3090   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_SNIFF_SUBRATING)) != (MMIMsgType XDATA_PTR)NULL)
 3091   1        {
 3092   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_SNIFF_SUBRATING_STRU); //8;
 3093   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.sniffSubratingCmd.ConnHdlB0, gMMI_ctl.mmiInfo[
             -linkIndex].linkPara.aclConnHandle);
 3094   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.sniffSubratingCmd.MaxLatencyB0, gMMI_nvram.sni
             -ffPara.Maximum_Latency);
 3095   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.sniffSubratingCmd.MinRemoteTimeOutB0, gMMI_nvr
             -am.sniffPara.Minimum_Remote_Timeout);
 3096   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.sniffSubratingCmd.MinLocalTimeOutB0, gMMI_nvra
             -m.sniffPara.Minimum_Local_Timeout);
 3097   2          MMI_HCI_SendCmd(msgPtr);
 3098   2        }
 3099   1      }
 3100          
 3101          /* Controller & Baseband Command */
 3102          PUBLIC void MMI_HCI_SendWritePageTimeOut(U16 timeout)
 3103          {
 3104   1        MMIMsgType XDATA_PTR msgPtr;
 3105   1      
 3106   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_WRITE_PAGE_TIMEOUT)) != (MMIMsgType XDATA_PTR)NULL)
 3107   1        {
 3108   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_WR_PAGE_TO_STRU); //2;
 3109   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.writePageTOCmd.PageToB0, timeout);
 3110   2          MMI_HCI_SendCmd(msgPtr);
 3111   2        }
 3112   1      }
 3113          
 3114          PUBLIC void MMI_HCI_SendWritePageScanActivity(void)  //change pageScanWindow
 3115          {
 3116   1        MMIMsgType XDATA_PTR msgPtr;
 3117   1      
 3118   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_WRITE_PAGE_SCAN_ACTIVITY)) != (MMIMsgType XDATA_PTR)NULL)
 3119   1        {
 3120   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_WR_PAGE_SCAN_ACTIVITY_STRU); //4;
 3121   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.writePageScanActCmd.PageScanIntervalB0, gHC_pa
             -rameter.page_scan_interval);
 3122   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.writePageScanActCmd.PageScanWindowB0, (gMMI_ct
             -l.scoCnt)?gMMI_nvram.pageScanWindowSize.largeSize:
 3123   2                                                                  gMMI_nvram.pageScanWindowSize.smallSize);
 3124   2          MMI_HCI_SendCmd(msgPtr);
 3125   2        }
 3126   1      }
 3127          
 3128          
 3129          PUBLIC void MMI_HCI_SendWriteLinkSuperVisionTimeout(U8 linkIndex,U16 timeout)
 3130          {
 3131   1        MMIMsgType XDATA_PTR msgPtr;
 3132   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_WRITE_LINK_SUPERVISION_TIMEOUT)) != (MMIMsgType XDATA_PTR
             -)NULL)
 3133   1        {
 3134   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_WR_LINK_SUPERVISION_TO_STRU);
 3135   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.writeLinkSpervisionTOCmd.ConnHdlB0, gMMI_ctl.m
             -miInfo[linkIndex].linkPara.aclConnHandle);
 3136   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.writeLinkSpervisionTOCmd.LinkSupervisionToB0, 
             -timeout);
 3137   2          MMI_HCI_SendCmd(msgPtr);
 3138   2        }
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 52  

 3139   1      }
 3140          
 3141          PUBLIC void MMI_HCI_SendWriteInquiryMode(U8 inquiryMode)
 3142          {
 3143   1        MMIMsgType XDATA_PTR msgPtr;
 3144   1      
 3145   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_WRITE_INQUIRY_MODE)) != (MMIMsgType XDATA_PTR)NULL)
 3146   1        {
 3147   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_WR_INQ_MODE_STRU); //4;
 3148   2          msgPtr->msgBodyPtr.hciCmd.writeInquiryModeCmd.InqMode = inquiryMode;
 3149   2          MMI_HCI_SendCmd(msgPtr);
 3150   2        }
 3151   1      }
 3152          
 3153          PUBLIC void MMI_HCI_SendRefreshEncryptionKey(U8 linkIndex)
 3154          {
 3155   1        MMIMsgType XDATA_PTR msgPtr;
 3156   1      
 3157   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_REFRESH_ENCRYPTION_KEY)) != (MMIMsgType XDATA_PTR)NULL)
 3158   1        {
 3159   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_REFRESH_ENC_KEY_STRU); //2;
 3160   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.refreshEncrypKeyCmd.ConnHdlB0, gMMI_ctl.mmiInf
             -o[linkIndex].linkPara.aclConnHandle);
 3161   2          MMI_HCI_SendCmd(msgPtr);
 3162   2        }
 3163   1      }
 3164          
 3165          PUBLIC void MMI_HCI_SendReadRSSI(U8 linkIndex)
 3166          {
 3167   1        MMIMsgType XDATA_PTR msgPtr = (MMIMsgType XDATA_PTR)MMI_GetCommandMessageMem(HCI_CMD_READ_RSSI);
 3168   1      
 3169   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 3170   1        {
 3171   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_RD_RSSI_STRU); //2;
 3172   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciCmd.readRSSICmd.HandleB0, gMMI_ctl.mmiInfo[linkInd
             -ex].linkPara.aclConnHandle);
 3173   2          MMI_HCI_SendCmd(msgPtr);
 3174   2        }
 3175   1      }
 3176          
 3177          PUBLIC void MMI_HCI_SendWriteSimplePairingDebugMode(U8 isON)
 3178          {
 3179   1        MMIMsgType XDATA_PTR msgPtr;
 3180   1      
 3181   1        if(msgPtr = MMI_GetCommandMessageMem(HCI_CMD_WRITE_SIMPLE_PAIRING_DEBUG_MODE))
 3182   1        {
 3183   2          msgPtr->paraLen = sizeof(HCI_CMD_PARA_WR_SIMPLE_PAIRING_DBG_MODE_STRU); //1;
 3184   2          msgPtr->msgBodyPtr.hciCmd.writeSSPDebugModeCmd.SimplePairingDbgMode = (isON)?0x01:0x00;
 3185   2          MMI_HCI_SendCmd(msgPtr);
 3186   2        }
 3187   1      }
 3188          
 3189          PUBLIC void MMI_HCI_SendEnableDeviceUnderTestMode(void)
 3190          {
 3191   1        MMIMsgType XDATA_PTR msgPtr;
 3192   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_CMD_ENABLE_DEVICE_UNDER_TEST_MODE)) != (MMIMsgType XDATA_PTR)
             -NULL)
 3193   1        {
 3194   2          msgPtr->paraLen = 0;
 3195   2          MMI_HCI_SendCmd(msgPtr);
 3196   2        }
 3197   1      }
 3198          
 3199          PUBLIC BOOL MMI_HCI_SendVCmdAudioSwitch(U8 linkIndex)
 3200          {
 3201   1        MMIMsgType XDATA_PTR msgPtr;
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 53  

 3202   1      
 3203   1        if (SCO_EXISTS(linkIndex))
 3204   1        {
 3205   2          if ((msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA)) != (MMIMsgType XDATA_PTR)NULL)
 3206   2          {
 3207   3            msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VCMD_OCF_AUDIO_SWITCH;
 3208   3            msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_AUDIO;
 3209   3            MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciVCmd.VPara.audioSwitchCmd.ScoHandleB0, gMMI_ctl.m
             -miInfo[linkIndex].linkPara.scoConnHandle);
 3210   3            msgPtr->msgBodyPtr.hciVCmd.VPara.audioSwitchCmd.IsMute = 0;//must set zero
 3211   3      
 3212   3            MMI_HCI_SendCmd(msgPtr);
 3213   3            return TRUE;
 3214   3          }
 3215   2        }
 3216   1        return FALSE;
 3217   1      }
 3218          
 3219          PUBLIC void MMI_HCI_SendVCmdAudioEnhanceSCOLatency(BOOL isEnable)
 3220          {
 3221   1        MMIMsgType XDATA_PTR msgPtr;
 3222   1      
 3223   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA)) != (MMIMsgType XDATA_PTR)NULL)
 3224   1        {
 3225   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VCMD_OCF_ENHANCE_ESCO_LATENCY;
 3226   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_AUDIO;
 3227   2          msgPtr->msgBodyPtr.hciVCmd.VPara.enhanceESCOLatencyCmd.ScoHandleB0 = 0;
 3228   2          msgPtr->msgBodyPtr.hciVCmd.VPara.enhanceESCOLatencyCmd.ScoHandleB1 = 0;
 3229   2          msgPtr->msgBodyPtr.hciVCmd.VPara.enhanceESCOLatencyCmd.IsEnable = isEnable;//must set zero
 3230   2      
 3231   2          MMI_HCI_SendCmd(msgPtr);
 3232   2        }
 3233   1      }
 3234          
 3235          PUBLIC void MMI_HCI_SendVCmdAudioSCONullPacket(U8 linkIndex, BOOL isPktNull)
 3236          {
 3237   1        MMIMsgType XDATA_PTR msgPtr;
 3238   1      
 3239   1        if (SCO_EXISTS(linkIndex))
 3240   1        {
 3241   2          if ((msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA)) != (MMIMsgType XDATA_PTR)NULL)
 3242   2          {
 3243   3            msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VCMD_OCF_ESCO_NULL_PACKET;
 3244   3            msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_AUDIO;
 3245   3            MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciVCmd.VPara.scoNullPktCmd.ScoHandleB0, gMMI_ctl.mm
             -iInfo[linkIndex].linkPara.scoConnHandle);
 3246   3            msgPtr->msgBodyPtr.hciVCmd.VPara.scoNullPktCmd.IsNullPkt = isPktNull;//must set zero
 3247   3      
 3248   3            MMI_HCI_SendCmd(msgPtr);
 3249   3          }
 3250   2        }
 3251   1      }
 3252          
 3253          PUBLIC void MMI_HCI_SendVCmdAudioQosSetup(U8 linkIndex, U8 serviceType, U8 flowStatus, U8 rxFull)
 3254          {
 3255   1        MMIMsgType XDATA_PTR msgPtr;
 3256   1      
 3257   1        if(!MMI_IsActiveLink(linkIndex) || MMI_IsLinkActiveDisconnecting(linkIndex))
 3258   1          return;
 3259   1      
 3260   1        #ifdef AIR_MODULE
 3261   1        if(MMI_AIR_SendVCmdAudioQosSetup(linkIndex, serviceType, flowStatus, rxFull))
 3262   1          return;
 3263   1        #endif
 3264   1      
 3265   1        //if(gMMI_ctl.mmiInfo[linkIndex].linkPara.QosServiceType == serviceType && !flowStatus)
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 54  

 3266   1        //  return;
 3267   1      
 3268   1        if (msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA))
 3269   1        {
 3270   2          msgPtr->paraLen = sizeof(HCI_VCMD_PARA_AUDIO_SETUP_QOS) + sizeof(HCI_VCMD_OPCODE_STRU);
 3271   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VCMD_OCF_SETUP_QOS;
 3272   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_AUDIO;
 3273   2          MMI_HCI_SetU16((U16 XDATA_PTR)&msgPtr->msgBodyPtr.hciVCmd.VPara.setupQosCmd.ConnHdlB0, gMMI_ctl.mmiInfo
             -[linkIndex].linkPara.aclConnHandle);
 3274   2          msgPtr->msgBodyPtr.hciVCmd.VPara.setupQosCmd.Flag = 0;
 3275   2          msgPtr->msgBodyPtr.hciVCmd.VPara.setupQosCmd.ServiceType = serviceType;
 3276   2          MMI_HCI_SetU32((U32 XDATA_PTR)&msgPtr->msgBodyPtr.hciVCmd.VPara.setupQosCmd.TokenRate, 0xFFFFFFFFL);
 3277   2          MMI_HCI_SetU32((U32 XDATA_PTR)&msgPtr->msgBodyPtr.hciVCmd.VPara.setupQosCmd.PeakBandwidth, 0xFFFFFFFFL)
             -;
 3278   2          MMI_HCI_SetU32((U32 XDATA_PTR)&msgPtr->msgBodyPtr.hciVCmd.VPara.setupQosCmd.Latency, 10000L);//10ms
 3279   2          MMI_HCI_SetU32((U32 XDATA_PTR)&msgPtr->msgBodyPtr.hciVCmd.VPara.setupQosCmd.DelayVariation, 0L);
 3280   2          msgPtr->msgBodyPtr.hciVCmd.VPara.setupQosCmd.FlowStatus = flowStatus;
 3281   2          msgPtr->msgBodyPtr.hciVCmd.VPara.setupQosCmd.RxFull = rxFull;
 3282   2          
 3283   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.QosServiceType = serviceType;
 3284   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.QosFlowStatus = flowStatus;
 3285   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.RxFull = rxFull;
 3286   2          LightDbgPrint("compose airoha qos cmd:%d",(U8)rxFull);
 3287   2          LightDbgPrint("acl %d active %d,%d,%d", (U8)linkIndex, (U8)MMI_IsActiveLink(linkIndex),(U8)serviceType,
             -(U8)flowStatus);
 3288   2          
 3289   2          MMI_HCI_SendCmd(msgPtr);
 3290   2        }
 3291   1      }
 3292          
 3293          PRIVATE void MMI_HCI_SendVCmdWriteSFR(U8 Bank, U8 Offset, U8 Value)
 3294          {
 3295   1        MMIMsgType XDATA_PTR msgPtr;
 3296   1      
 3297   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA)) != (MMIMsgType XDATA_PTR)NULL)
 3298   1        {
 3299   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VCMD_OCF_LABTEST_CONFIG_WRITE_SFR;
 3300   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VENDOR_OGF_LABTEST;
 3301   2          msgPtr->msgBodyPtr.hciVCmd.VPara.writeSFRCmd.Value = Value;
 3302   2          msgPtr->msgBodyPtr.hciVCmd.VPara.writeSFRCmd.Offset = Offset;
 3303   2          msgPtr->msgBodyPtr.hciVCmd.VPara.writeSFRCmd.Bank = Bank;
 3304   2          MMI_HCI_SendCmd(msgPtr);
 3305   2        }
 3306   1      }
 3307          
 3308          PUBLIC void MMI_HCI_SendVCmdWriteLocalBdAddr(U8 XDATA_PTR bdPtr)
 3309          {
 3310   1        MMIMsgType XDATA_PTR msgPtr;
 3311   1      
 3312   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA)) != (MMIMsgType XDATA_PTR)NULL)
 3313   1        {
 3314   2          LightDbgPrint("==Local :%x,%x,%x",(U8)bdPtr[0], (U8)bdPtr[1], (U8)bdPtr[2]);
 3315   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VCMD_OCF_GENERAL_WRITE_BD_ADDR;
 3316   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_GENERAL_V2;
 3317   2          OSMEM_memcpy_xdata_xdata((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVCmd.VPara.writeLocalBdAddrCmd, bdPtr, si
             -zeof(HCI_VCMD_PARA_GNL_WRITE_BD_ADDR));
 3318   2          MMI_HCI_SendCmd(msgPtr);
 3319   2        }
 3320   1      }
 3321          
 3322          PUBLIC void MMI_HCI_SendVCmdLabTestStart(void)
 3323          {
 3324   1        MMIMsgType XDATA_PTR msgPtr;
 3325   1      
 3326   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA)) != (MMIMsgType XDATA_PTR)NULL)
 3327   1        {
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 55  

 3328   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VCMD_OCF_LABTEST_START;
 3329   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_LABTEST;
 3330   2          MMI_HCI_SendCmd(msgPtr);
 3331   2        }
 3332   1      }
 3333          
 3334          PUBLIC void MMI_HCI_SendVCmdLabTestUpdateUapLap(U8 XDATA_PTR sourcePtr)
 3335          {
 3336   1        MMIMsgType XDATA_PTR msgPtr;
 3337   1      
 3338   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA)) != (MMIMsgType XDATA_PTR)NULL)
 3339   1        {
 3340   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VCMD_OCF_LABTEST_CONFIG_UAP_AND_LAP;
 3341   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_LABTEST;
 3342   2          OSMEM_memcpy_xdata_xdata((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVCmd.VPara.configUAPLAPCmd, sourcePtr, si
             -zeof(HCI_VCMD_PARA_LABTEST_CFG_UAP_LAP));
 3343   2          MMI_HCI_SendCmd(msgPtr);
 3344   2        }
 3345   1      }
 3346          
 3347          PUBLIC void MMI_HCI_SendVCmdLabTestPause(void)
 3348          {
 3349   1        MMIMsgType XDATA_PTR msgPtr;
 3350   1      
 3351   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA)) != (MMIMsgType XDATA_PTR)NULL)
 3352   1        {
 3353   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VCMD_OCF_LABTEST_PAUSE;
 3354   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_LABTEST;
 3355   2          MMI_HCI_SendCmd(msgPtr);
 3356   2        }
 3357   1      }
 3358          
 3359          PUBLIC void MMI_HCI_SendVCmdLabTestSwitchMCUTo12M(void)
 3360          {
 3361   1        MMI_HCI_SendVCmdWriteSFR(0xC2, 0xC9, 0x00);
 3362   1      }
 3363          
 3364          PUBLIC void MMI_HCI_SendVCmdLabTestLTAddrInTxPkt(void)
 3365          {
 3366   1        MMI_HCI_SendVCmdWriteSFR(0xC2, 0x2C, 0x07);
 3367   1      }
 3368          
 3369          PUBLIC void MMI_HCI_SendVCmdLabTestReportRateSetup(void)
 3370          {
 3371   1        MMIMsgType XDATA_PTR msgPtr;
 3372   1      
 3373   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA)) != (MMIMsgType XDATA_PTR)NULL)
 3374   1        {
 3375   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VCMD_OCF_LABTEST_REPORT_RATE_SETUP;
 3376   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_LABTEST;
 3377   2          msgPtr->msgBodyPtr.hciVCmd.VPara.reportRateSetupCmd.RptRateB0 = 0xE8;
 3378   2          msgPtr->msgBodyPtr.hciVCmd.VPara.reportRateSetupCmd.RptRateB1 = 0x03;
 3379   2          MMI_HCI_SendCmd(msgPtr);
 3380   2        }
 3381   1      }
 3382          
 3383          PUBLIC void MMI_HCI_SendVCmdLabTestSingleToneSetup(U8 channel, U16 gc, U16 bias)
 3384          {
 3385   1        MMIMsgType XDATA_PTR msgPtr;
 3386   1      
 3387   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA)) != (MMIMsgType XDATA_PTR)NULL)
 3388   1        {
 3389   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VCMD_OCF_LABTEST_SINGLE_TONE_SETUP;
 3390   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_LABTEST;
 3391   2          msgPtr->msgBodyPtr.hciVCmd.VPara.singleToneSetupCmd.Channel = channel;
 3392   2          msgPtr->msgBodyPtr.hciVCmd.VPara.singleToneSetupCmd.Gc2 = (U8)gc;
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 56  

 3393   2          msgPtr->msgBodyPtr.hciVCmd.VPara.singleToneSetupCmd.Gc1 = (U8)(gc >> 8);
 3394   2          msgPtr->msgBodyPtr.hciVCmd.VPara.singleToneSetupCmd.Bias2_2 = (U8)bias;
 3395   2          msgPtr->msgBodyPtr.hciVCmd.VPara.singleToneSetupCmd.Bias2_1 = (U8)(bias >>8);
 3396   2          MMI_HCI_SendCmd(msgPtr);
 3397   2        }
 3398   1      }
 3399          
 3400          PUBLIC void MMI_HCI_SendVCmdLabTestTxModemManualOff(void)
 3401          {
 3402   1        MMI_HCI_SendVCmdWriteSFR(0xE4, 0xE7, 0x00);
 3403   1      }
 3404          
 3405          PUBLIC void MMI_HCI_SendVCmdLabTestContinueTxData(HCI_VCMD_PARA_LABTEST_CTX_DATA XDATA_PTR dataPtr)
 3406          {
 3407   1        MMIMsgType XDATA_PTR msgPtr;
 3408   1      
 3409   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA)) != (MMIMsgType XDATA_PTR)NULL)
 3410   1        {
 3411   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VCMD_OCF_LABTEST_CTX_DATA;
 3412   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_LABTEST;
 3413   2          OSMEM_memcpy_xdata_xdata((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVCmd.VPara.cTxDataCmd, dataPtr, sizeof(HC
             -I_VCMD_PARA_LABTEST_CTX_DATA));
 3414   2          MMI_HCI_SendCmd(msgPtr);
 3415   2        }
 3416   1      }
 3417          
 3418          PUBLIC void MMI_HCI_SendVCmdLabTestBurstTxPacket(HCI_VCMD_PARA_LABTEST_BTX_PACKET XDATA_PTR dataPtr)
 3419          {
 3420   1        MMIMsgType XDATA_PTR msgPtr;
 3421   1      
 3422   1        msgPtr = (MMIMsgType XDATA_PTR)OSMEM_Get(OSMEM_ptr2);
 3423   1      
 3424   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 3425   1        {
 3426   2          OSMEM_memset_xdata((U8 XDATA_PTR)msgPtr, 0, OSMEM2_BLKSIZE);
 3427   2      
 3428   2          msgPtr->dataOffset = CMD_OFFSET;
 3429   2          msgPtr->msgOpcode =  HCI_VCMD_AIROHA;
 3430   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VCMD_OCF_LABTEST_BTX_PACKET;
 3431   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_LABTEST;
 3432   2          OSMEM_memcpy_xdata_xdata((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVCmd.VPara.bTxPktCmd, dataPtr, sizeof(HCI
             -_VCMD_PARA_LABTEST_BTX_PACKET));
 3433   2          MMI_HCI_SendCmd(msgPtr);
 3434   2        }
 3435   1      }
 3436          
 3437          PUBLIC void MMI_HCI_SendVCmdLabTestContinueRxStart(U8 channel, U8 HighSide, U8 ReptRssi)
 3438          {
 3439   1        MMIMsgType XDATA_PTR msgPtr;
 3440   1      
 3441   1        if ((msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA)) != (MMIMsgType XDATA_PTR)NULL)
 3442   1        {
 3443   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = HCI_VCMD_OCF_LABTEST_CRX_START;
 3444   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_LABTEST;
 3445   2          msgPtr->msgBodyPtr.hciVCmd.VPara.cRxStartCmd.Channel = channel;
 3446   2          msgPtr->msgBodyPtr.hciVCmd.VPara.cRxStartCmd.HighSide = HighSide;
 3447   2          msgPtr->msgBodyPtr.hciVCmd.VPara.cRxStartCmd.ReptRssi = ReptRssi;
 3448   2          MMI_HCI_SendCmd(msgPtr);
 3449   2        }
 3450   1      }
 3451          
 3452          #ifdef TRSPX_App
               PUBLIC void MMI_HCI_SendTrspXUARTEvent(MMIMsgType XDATA_PTR msgPtr, U8 cmdOpcode)
               {
                 msgPtr->dataOffset = CMD_OFFSET;
                 msgPtr->msgOpcode =  HCI_VCMD_AIROHA_TO_UART;
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 57  

                   msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = cmdOpcode;
                   msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_UART_SPP;
                 
                 MMI_HCI_SendCmd(msgPtr);
               }
               #endif
 3463          
 3464          #ifdef SPP_Profile
 3465          PUBLIC void MMI_HCI_SendSPPEventToUART(U8 linkIndex, U8 cmdOpcode)
 3466          {
 3467   1        MMIMsgType XDATA_PTR uartMsgPtr;
 3468   1      
 3469   1        if(MMI_SPP_DATA_TO_UART_FEAT)
 3470   1        {
 3471   2          //redirect msgPtr, bypass OSMEM_Put()
 3472   2          if(uartMsgPtr = (MMIMsgType XDATA_PTR)OSMEM_Get(OSMEM_ptr1))
 3473   2          {
 3474   3            uartMsgPtr->msgBodyPtr.hciUARTSppData.cmdOpCode = cmdOpcode + (HCI_VEVT_OCF_SPP_CONNECTED - SPP_TO_MMI
             -_OPCODE_CONNECTED);
 3475   3            uartMsgPtr->msgBodyPtr.hciUARTSppData.ogf = HCI_VENDOR_OGF_UART_SPP;
 3476   3      
 3477   3            OSMEM_memcpy_xdata_xdata((U8 XDATA_PTR)&uartMsgPtr->msgBodyPtr.hciUARTSppData.bdAddr, (U8 XDATA_PTR)&g
             -MMI_ctl.mmiInfo[linkIndex].bdAddr, sizeof(BD_ADDR));
 3478   3            MMI_SwitchEndianBDAddr((U8 XDATA_PTR)&uartMsgPtr->msgBodyPtr.hciUARTSppData.bdAddr);
 3479   3      
 3480   3            uartMsgPtr->dataOffset = CMD_OFFSET;
 3481   3            uartMsgPtr->msgOpcode = HCI_VCMD_AIROHA_TO_UART;
 3482   3            uartMsgPtr->paraLen = (sizeof(HciUARTSppDataType)-1);
 3483   3            MMI_HCI_SendCmd(uartMsgPtr);
 3484   3          }
 3485   2        }
 3486   1      }
 3487          
 3488          PUBLIC void MMI_HCI_SendSPPDataToUART(U8 linkIndex, U8 XDATA_PTR msgPtr, U8 cmdOpcode)
 3489          {
 3490   1        U16 dataLen;
 3491   1        MMIMsgType XDATA_PTR uartMsgPtr;
 3492   1      
 3493   1        #define SPP_UART_DATA_OFFSET  (OS_OFFSET_OF(MMIMsgType, msgBodyPtr) + (sizeof(HciUARTSppDataType)-1))
 3494   1        #define SPP_RFCOMM_DATA_OFFSET  (OS_OFFSET_OF(ProfileDataEvent, dataBody))
 3495   1      
 3496   1        if(MMI_SPP_DATA_TO_UART_FEAT)
 3497   1        {
 3498   2          dataLen = ((ProfileDataEvent XDATA_PTR)msgPtr)->dataLength;
 3499   2          uartMsgPtr = (MMIMsgType XDATA_PTR)msgPtr;
 3500   2      
 3501   2          ASSERT(SPP_UART_DATA_OFFSET == SPP_RFCOMM_DATA_OFFSET);
 3502   2      
 3503   2          uartMsgPtr->msgBodyPtr.hciUARTSppData.cmdOpCode = cmdOpcode + (HCI_VEVT_OCF_SPP_RX_DATA_FROM_REMOTE - S
             -PP_TO_MMI_OPCODE_DATA);
 3504   2          uartMsgPtr->msgBodyPtr.hciUARTSppData.ogf = HCI_VENDOR_OGF_UART_SPP;
 3505   2      
 3506   2          OSMEM_memcpy_xdata_xdata((U8 XDATA_PTR)&uartMsgPtr->msgBodyPtr.hciUARTSppData.bdAddr, (U8 XDATA_PTR)&gM
             -MI_ctl.mmiInfo[linkIndex].bdAddr, sizeof(BD_ADDR));
 3507   2          MMI_SwitchEndianBDAddr((U8 XDATA_PTR)&uartMsgPtr->msgBodyPtr.hciUARTSppData.bdAddr);
 3508   2      
 3509   2          uartMsgPtr->dataOffset = CMD_OFFSET;
 3510   2          uartMsgPtr->msgOpcode = HCI_VCMD_AIROHA_TO_UART;
 3511   2          uartMsgPtr->paraLen = dataLen + (sizeof(HciUARTSppDataType)-1);
 3512   2      
 3513   2          MMI_HCI_SendCmd(uartMsgPtr);
 3514   2          
 3515   2          return; //redirect msgPtr, bypass OSMEM_Put()     
 3516   2        }
 3517   1        OSMEM_Put((U8 XDATA_PTR)msgPtr);
 3518   1      }
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 58  

 3519          #endif
 3520          
 3521          
 3522          PUBLIC void MMI_HCI_AirohaCmd_SendToRemote(MMIMsgType XDATA_PTR evtMsgPtr)
 3523          {
 3524   1        OSMQ_Put (OSMQ_HCIDRV_Command_From_GAP_ptr, (U8 XDATA_PTR)evtMsgPtr);
 3525   1      }
 3526          
 3527          PUBLIC void MMI_HCI_AirohaCmd_SendResponse(U8 cmdOpcode, U8 resultCode)
 3528          {
 3529   1        MMIMsgType XDATA_PTR msgPtr;
 3530   1      
 3531   1        if(msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA_TO_UART))
 3532   1        {
 3533   2          msgPtr->paraLen = sizeof(HCI_VCMD_OPCODE_STRU) + sizeof(HCI_VCMD_PARA_AIR_CMD_RESP);
 3534   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = cmdOpcode;
 3535   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_UART_RESP;
 3536   2          msgPtr->msgBodyPtr.hciVCmd.VPara.respVEvtCmd.resultCode = resultCode;
 3537   2          MMI_HCI_AirohaCmd_SendToRemote(msgPtr);
 3538   2        }
 3539   1      }
 3540          
 3541          PUBLIC void MMI_HCI_AirohaCmd_ExtSendResponse(U8 cmdOpcode, U16 extendOCF, U8 resultCode)
 3542          {
 3543   1        MMIMsgType XDATA_PTR msgPtr;
 3544   1      
 3545   1        if(msgPtr = MMI_GetCommandMessageMem(HCI_VCMD_AIROHA_TO_UART))
 3546   1        {
 3547   2          msgPtr->paraLen = sizeof(HCI_VCMD_OPCODE_STRU) +sizeof(HCI_VCMD_PARA_EXT_UART_PARA);
 3548   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = cmdOpcode;
 3549   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_EXTENDED_TWO_BYTE_OCF_RESP;
 3550   2          msgPtr->msgBodyPtr.hciVCmd.VPara.extendedPara.OCF = extendOCF;
 3551   2          msgPtr->msgBodyPtr.hciVCmd.VPara.extendedPara.result = resultCode;
 3552   2      
 3553   2          MMI_HCI_AirohaCmd_SendToRemote(msgPtr);
 3554   2        }
 3555   1      }
 3556          
 3557          PUBLIC MMIMsgType XDATA_PTR MMI_HCI_AirohaCmd_IssueSolicitedInd(U8 opCode, U16 vParaLength)
 3558          {
 3559   1        MMIMsgType XDATA_PTR msgPtr;
 3560   1        
 3561   1        if(msgPtr = (MMIMsgType XDATA_PTR)SYS_MemoryGet(vParaLength + sizeof(HCI_VCMD_OPCODE_STRU) + 5))
 3562   1        {
 3563   2          OSMEM_memset_xdata((U8 XDATA_PTR)msgPtr, 0, vParaLength + sizeof(HCI_VCMD_OPCODE_STRU) + 5);
 3564   2      
 3565   2          msgPtr->dataOffset = CMD_OFFSET;
 3566   2          msgPtr->msgOpcode =  HCI_VCMD_AIROHA_TO_UART;
 3567   2          msgPtr->paraLen = sizeof(HCI_VCMD_OPCODE_STRU) + vParaLength;
 3568   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_UART_IND_SOLICITED;
 3569   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = opCode;
 3570   2        }
 3571   1        return msgPtr;
 3572   1      }
 3573          
 3574          
 3575          
 3576          PUBLIC void MMI_HCI_UartSendUnSolicitedIndication(U8 opCode, U8 XDATA_PTR dataPtr, U8 linkIndex)
 3577          {
 3578   1        U8 i;
 3579   1        BOOL withBDAddr;
 3580   1        U8 XDATA_PTR tempPtr;
 3581   1        MMIMsgType XDATA_PTR msgPtr;
 3582   1        #ifdef MMI_INQUIRY_CMD
                 U16 length;
                 #endif
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 59  

 3585   1        
 3586   1        #ifdef AIR_MODULE
 3587   1        MMI_AIR_UartSendUnSolicitedIndication(opCode, dataPtr, linkIndex);
 3588   1        #endif
 3589   1      
 3590   1        if (!MMI_CC_UART_ENABLE)
 3591   1          return;
 3592   1      
 3593   1        if(msgPtr = MMI_GetCommandMessageMem( HCI_VCMD_AIROHA_TO_UART ))
 3594   1        {
 3595   2          withBDAddr = FALSE;
 3596   2      
 3597   2          msgPtr->paraLen = 2; // sizeof(opCode + ogf)
 3598   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = opCode;
 3599   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = HCI_VENDOR_OGF_UART_IND_UNSOLICITED;
 3600   2          tempPtr = (U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVCmd.VPara;
 3601   2      
 3602   2          switch(opCode)
 3603   2          {
 3604   3            case MMI_UART_IND_STATE_CHANGE:
 3605   3              if( linkIndex != MMI_EOF)
 3606   3              {
 3607   4                tempPtr[sizeof(BD_ADDR)] = MMI_GetTopStateByLink(linkIndex);
 3608   4                msgPtr->paraLen += 1;
 3609   4                withBDAddr = TRUE;
 3610   4              }
 3611   3              else
 3612   3              {
 3613   4                *tempPtr = MMI_GetTopStateByLink(DEFAULT_LINK_IND);
 3614   4                msgPtr->paraLen += 1;
 3615   4              }
 3616   3              break;
 3617   3      
 3618   3            case MMI_UART_IND_CONFIRMATION_REQUEST:
 3619   3              withBDAddr = TRUE;
 3620   3              break;
 3621   3      
 3622   3            case MMI_UART_IND_INSERT_STATE:
 3623   3            case MMI_UART_IND_REPLACE_STATE:
 3624   3              OSMEM_memcpy_xdata_xdata (tempPtr+sizeof(BD_ADDR), dataPtr, 2);
 3625   3              msgPtr->paraLen += 2;
 3626   3              withBDAddr = TRUE;
 3627   3              break;
 3628   3      
 3629   3            case MMI_UART_IND_REMOVE_STATE:
 3630   3              if(dataPtr[1] == MMI_EOF)
 3631   3              {
 3632   4                tempPtr[0] = dataPtr[0];
 3633   4                msgPtr->paraLen += 1;
 3634   4              }
 3635   3              else
 3636   3              {
 3637   4                tempPtr[sizeof(BD_ADDR)] = dataPtr[0];
 3638   4                msgPtr->paraLen += 1;
 3639   4                withBDAddr = TRUE;
 3640   4              }
 3641   3              break;
 3642   3      
 3643   3            case MMI_UART_IND_MEDIA_EVENT_GENERATED:
 3644   3              #if 1
 3645   3              i = (U8)dataPtr;
 3646   3              MMI_ReadNvramDataChunk(tempPtr, &gMMI_nvram.evtParaCtl[i], sizeof(EvtPara));
 3647   3              #else
                       OSMEM_memcpy_xdata_xdata (tempPtr, dataPtr, sizeof(EvtPara));
                       #endif
 3650   3              msgPtr->paraLen += sizeof(EvtPara);
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 60  

 3651   3              break;
 3652   3      
 3653   3            case MMI_UART_IND_PLUS_VGS:
 3654   3            case MMI_UART_IND_PLUS_VGM:
 3655   3            case MMI_UART_IND_SET_ABSOLUTE_VOLUME:
 3656   3              tempPtr[sizeof(BD_ADDR)] = dataPtr[0];
 3657   3              msgPtr->paraLen += 1;
 3658   3              withBDAddr = TRUE;
 3659   3              break;
 3660   3      
 3661   3            case MMI_UART_IND_DEVICE_TYPE:
 3662   3              switch(gMMI_ctl.sdapCtl[linkIndex].remoteApplicationID)
 3663   3              {
 3664   4                case PRODUCT_AIR_TWS:
 3665   4                  tempPtr[sizeof(BD_ADDR)] = MMI_UART_DEVICE_TYPE_AIROSHARE;
 3666   4                  break;
 3667   4      
 3668   4                case PRODUCT_AIR_SOUNDBAR:
 3669   4                  tempPtr[sizeof(BD_ADDR)] = MMI_UART_DEVICE_TYPE_AIROSOUNDBAR;
 3670   4                  break;
 3671   4                case PRODUCT_AIR_A2DP_WOOFER:
 3672   4                case PRODUCT_AIR_SCO_WOOFER:
 3673   4                  tempPtr[sizeof(BD_ADDR)] = MMI_UART_DEVICE_TYPE_AIROWOOFER;
 3674   4                  break;
 3675   4                case PRODUCT_AIR_NONE:
 3676   4                  tempPtr[sizeof(BD_ADDR)] = MMI_UART_DEVICE_TYPE_PHONE;
 3677   4                  break;
 3678   4              }
 3679   3              msgPtr->paraLen += 1;
 3680   3              withBDAddr = TRUE;
 3681   3              break;
 3682   3              
 3683   3            case MMI_UART_IND_PROFILE_CONNECTED:
 3684   3            case MMI_UART_IND_PROFILE_DISCONNECTED:
 3685   3            case MMI_UART_IND_ACL_LINK_STATUS:
 3686   3            case MMI_UART_IND_AVRCP_UP_DOWN_PASS_THROUGH:
 3687   3              tempPtr[sizeof(BD_ADDR)] = *dataPtr;
 3688   3              msgPtr->paraLen += 1;
 3689   3              withBDAddr = TRUE;
 3690   3              break;
 3691   3              
 3692   3            #ifdef MMI_INQUIRY_CMD
                     case MMI_UART_IND_INQUIRY_RESULT_WITH_RSSI:
                     case MMI_UART_IND_EXTENDED_INQUIRY_RESULT:
                       length = OSMEM1_BLKSIZE - (msgPtr->dataOffset + 3 + msgPtr->paraLen);
                       OSMEM_memcpy_xdata_xdata(tempPtr, dataPtr, length);
                       msgPtr->paraLen += length;
                       break;
                     #endif
 3700   3      
 3701   3            default:
 3702   3              OSMEM_Put((U8 XDATA_PTR)msgPtr);
 3703   3              return;
 3704   3          }
 3705   2      
 3706   2          if(withBDAddr)
 3707   2          {
 3708   3            //put current BDAddr ahead of the data
 3709   3            OSMEM_memcpy_xdata_xdata(tempPtr, &gMMI_ctl.mmiInfo[linkIndex].bdAddr[0], sizeof(BD_ADDR));
 3710   3            MMI_SwitchEndianBDAddr(tempPtr);
 3711   3            msgPtr->paraLen += sizeof(BD_ADDR);
 3712   3          }
 3713   2          MMI_HCI_SendCmd(msgPtr);
 3714   2        }
 3715   1      }
 3716          
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 61  

 3717          PUBLIC void MMI_HCI_SendVCmdAvrcpEventToUART(U8 linkIndex, MMIMsgType XDATA_PTR msgPtr, U8 evtCode)
 3718          {
 3719   1        msgPtr->dataOffset = CMD_OFFSET;
 3720   1        msgPtr->msgOpcode =  HCI_VCMD_AIROHA_TO_UART;
 3721   1      
 3722   1        msgPtr->msgBodyPtr.hciUARTAvrcpEvent.cmdOpCode = evtCode;
 3723   1        msgPtr->msgBodyPtr.hciUARTAvrcpEvent.ogf = HCI_VENDOR_OGF_UART_AVRCP;
 3724   1      
 3725   1        OSMEM_memcpy_xdata_xdata((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciUARTAvrcpEvent.bdAddr, (U8 XDATA_PTR)&gMMI
             -_ctl.mmiInfo[linkIndex].bdAddr, sizeof(BD_ADDR));
 3726   1        MMI_SwitchEndianBDAddr((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciUARTAvrcpEvent.bdAddr);
 3727   1      
 3728   1        MMI_HCI_SendCmd(msgPtr);
 3729   1      }
 3730          
 3731          
 3732          PUBLIC void MMI_GAP_WriteSecurityMode(void)
 3733          {
 3734   1        MMIMsgType XDATA_PTR msgPtr;
 3735   1        if ((msgPtr = MMI_GetCommandMessageMem(GAP_CMD_FROM_PROFILE_WRITE_SECURITY_MODE)) != (MMIMsgType XDATA_P
             -TR)NULL)
 3736   1        {
 3737   2          //Support Security Mode 4
 3738   2          msgPtr->msgBodyPtr.gapPara = SECURITY_MODE_4;
 3739   2          OSMQ_Put (OSMQ_GAP_Command_From_PROFILE_ptr, (U8 XDATA_PTR)msgPtr);
 3740   2        }
 3741   1      }
 3742          
 3743          PUBLIC void MMI_GAP_WritePairingMode(void)
 3744          {
 3745   1        MMIMsgType XDATA_PTR msgPtr;
 3746   1      
 3747   1        if ((msgPtr = MMI_GetCommandMessageMem(GAP_CMD_FROM_PROFILE_WRITE_PAIRING_MODE)) != (MMIMsgType XDATA_PT
             -R)NULL)
 3748   1        {
 3749   2          msgPtr->msgBodyPtr.gapPairingModeCmd.pairingMode= PAIRING_MODE;
 3750   2          OSMQ_Put (OSMQ_GAP_Command_From_PROFILE_ptr, (U8 XDATA_PTR)msgPtr);
 3751   2        }
 3752   1      }
 3753          
 3754          PUBLIC void MMI_GAP_WriteConnectabilityMode(U8 connectabilityMode)
 3755          {
 3756   1        MMIMsgType XDATA_PTR msgPtr;
 3757   1      
 3758   1        if(gMMI_ctl.connectableState == connectabilityMode)
 3759   1          return;
 3760   1      
 3761   1        msgPtr = MMI_GetCommandMessageMem(GAP_CMD_FROM_PROFILE_WRITE_CONNECTABILITY_MODE);
 3762   1        msgPtr->msgBodyPtr.gapPara = connectabilityMode;
 3763   1      
 3764   1        if(MMI_DRV_IsNoConnectivityPwOnLowBat())
 3765   1        {
 3766   2          msgPtr->msgBodyPtr.gapPara = (SAC_NON_CONNECTABLE_MODE | NON_CONNECTABLE_MODE);
 3767   2        }
 3768   1      
 3769   1        OSMQ_Put (OSMQ_GAP_Command_From_PROFILE_ptr, (U8 XDATA_PTR)msgPtr);
 3770   1      
 3771   1        gMMI_ctl.connectableState = msgPtr->msgBodyPtr.gapPara;
 3772   1      
 3773   1        if(gMMI_ctl.connectableState == (SAC_NON_CONNECTABLE_MODE | NON_CONNECTABLE_MODE))
 3774   1        {
 3775   2          MMI_MMI1Handle(TRUE); //CONNECTABLE_SET_RF_OFF
 3776   2        }
 3777   1      }
 3778          
 3779          PUBLIC void MMI_GAP_WriteDiscoverabilityMode(U8 discoverabilityMode)
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 62  

 3780          {
 3781   1        MMIMsgType XDATA_PTR msgPtr;
 3782   1      
 3783   1        if(gMMI_ctl.discoverableState == discoverabilityMode)
 3784   1        {
 3785   2          return;
 3786   2        }
 3787   1      
 3788   1        msgPtr = MMI_GetCommandMessageMem(GAP_CMD_FROM_PROFILE_WRITE_DISCOVERABILITY_MODE);
 3789   1        msgPtr->msgBodyPtr.gapPara = discoverabilityMode;
 3790   1      
 3791   1        if(MMI_DRV_IsNoConnectivityPwOnLowBat())
 3792   1        {
 3793   2          msgPtr->msgBodyPtr.gapPara = (SAC_NON_DISCOVERABLE_MODE| NON_DISCOVERABLE_MODE);
 3794   2        }
 3795   1        
 3796   1        gMMI_ctl.discoverableState = msgPtr->msgBodyPtr.gapPara;
 3797   1        
 3798   1        #ifdef AIR_MODULE
 3799   1        MMI_AIR_WriteDiscoverabilityMode(msgPtr->msgBodyPtr.gapPara);
 3800   1        #endif
 3801   1        
 3802   1        OSMQ_Put (OSMQ_GAP_Command_From_PROFILE_ptr, (U8 XDATA_PTR)msgPtr);
 3803   1        
 3804   1      }
 3805          
 3806          PUBLIC BOOL MMI_HCI_IsQosReady(U8 linkIndex)
 3807          {
 3808   1        if(!MMI_HCI_IsCmdInBusy(HCI_VCMD_AIROHA, linkIndex, HCI_VENDOR_OGF_AUDIO, HCI_VCMD_OCF_SETUP_QOS) && gMM
             -I_ctl.mmiInfo[linkIndex].linkPara.QosServiceType == SERVICE_TYPE_GUARANTEED)
 3809   1          return TRUE;
 3810   1      
 3811   1        return FALSE;
 3812   1      }
 3813          
 3814          PUBLIC BOOL MMI_HCI_IsWriteLocalBdAddrBusy(void)
 3815          {
 3816   1        if(MMI_HCI_IsCmdInBusy(HCI_VCMD_AIROHA, MMI_EOF, HCI_VENDOR_OGF_GENERAL_V2, HCI_VCMD_OCF_GENERAL_WRITE_B
             -D_ADDR))
 3817   1          return TRUE;
 3818   1      
 3819   1        return FALSE;
 3820   1      }
 3821          
 3822          PRIVATE void MMI_HCI_AirohaCmd_ReconnectToIndex(MMIMsgType XDATA_PTR msgPtr)
 3823          {
 3824   1        if(MMI_Reconnect_ToUARTIndex(msgPtr->msgBodyPtr.hciVEvt.VPara.reconnectPara.reconnectIndex))
 3825   1        {
 3826   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_RECONNECT_TO_INDEX, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 3827   2        }
 3828   1        else
 3829   1        {
 3830   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_RECONNECT_TO_INDEX, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 3831   2        }
 3832   1      }
 3833          
 3834          PRIVATE void MMI_HCI_AirohaCmd_ReadBdAddr(MMIMsgType XDATA_PTR msgPtr)
 3835          {
 3836   1        MMIMsgType XDATA_PTR evtMsgPtr;
 3837   1      
 3838   1        UNUSED(msgPtr);
 3839   1      
 3840   1        if(evtMsgPtr = MMI_HCI_AirohaCmd_IssueSolicitedInd(UART_CMD_READ_BD_ADDR, sizeof(HCI_VCMD_PARA_READ_BDAD
             -DR)))
 3841   1        {
 3842   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_READ_BD_ADDR, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 63  

 3843   2          
 3844   2          OSMEM_memcpy_xdata_xdata((U8 XDATA_PTR)&evtMsgPtr->msgBodyPtr.hciVCmd.VPara.readBdAddrVEvtCmd.BdAddr, (
             -U8 XDATA_PTR)&gHC_ctl.BdAddr, sizeof(BD_ADDR_STRU));
 3845   2          MMI_SwitchEndianBDAddr((U8 XDATA_PTR)&evtMsgPtr->msgBodyPtr.hciVCmd.VPara.readBdAddrVEvtCmd.BdAddr);    
 3846   2          
 3847   2          MMI_HCI_AirohaCmd_SendToRemote(evtMsgPtr);
 3848   2        }
 3849   1        else
 3850   1        {
 3851   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_READ_BD_ADDR, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 3852   2        }
 3853   1      }
 3854          
 3855          PRIVATE void MMI_HCI_AirohaCmd_WriteDeviceName(MMIMsgType XDATA_PTR msgPtr)
 3856          {
 3857   1        if(msgPtr->paraLen > sizeof(HCI_VCMD_OPCODE_STRU))
 3858   1        {
 3859   2          msgPtr->paraLen -= sizeof(HCI_VCMD_OPCODE_STRU); //substract ofc and cmdCode
 3860   2          
 3861   2          if(MMI_SECTOR_WriteDeviceName(&msgPtr->msgBodyPtr.hciVEvt.VPara.writeDevNamePara.nameBegin, msgPtr->par
             -aLen))
 3862   2          {
 3863   3            MMI_HCI_AirohaCmd_SendResponse(UART_CMD_WRITE_DEVICE_NAME, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 3864   3            return;
 3865   3          }
 3866   2        }
 3867   1        MMI_HCI_AirohaCmd_SendResponse(UART_CMD_WRITE_DEVICE_NAME, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 3868   1      }
 3869          
 3870          PRIVATE void MMI_HCI_AirohaCmd_QueryLinkHistory(MMIMsgType XDATA_PTR msgPtr)
 3871          {
 3872   1        MMIMsgType XDATA_PTR evtMsgPtr;
 3873   1        U8 validLinkKeyCnt = 0;
 3874   1        U8 i;
 3875   1        U8 XDATA_PTR dataPtr;
 3876   1        
 3877   1        switch(msgPtr->msgBodyPtr.hciVEvt.VPara.queryLinkKeyPara.type)
 3878   1        {
 3879   2          case MMI_RESET_LINK_INFO:
 3880   2            for(i = 0; i < gMMI_nvram.storedLinkKeyCnt; i++)
 3881   2            {
 3882   3              if(gMMI_driver_variation_nvram.link_history_info[i].key_status == NVRAM_KEY_OK)
 3883   3              {
 3884   4                validLinkKeyCnt++;
 3885   4              }
 3886   3            }   
 3887   2            break;
 3888   2          case MMI_RESET_AIR_LINK_INFO:
 3889   2            for(i = 0; i < NVRAM_AIR_LINK_KEY_NO; i++)
 3890   2            {
 3891   3              if(gMMI_driver_variation_nvram.air_link_history_info[i].key_status == NVRAM_KEY_OK)
 3892   3              {
 3893   4                validLinkKeyCnt++;
 3894   4              }
 3895   3            }   
 3896   2            break;
 3897   2          case MMI_RESET_FAST_DONGLE_LINK_INFO:
 3898   2            if(gMMI_driver_variation_nvram.fast_dongle_link_history_info.key_status == NVRAM_KEY_OK)
 3899   2            {
 3900   3              validLinkKeyCnt = 1;
 3901   3            }
 3902   2            break;
 3903   2        }
 3904   1        
 3905   1        if( evtMsgPtr = MMI_HCI_AirohaCmd_IssueSolicitedInd(UART_CMD_QUERY_LINK_HISTORY, (U8)(validLinkKeyCnt * 
             -(1 + sizeof(BD_ADDR)))))
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 64  

 3906   1        {
 3907   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_QUERY_LINK_HISTORY, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 3908   2          
 3909   2          dataPtr = (U8 XDATA_PTR)&evtMsgPtr->msgBodyPtr.hciVCmd.VPara;
 3910   2          switch(msgPtr->msgBodyPtr.hciVEvt.VPara.queryLinkKeyPara.type)
 3911   2          {
 3912   3            case MMI_RESET_LINK_INFO:
 3913   3              for(i = 0; i < gMMI_nvram.storedLinkKeyCnt; i++)
 3914   3              {
 3915   4                if(gMMI_driver_variation_nvram.link_history_info[i].key_status == NVRAM_KEY_OK)
 3916   4                {
 3917   5                  dataPtr[0] = i;
 3918   5                  OSMEM_memcpy_xdata_xdata(&dataPtr[1], (U8 XDATA_PTR)&gMMI_driver_variation_nvram.link_history_info[
             -i].linkData.bdAddr[0], sizeof(BD_ADDR));
 3919   5                  MMI_SwitchEndianBDAddr(&dataPtr[1]);
 3920   5                  dataPtr += (1+sizeof(BD_ADDR));
 3921   5                }
 3922   4              }
 3923   3              break;
 3924   3            case MMI_RESET_AIR_LINK_INFO:
 3925   3              for(i = 0; i < NVRAM_AIR_LINK_KEY_NO; i++)
 3926   3              {
 3927   4                if(gMMI_driver_variation_nvram.air_link_history_info[i].key_status == NVRAM_KEY_OK)
 3928   4                {
 3929   5                  dataPtr[0] = i;
 3930   5                  OSMEM_memcpy_xdata_xdata(&dataPtr[1], (U8 XDATA_PTR)&gMMI_driver_variation_nvram.air_link_history_i
             -nfo[i].linkData.bdAddr[0], sizeof(BD_ADDR));
 3931   5                  MMI_SwitchEndianBDAddr(&dataPtr[1]);
 3932   5                  dataPtr += (1+sizeof(BD_ADDR));
 3933   5                }
 3934   4              }
 3935   3              break;
 3936   3            case MMI_RESET_FAST_DONGLE_LINK_INFO:
 3937   3              if(gMMI_driver_variation_nvram.fast_dongle_link_history_info.key_status == NVRAM_KEY_OK)
 3938   3              {
 3939   4                dataPtr[0] = 0;
 3940   4                OSMEM_memcpy_xdata_xdata(&dataPtr[1], (U8 XDATA_PTR)&gMMI_driver_variation_nvram.fast_dongle_link_hi
             -story_info.linkData.bdAddr[0], sizeof(BD_ADDR));
 3941   4                MMI_SwitchEndianBDAddr(&dataPtr[1]);
 3942   4                dataPtr += (1+sizeof(BD_ADDR));
 3943   4              }
 3944   3              break;
 3945   3          }
 3946   2          MMI_HCI_AirohaCmd_SendToRemote(evtMsgPtr);
 3947   2        }
 3948   1        else
 3949   1        {
 3950   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_QUERY_LINK_HISTORY, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 3951   2        }
 3952   1      }
 3953          
 3954          PRIVATE void MMI_HCI_AirohaCmd_Connectable(MMIMsgType XDATA_PTR msgPtr)
 3955          {
 3956   1        UNUSED(msgPtr);
 3957   1        MMI_ConnectabilityHandle(CMD_SET_CONNECTABLE);
 3958   1        MMI_HCI_AirohaCmd_SendResponse(UART_CMD_CONNECTABLE, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 3959   1      }
 3960          
 3961          PRIVATE void MMI_HCI_AirohaCmd_NoneConnectable(MMIMsgType XDATA_PTR msgPtr)
 3962          {
 3963   1        UNUSED(msgPtr);
 3964   1        MMI_ConnectabilityHandle(CMD_SET_NON_CONNECTABLE_ANYWAY);
 3965   1        MMI_HCI_AirohaCmd_SendResponse(UART_CMD_NONE_CONNECTABLE, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 3966   1      }
 3967          
 3968          PRIVATE void MMI_HCI_AirohaCmd_DisconnectLinkByBdAddr(MMIMsgType XDATA_PTR msgPtr)
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 65  

 3969          {
 3970   1        U8 linkIndex;
 3971   1      
 3972   1        MMI_SwitchEndianBDAddr((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVEvt.VPara.BdAddr);
 3973   1      
 3974   1        if((linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVEvt.VPara.BdAddr)) == MAX_MU
             -LTI_POINT_NO)
 3975   1        {
 3976   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_DISCONNECT_SPECIFIC_LINK, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 3977   2        }
 3978   1        else
 3979   1        {
 3980   2          MMI_ReleaseProfileLinkAndDetach(linkIndex);
 3981   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_DISCONNECT_SPECIFIC_LINK, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 3982   2        }
 3983   1      }
 3984          
 3985          PRIVATE void MMI_HCI_AirohaCmd_CheckChargerStatus(MMIMsgType XDATA_PTR msgPtr)
 3986          {
 3987   1        MMIMsgType XDATA_PTR evtMsgPtr;
 3988   1      
 3989   1        UNUSED(msgPtr);
 3990   1        if( evtMsgPtr = MMI_HCI_AirohaCmd_IssueSolicitedInd(UART_CMD_CHECK_CHARGER_STATUS, sizeof(HCI_VCMD_PARA_
             -CHECK_CHARGER)))
 3991   1        {
 3992   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_CHECK_CHARGER_STATUS, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 3993   2          evtMsgPtr->msgBodyPtr.hciVCmd.VPara.checkChargerVEvtCmd.chargerStatus = gMMI_ctl.mmiBatInfo.batStatus;
 3994   2          MMI_HCI_AirohaCmd_SendToRemote(evtMsgPtr);
 3995   2        }
 3996   1        else
 3997   1        {
 3998   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_CHECK_CHARGER_STATUS, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 3999   2        }
 4000   1      }
 4001          
 4002          PRIVATE void MMI_HCI_AirohaCmd_StopVoicePrompt(MMIMsgType XDATA_PTR msgPtr)
 4003          {
 4004   1        UNUSED(msgPtr);
 4005   1        MMI_DRV_SendVoicepromptStopCmd();
 4006   1        MMI_HCI_AirohaCmd_SendResponse(UART_CMD_STOP_VOICEPROMPT, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4007   1      }
 4008          
 4009          PRIVATE void MMI_HCI_AirohaCmd_PlayVoicePrompt(MMIMsgType XDATA_PTR msgPtr)
 4010          {
 4011   1        MMI_DRV_SendVoicePromptCmd(MEDIA_EVT_UART_CMD_RESERVE, msgPtr->msgBodyPtr.hciVEvt.VPara.playVPPara.vpInd
             -ex);
 4012   1        MMI_HCI_AirohaCmd_SendResponse(UART_CMD_PLAY_VOICE_PROMPT, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4013   1      }
 4014          
 4015          PRIVATE void MMI_HCI_AirohaCmd_QueryServiceIndex(MMIMsgType XDATA_PTR msgPtr)
 4016          {
 4017   1        MMIMsgType XDATA_PTR evtMsgPtr;
 4018   1      
 4019   1        UNUSED(msgPtr);
 4020   1        if( evtMsgPtr = MMI_HCI_AirohaCmd_IssueSolicitedInd(UART_CMD_QUERY_SERVICE_INDEX, sizeof(HCI_VCMD_PARA_Q
             -UERY_SERVICE_IND)))
 4021   1        {
 4022   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_QUERY_SERVICE_INDEX, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4023   2          evtMsgPtr->msgBodyPtr.hciVCmd.VPara.queryServiceIndVEvtCmd.serviceIndex = gMMI_ctl.serviceInd;
 4024   2          MMI_HCI_AirohaCmd_SendToRemote(evtMsgPtr);
 4025   2        }
 4026   1        else
 4027   1        {
 4028   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_QUERY_SERVICE_INDEX, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 4029   2        }
 4030   1      }
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 66  

 4031          
 4032          PRIVATE void MMI_HCI_AirohaCmd_VolumeSet(MMIMsgType XDATA_PTR msgPtr)
 4033          {
 4034   1        MMI_UartVolumeSet(&msgPtr->msgBodyPtr.hciVEvt.VPara.volSetPara);
 4035   1        MMI_HCI_AirohaCmd_SendResponse(UART_CMD_VOLUME_SET, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4036   1      }
 4037          
 4038          PRIVATE void MMI_HCI_AirohaCmd_PairingConfirm(MMIMsgType XDATA_PTR msgPtr)
 4039          {
 4040   1        MMI_HCI_SendConfirmationReply(msgPtr->msgBodyPtr.hciVEvt.VPara.pairingConfPara.isAccept, (U8 XDATA_PTR)&
             -msgPtr->msgBodyPtr.hciVEvt.VPara.pairingConfPara.BdAddr);
 4041   1        MMI_HCI_AirohaCmd_SendResponse(UART_CMD_PAIRING_CONFIRM, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4042   1      }
 4043          
 4044          PRIVATE void MMI_HCI_AirohaCmd_ChangeAudioSel(MMIMsgType XDATA_PTR msgPtr)
 4045          {
 4046   1        MMI_DRV_AudioSelCmd((DriverAudioSelCmd XDATA_PTR)&msgPtr->msgBodyPtr.hciVEvt.VPara.dataBegin);
 4047   1        MMI_HCI_AirohaCmd_SendResponse(UART_CMD_CHANGE_AUDIO_SEL, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4048   1      }
 4049          
 4050          PRIVATE void MMI_HCI_AirohaCmd_SetAVRCPVolume(MMIMsgType XDATA_PTR msgPtr)
 4051          {
 4052   1      #ifdef AVRCP_Profile
 4053   1        MMI_AVRCP_UartSetAbsVol(msgPtr->msgBodyPtr.hciVEvt.VPara.avrcpVolPara.vol);
 4054   1        MMI_HCI_AirohaCmd_SendResponse(UART_CMD_SET_AVRCP_VOL, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4055   1      #else
                 UNUSED(msgPtr);
                 MMI_HCI_AirohaCmd_SendResponse(UART_CMD_SET_AVRCP_VOL, HCI_VEVT_OCF_RESULT_CODE_FAIL);
               #endif
 4059   1      }
 4060          
 4061          PRIVATE void MMI_HCI_AirohaCmd_HighQualityCodec(MMIMsgType XDATA_PTR msgPtr)
 4062          {
 4063   1      #ifdef A2DP_Profile
 4064   1        MMI_A2DP_HighQualityCodecHandle(msgPtr->msgBodyPtr.hciVEvt.VPara.hqCodecPara.settings);
 4065   1        MMI_HCI_AirohaCmd_SendResponse(UART_CMD_HIGH_QUALITY_AUDIO_CODEC, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4066   1      #else
                 UNUSED(msgPtr);
                 MMI_HCI_AirohaCmd_SendResponse(UART_CMD_HIGH_QUALITY_AUDIO_CODEC, HCI_VEVT_OCF_RESULT_CODE_FAIL);
               #endif
 4070   1      }
 4071          
 4072          PRIVATE void MMI_HCI_AirohaCmd_QueryLinkKeyByBdAddr(MMIMsgType XDATA_PTR msgPtr)
 4073          {
 4074   1        MMIMsgType XDATA_PTR evtMsgPtr;
 4075   1        LinkHistoryType XDATA_PTR linkListPtr;
 4076   1        
 4077   1        MMI_SwitchEndianBDAddr((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVEvt.VPara.BdAddr);
 4078   1        if(linkListPtr = MMI_LinkKey_SearchHistoryByBdAddr((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVEvt.VPara.BdAdd
             -r, TRUE, FALSE))
 4079   1        {
 4080   2          if(evtMsgPtr = MMI_HCI_AirohaCmd_IssueSolicitedInd(UART_CMD_QUERY_LINKKEY_BY_BDADDR, 16))
 4081   2          {
 4082   3            MMI_HCI_AirohaCmd_SendResponse(UART_CMD_QUERY_LINKKEY_BY_BDADDR, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4083   3            
 4084   3            OSMEM_memcpy_xdata_xdata(&evtMsgPtr->msgBodyPtr.hciVCmd.VPara.queryLinkKeyVEvtCmd.linkKey, (U8 XDATA_P
             -TR)&linkListPtr->linkData.linkKey[0], 16);
 4085   3            MMI_HCI_AirohaCmd_SendToRemote(evtMsgPtr);
 4086   3            return;
 4087   3          }
 4088   2        }
 4089   1        
 4090   1        MMI_HCI_AirohaCmd_SendResponse(UART_CMD_QUERY_LINKKEY_BY_BDADDR, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 4091   1      }
 4092          
 4093          PRIVATE void MMI_HCI_AirohaCmd_I2CRead(MMIMsgType XDATA_PTR msgPtr)
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 67  

 4094          {
 4095   1        MMIMsgType XDATA_PTR evtMsgPtr;
 4096   1        
 4097   1        if(evtMsgPtr = MMI_HCI_AirohaCmd_IssueSolicitedInd(UART_CMD_I2C_READ, msgPtr->msgBodyPtr.hciVEvt.VPara.i
             -2cReadPara.dataLength))
 4098   1        {   
 4099   2          if(I2C_StdReadChunk(msgPtr->msgBodyPtr.hciVEvt.VPara.i2cReadPara.deviceAddr, 
 4100   2                    msgPtr->msgBodyPtr.hciVEvt.VPara.i2cReadPara.regAddr,
 4101   2                    msgPtr->msgBodyPtr.hciVEvt.VPara.i2cReadPara.dataLength, 
 4102   2                    &evtMsgPtr->msgBodyPtr.hciVCmd.VPara.i2cReadVEvtCmd.i2cDataBegin))
 4103   2          {
 4104   3            OSMEM_Put(evtMsgPtr);
 4105   3            goto I2C_READ_FAIL;
 4106   3          }
 4107   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_I2C_READ, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4108   2          MMI_HCI_AirohaCmd_SendToRemote(evtMsgPtr);
 4109   2        }
 4110   1        else
 4111   1        {
 4112   2          I2C_READ_FAIL:
 4113   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_I2C_READ, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 4114   2        }
 4115   1      }
 4116          
 4117          PRIVATE void MMI_HCI_AirohaCmd_I2CWrite(MMIMsgType XDATA_PTR msgPtr)
 4118          {
 4119   1        if(I2C_StdWriteChunk(msgPtr->msgBodyPtr.hciVEvt.VPara.i2cWritePara.deviceAddr, 
 4120   1                  msgPtr->msgBodyPtr.hciVEvt.VPara.i2cWritePara.regAddr, 
 4121   1                  msgPtr->msgBodyPtr.hciVEvt.VPara.i2cWritePara.dataLength, 
 4122   1                  &msgPtr->msgBodyPtr.hciVEvt.VPara.i2cWritePara.dataBegin))
 4123   1        {
 4124   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_I2C_WRITE, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 4125   2        }
 4126   1        else
 4127   1        {
 4128   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_I2C_WRITE, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4129   2        }
 4130   1      }
 4131          
 4132          PRIVATE void MMI_HCI_AirohaCmd_GetRemoteName(MMIMsgType XDATA_PTR msgPtr)
 4133          {
 4134   1          MMIMsgType XDATA_PTR evtMsgPtr;
 4135   1        U8 linkIndex;
 4136   1      
 4137   1        MMI_SwitchEndianBDAddr((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVEvt.VPara.BdAddr);
 4138   1        if((linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVEvt.VPara.BdAddr)) == MAX_MU
             -LTI_POINT_NO)
 4139   1        {
 4140   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_GET_REMOTE_NAME, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 4141   2        }
 4142   1        else
 4143   1        {
 4144   2          if(!gMMI_ctl.mmiInfo[linkIndex].linkPara.remoteName[0])
 4145   2          {
 4146   3            MMI_HCI_AirohaCmd_SendResponse(UART_CMD_GET_REMOTE_NAME, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 4147   3          }
 4148   2          else
 4149   2          {
 4150   3            U8 nameLength = 0;
 4151   3            while(gMMI_ctl.mmiInfo[linkIndex].linkPara.remoteName[nameLength] && nameLength < MAX_REMOTE_NAME_LEN)
 4152   3            {
 4153   4              nameLength++;
 4154   4            }
 4155   3            
 4156   3            if(evtMsgPtr = MMI_HCI_AirohaCmd_IssueSolicitedInd(UART_CMD_GET_REMOTE_NAME, sizeof(BD_ADDR) + nameLen
             -gth + 1))
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 68  

 4157   3            {
 4158   4              MMI_HCI_AirohaCmd_SendResponse(UART_CMD_GET_REMOTE_NAME, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4159   4              OSMEM_memcpy_xdata_xdata(&evtMsgPtr->msgBodyPtr.hciVCmd.VPara.getRemoteNemeVEvtCmd.BdAddr, &gMMI_ctl.
             -mmiInfo[linkIndex].bdAddr[0], sizeof(BD_ADDR));
 4160   4              OSMEM_memcpy_xdata_xdata(&evtMsgPtr->msgBodyPtr.hciVCmd.VPara.getRemoteNemeVEvtCmd.nameBegin, &gMMI_c
             -tl.mmiInfo[linkIndex].linkPara.remoteName[0], nameLength);
 4161   4              MMI_HCI_AirohaCmd_SendToRemote(evtMsgPtr);
 4162   4            }
 4163   3                  else
 4164   3                  {
 4165   4                      MMI_HCI_AirohaCmd_SendResponse(UART_CMD_GET_REMOTE_NAME, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 4166   4                  }
 4167   3          }
 4168   2        }
 4169   1      }
 4170          
 4171          PRIVATE void MMI_HCI_AirohaCmd_GetFWVersion(MMIMsgType XDATA_PTR msgPtr)
 4172          {
 4173   1          MMIMsgType XDATA_PTR evtMsgPtr;
 4174   1        SECTOR_AE_INFO_STRU CODE_PTR pAeInfo;
 4175   1      
 4176   1        pAeInfo = (SECTOR_AE_INFO_STRU CODE_PTR)GET_SECTOR_TOOLMISC_ADDR(SECTOR_AE_INFO);
 4177   1      
 4178   1      
 4179   1          UNUSED(msgPtr);
 4180   1      
 4181   1          if(evtMsgPtr = MMI_HCI_AirohaCmd_IssueSolicitedInd(UART_CMD_GET_FW_VERSION, sizeof(HCI_VCMD_PARA_GET_
             -FW_VERSION)))
 4182   1          {
 4183   2              MMI_HCI_AirohaCmd_SendResponse(UART_CMD_GET_FW_VERSION, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4184   2          
 4185   2          evtMsgPtr->msgBodyPtr.hciVCmd.VPara.fwVersionVEvtCmd.majorVersion = pAeInfo->AeInfo.verInfo.majorVersio
             -n;
 4186   2          evtMsgPtr->msgBodyPtr.hciVCmd.VPara.fwVersionVEvtCmd.minorVersion = pAeInfo->AeInfo.verInfo.minorVersio
             -n;
 4187   2          evtMsgPtr->msgBodyPtr.hciVCmd.VPara.fwVersionVEvtCmd.buildNumber = (U8)(pAeInfo->AeInfo.verInfo.buildNu
             -mber);
 4188   2              MMI_HCI_AirohaCmd_SendToRemote(evtMsgPtr);
 4189   2          }
 4190   1          else
 4191   1          {
 4192   2              MMI_HCI_AirohaCmd_SendResponse(UART_CMD_GET_FW_VERSION, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 4193   2          }
 4194   1      }
 4195          
 4196          
 4197          PRIVATE void MMI_HCI_AirohaCmd_DSPFreqSelect(MMIMsgType XDATA_PTR msgPtr)
 4198          {
 4199   1        #ifdef LINEIN_ENABLE
 4200   1        MMI_LineIn_SetDSPSoundbarDownsampleSel(msgPtr->msgBodyPtr.hciVEvt.VPara.DSPSoundbarDownsampleSel);
 4201   1        MMI_HCI_AirohaCmd_SendResponse(UART_CMD_DSP_FREQUENCT_SELECT, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4202   1        #else
                 UNUSED(msgPtr);
                 MMI_HCI_AirohaCmd_SendResponse(UART_CMD_DSP_FREQUENCT_SELECT, HCI_VEVT_OCF_RESULT_CODE_FAIL);
                 #endif
 4206   1      }
 4207          
 4208          PRIVATE void MMI_HCI_AirohaCmd_ProfileSupport(MMIMsgType XDATA_PTR msgPtr)
 4209          {
 4210   1        U8 linkIndex;
 4211   1        U8 profileId = msgPtr->msgBodyPtr.hciVEvt.VPara.profileSupportPara.profileId;
 4212   1      
 4213   1        MMI_SwitchEndianBDAddr((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVEvt.VPara.profileSupportPara.BdAddr);
 4214   1        if((linkIndex=MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVEvt.VPara.profileSupportPara.B
             -dAddr))==MAX_MULTI_POINT_NO || profileId != PROFILE_OBJECT_PUSH)
 4215   1        {
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 69  

 4216   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_SET_PROFILE_SUPPORT_STATUS, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 4217   2        }
 4218   1        else
 4219   1        {
 4220   2          gMMI_ctl.mmiInfo[linkIndex].linkPara.isOppProhibited = (msgPtr->msgBodyPtr.hciVEvt.VPara.profileSupport
             -Para.isSupported)?FALSE:TRUE;
 4221   2          MMI_HCI_AirohaCmd_SendResponse(UART_CMD_SET_PROFILE_SUPPORT_STATUS, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4222   2        }
 4223   1      }
 4224          
 4225          PRIVATE void MMI_HCI_AirohaCmd_FindMyAccessory(MMIMsgType XDATA_PTR msgPtr)
 4226          {
 4227   1        UNUSED(msgPtr);
 4228   1        MMI_PushMediaEvent(MEDIA_EVT_KEY_FIND_MY_ACCESSORY);
 4229   1        MMI_HCI_AirohaCmd_SendResponse(UART_CMD_FIND_MY_ACCESSORY, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4230   1      }
 4231          
 4232          PRIVATE void MMI_HCI_AirohaCmd_Inquiry(MMIMsgType XDATA_PTR msgPtr)
 4233          {
 4234   1      #ifdef MMI_INQUIRY_CMD
                 U8 status;
                 if (MMI_INQ_StartInquiry(msgPtr))
                 {
                   status = HCI_VEVT_OCF_RESULT_CODE_FAIL;
                 }
                 else
                 {
                   status = HCI_VEVT_OCF_RESULT_CODE_SUCCESS;
                 }
                 MMI_HCI_AirohaCmd_SendResponse(UART_CMD_INQUIRY, status);
               #else
 4246   1        UNUSED(msgPtr);
 4247   1      #endif
 4248   1      }
 4249          
 4250          PRIVATE void MMI_HCI_AirohaCmd_CreateConnection(MMIMsgType XDATA_PTR msgPtr)
 4251          {
 4252   1      #ifdef MMI_CREATE_CONNECTION_CMD
                 U8 linkIndex;
                 U8 XDATA_PTR ptr1 = (U8 XDATA_PTR)msgPtr->msgBodyPtr.hciVCmd.VPara.createConnCmd.bd_addr.member;
                 
                 MMI_SwitchEndianBDAddr(ptr1);
                 if((linkIndex = MMI_GetEmptyLinkIndex(ptr1, TRUE)) < MAX_MULTI_POINT_NO)
                 {
                   MMI_HCI_SendCreateConnection (  linkIndex,
                                   ptr1, 
                                   RECONNECT_USER_INIT, 
                                   ptr1);//cod is dont care
                 }
               
                 MMI_HCI_AirohaCmd_SendResponse(UART_CMD_CREATE_CONNECTION, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
               #else
 4267   1        UNUSED(msgPtr);
 4268   1      #endif
 4269   1      }
 4270          
 4271          PRIVATE void MMI_HCI_AirohaCmd_UnSupported(MMIMsgType XDATA_PTR msgPtr)
 4272          {
 4273   1        MMI_HCI_AirohaCmd_SendResponse(msgPtr->msgBodyPtr.hciVEvt.VOpCode.VCmdOcf, HCI_VEVT_OCF_RESULT_CODE_FAIL
             -);
 4274   1      }
 4275          
 4276          PRIVATE void MMI_HCI_AirohaCmd_KeyEvent(MMIMsgType XDATA_PTR msgPtr)
 4277          {
 4278   1        U16 keyEventCode; 
 4279   1        U8 linkIndex = 0;
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 70  

 4280   1      
 4281   1        if(msgPtr->paraLen == 8  || msgPtr->paraLen == 9)
 4282   1        {
 4283   2          MMI_SwitchEndianBDAddr((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVEvt.VPara.BdAddr);
 4284   2          if((linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVEvt.VPara.BdAddr)) == MAX_M
             -ULTI_POINT_NO)
 4285   2          {
 4286   3            UART_CMD_SEND_FAIL:
 4287   3            MMI_HCI_AirohaCmd_SendResponse(msgPtr->msgBodyPtr.hciVEvt.VOpCode.VCmdOcf, HCI_VEVT_OCF_RESULT_CODE_FA
             -IL);
 4288   3            return;
 4289   3          }
 4290   2        }
 4291   1        else if(msgPtr->paraLen == 2)
 4292   1        {
 4293   2          linkIndex = gMMI_ctl.serviceInd;
 4294   2        }
 4295   1      
 4296   1        switch(msgPtr->msgBodyPtr.hciVEvt.VOpCode.VCmdOcf)
 4297   1        {
 4298   2          case KEY_DIALMEM:
 4299   2            #if defined HFP_Profile
 4300   2            if(MMI_HFP_SetMemoryDialIndex(linkIndex, msgPtr->msgBodyPtr.hciVEvt.VPara.dialMemPara.index))
 4301   2              break;
 4302   2            #endif
 4303   2            goto UART_CMD_SEND_FAIL;
 4304   2      
 4305   2          case KEY_DIALNUM:
 4306   2            #if defined HFP_Profile
 4307   2            if(MMI_HFP_SetDialNumber(linkIndex, &msgPtr->msgBodyPtr.hciVEvt.VPara.dialNumPara.length, (U8)(msgPtr-
             ->msgBodyPtr.hciVEvt.VPara.dialNumPara.length+1)))
 4308   2              break;
 4309   2            #endif
 4310   2            goto UART_CMD_SEND_FAIL;
 4311   2          
 4312   2          case KEY_SEND_DTMF:
 4313   2            #if defined HFP_Profile
 4314   2            if(MMI_HFP_SetDTMF(linkIndex, msgPtr->msgBodyPtr.hciVEvt.VPara.hfpDTMFIndex))
 4315   2              break;
 4316   2            #endif
 4317   2            goto UART_CMD_SEND_FAIL;
 4318   2      
 4319   2          case KEY_RESET_PAIRED_DEVICES:
 4320   2            gMMI_ctl.driverCtl.resetLinkType = msgPtr->msgBodyPtr.hciVEvt.VPara.resetLinkType;
 4321   2            break;
 4322   2        }
 4323   1      
 4324   1        keyEventCode = (U16)msgPtr->msgBodyPtr.hciVEvt.VOpCode.VCmdOcf;
 4325   1      
 4326   1        if(keyEventCode >= KEY_TOTAL_NO)
 4327   1        {
 4328   2          goto UART_CMD_SEND_FAIL;
 4329   2        }
 4330   1      
 4331   1        if (((keyEventCode != KEY_BUTTONLOCKTOGGLE) && MMI_DRV_IsButtonLocked())
 4332   1           || !MMI_DRV_IsButtonLocked() && MMI_IGNORE_KEYEVENT_JUST_ENABLE_LED_FEAT)
 4333   1        {
 4334   2          goto UART_CMD_SEND_FAIL;
 4335   2        }
 4336   1      
 4337   1        if ((keyEventCode = MMI_DRV_CheckKeyValid(keyEventCode)) == KEY_INVALID)
 4338   1        {
 4339   2          goto UART_CMD_SEND_FAIL;
 4340   2        }
 4341   1        
 4342   1        if( keyEventCode == KEY_CHECK_BATTERY_STATUS)
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 71  

 4343   1        {
 4344   2          MMIMsgType XDATA_PTR evtMsgPtr;
 4345   2          
 4346   2          if(evtMsgPtr = MMI_HCI_AirohaCmd_IssueSolicitedInd(KEY_CHECK_BATTERY_STATUS, sizeof(HCI_VCMD_PARA_CHECK
             -_BAT)))
 4347   2          {
 4348   3            MMI_HCI_AirohaCmd_SendResponse(KEY_CHECK_BATTERY_STATUS, HCI_VEVT_OCF_RESULT_CODE_SUCCESS );
 4349   3            MMI_PushMediaEvent(KEY_CHECK_BATTERY_STATUS);
 4350   3            evtMsgPtr->msgBodyPtr.hciVCmd.VPara.checkBatVEvtCmd.batStatus = MMI_BAT_GetLevelInQuater();
 4351   3            MMI_HCI_AirohaCmd_SendToRemote(evtMsgPtr);      
 4352   3          }
 4353   2          else
 4354   2          {
 4355   3            goto UART_CMD_SEND_FAIL;
 4356   3          }
 4357   2        }
 4358   1        else
 4359   1        {
 4360   2          MMI_HCI_AirohaCmd_SendResponse(msgPtr->msgBodyPtr.hciVEvt.VOpCode.VCmdOcf, HCI_VEVT_OCF_RESULT_CODE_SUC
             -CESS );
 4361   2          MMI_PushMediaEvent(keyEventCode);
 4362   2          MMI_DRV_KeyEventHandler(linkIndex, keyEventCode);
 4363   2        }
 4364   1      }
 4365          
 4366          PRIVATE void MMI_HCI_AirohaCmd_SecondKeyEvent(MMIMsgType XDATA_PTR msgPtr)
 4367          {
 4368   1        U16 keyEventCode; 
 4369   1        U8 linkIndex = 0;
 4370   1      
 4371   1        if(msgPtr->paraLen == 10  || msgPtr->paraLen == 11)
 4372   1        {
 4373   2          MMI_SwitchEndianBDAddr((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVEvt.VPara.extendedPara.BdAddr);
 4374   2          if((linkIndex = MMI_GetLinkIndexByBdA((U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVEvt.VPara.extendedPara.BdAd
             -dr)) == MAX_MULTI_POINT_NO)
 4375   2          {
 4376   3            UART_CMD_SEND_FAIL:
 4377   3            MMI_HCI_AirohaCmd_ExtSendResponse(HCI_VENDOR_OCF_SECOND_KEY_EVENT_CMD, msgPtr->msgBodyPtr.hciVEvt.VPar
             -a.extendedPara.OCF, HCI_VEVT_OCF_RESULT_CODE_FAIL);
 4378   3            return;
 4379   3          }
 4380   2        }
 4381   1        else if(msgPtr->paraLen == 4)
 4382   1        {
 4383   2          linkIndex = gMMI_ctl.serviceInd;
 4384   2        }
 4385   1      
 4386   1        keyEventCode = msgPtr->msgBodyPtr.hciVEvt.VPara.extendedPara.OCF;
 4387   1      
 4388   1        if(keyEventCode >= KEY_SECOND_TABLE_END)
 4389   1        {
 4390   2          goto UART_CMD_SEND_FAIL;
 4391   2        }
 4392   1      
 4393   1        if (((keyEventCode != KEY_BUTTONLOCKTOGGLE) && MMI_DRV_IsButtonLocked())
 4394   1           || !MMI_DRV_IsButtonLocked() && MMI_IGNORE_KEYEVENT_JUST_ENABLE_LED_FEAT)
 4395   1        {
 4396   2          goto UART_CMD_SEND_FAIL;
 4397   2        }
 4398   1      
 4399   1        if ((keyEventCode = MMI_DRV_CheckKeyValid(keyEventCode)) == KEY_INVALID)
 4400   1        {
 4401   2          goto UART_CMD_SEND_FAIL;
 4402   2        }
 4403   1      
 4404   1        MMI_HCI_AirohaCmd_ExtSendResponse(HCI_VENDOR_OCF_SECOND_KEY_EVENT_CMD, msgPtr->msgBodyPtr.hciVEvt.VPara.
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 72  

             -extendedPara.OCF, HCI_VEVT_OCF_RESULT_CODE_SUCCESS);
 4405   1        MMI_PushMediaEvent(keyEventCode);
 4406   1        MMI_DRV_KeyEventHandler(linkIndex, keyEventCode);
 4407   1      }
 4408          
 4409          PRIVATE void MMI_HCI_UpdateRole(U8 linkIndex, U8 role)
 4410          {
 4411   1        gMMI_ctl.mmiInfo[linkIndex].linkPara.role = role;
 4412   1      }
 4413          
 4414          PUBLIC void MMI_HCI_SetInquiryOnGoing(U8 inquiryState)
 4415          {
 4416   1        gMMI_ctl.inquiryState = inquiryState;
 4417   1      }
 4418          
 4419          PUBLIC BOOL MMI_HCI_IsInquiryOnGoing(void)
 4420          {
 4421   1        return (gMMI_ctl.inquiryState != INQUIRY_IDLE)?TRUE:FALSE;
 4422   1      }
 4423          
 4424          PUBLIC U8 MMI_HCI_GetInquiryState(void)
 4425          {
 4426   1        return gMMI_ctl.inquiryState;
 4427   1      }
 4428          
 4429          PRIVATE MMIMsgType XDATA_PTR MMI_GetPassThroughDataMem(U8 command_op, U8 memLen)
 4430          {
 4431   1        MMIMsgType XDATA_PTR msgPtr;
 4432   1      
 4433   1        msgPtr = (MMIMsgType XDATA_PTR)SYS_MemoryGet(memLen);
 4434   1      
 4435   1        if(msgPtr != (MMIMsgType XDATA_PTR)NULL)
 4436   1        {
 4437   2          OSMEM_memset_xdata((U8 XDATA_PTR)msgPtr, 0, (memLen > OSMEM1_BLKSIZE) ? OSMEM2_SMALL_TX_BLKSIZE : OSMEM
             -1_BLKSIZE);
 4438   2      
 4439   2          msgPtr->dataOffset = CMD_OFFSET;
 4440   2          msgPtr->msgOpcode =  command_op;
 4441   2        }
 4442   1      
 4443   1        return msgPtr;
 4444   1      }
 4445          
 4446          PUBLIC void MMI_HCI_AirohaCmd_PassThroughData(U8 linkIndex, U8 cmdOcf, U8 cmdOgf, MMIMsgType XDATA_PTR ai
             -rCmdPtr)
 4447          {
 4448   1        MMIMsgType XDATA_PTR msgPtr;
 4449   1        U8 memLen = (airCmdPtr->paraLen + sizeof(msgPtr->reserveByte) + sizeof(msgPtr->msgBodyPtr.hciVCmd.VPara.
             -passThroughCmd.bdAddr) + 4);
 4450   1      
 4451   1        if(msgPtr = MMI_GetPassThroughDataMem(HCI_VCMD_AIROHA_TO_UART, memLen))
 4452   1        {
 4453   2          MMI_PowerSaving(FALSE, MMI_PWRSAVING_ENABLE_ADV, linkIndex);
 4454   2          msgPtr->paraLen = airCmdPtr->paraLen + sizeof(msgPtr->msgBodyPtr.hciVCmd.VPara.passThroughCmd.bdAddr);
 4455   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOcf = cmdOcf;
 4456   2          msgPtr->msgBodyPtr.hciVCmd.VOpCode.VCmdOgf = cmdOgf;
 4457   2          //Set Bd Address
 4458   2          OSMEM_memcpy_xdata_xdata( (U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVCmd.VPara.passThroughCmd.bdAddr,
 4459   2                        MMI_GetBdAddrByLinkIndex(linkIndex),
 4460   2                        sizeof(msgPtr->msgBodyPtr.hciVCmd.VPara.passThroughCmd.bdAddr));
 4461   2      
 4462   2          //Set AirApp Data
 4463   2          OSMEM_memcpy_xdata_xdata( (U8 XDATA_PTR)&msgPtr->msgBodyPtr.hciVCmd.VPara.passThroughCmd.dataStart,
 4464   2                        (U8 XDATA_PTR)&airCmdPtr->msgBodyPtr.hciVEvt.VPara.dataBegin,
 4465   2                        (airCmdPtr->paraLen - sizeof(HCI_VCMD_OPCODE_STRU)));
 4466   2          MMI_HCI_AirohaCmd_SendToRemote(msgPtr);
C251 COMPILER V5.57.0,  MMI_HCI                                                            08/11/20  06:33:41  PAGE 73  

 4467   2        }
 4468   1      }
 4469          
 4470          PUBLIC void MMI_HCI_Init(void)
 4471          {
 4472   1        gMMI_ctl.FlashUpdateState = FLASH_UPDATE_OFF;
 4473   1      }
 4474          
 4475          PUBLIC U8 MMI_HCI_GetFlashUpdateState(void)
 4476          {
 4477   1        return gMMI_ctl.FlashUpdateState;
 4478   1      }
 4479          
 4480          PUBLIC void MMI_HCI_SetFlashUpdateState(U8 state)
 4481          {
 4482   1        gMMI_ctl.FlashUpdateState = state;
 4483   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =     16086     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        16     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       496     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
