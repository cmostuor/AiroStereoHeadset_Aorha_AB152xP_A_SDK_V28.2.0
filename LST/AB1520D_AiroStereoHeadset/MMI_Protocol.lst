C251 COMPILER V5.57.0,  MMI_Protocol                                                       08/11/20  06:33:22  PAGE 1   


C251 COMPILER V5.57.0, COMPILATION OF MODULE MMI_Protocol
OBJECT MODULE PLACED IN .\output\AB1520D_AiroStereoHeadset\MMI_Protocol.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE source\MMI\MMI_Protocol.c XSMALL HPTR FUNCTIONS(REENTRANT) ROM(HUGE) W
                    -ARNINGLEVEL(3) OPTIMIZE(9,SPEED) BROWSE ORDER INCDIR(.\source\COMMON;.\source\SECTOR;.\source\ABSDRIVER;.\source\OS;.\so
                    -urce\HC;.\source\LM;.\source\LC;.\source\ROM;.\source\ROM\COMMON;.\source\ROM\OS;.\source\ROM\HC;.\source\ROM\LL;.\sourc
                    -e\ROM\LC;.\source\ROM\HAL;.\source\ROM\KERNEL;.\source\ROM\DRIVER;.\source\ROM\L2CAP;.\source\ROM\GAP;.\source\ROM\MMI_L
                    -E;.\source\ROM\SECTOR;.\source\ROM\SECTOR\Config0;.\source\SECTOR\Config0;.\source\SECTOR\Config1;.\source\SECTOR\DspDat
                    -a;.\source\SECTOR\Runtime;.\source\SECTOR\VoiceData;.\source\SECTOR\SectorBoundary;.\source\SECTOR\ToolMisc) DEFINE(FLAS
                    -H_INIT=1,AB1520D,MIGRATE_ROM_TO_FLASH,DFU_LOADER_IN_BOOT_CODE,TWS_SETTINGS) DEBUG PRINT(.\LST\AB1520D_AiroStereoHeadset\
                    -MMI_Protocol.lst) TABS(2) OBJECT(.\output\AB1520D_AiroStereoHeadset\MMI_Protocol.obj) 

stmt  level    source

    1          #include "reside_flash.inc"
    2          
    3          #define _MMI_PROTOCOL_C_
    4          
    5          #include "rc.h"
    6          #include "bt_config_profile.h"
    7          #include "os_flash.h"
    8          #include "MMI.h"
    9          #include "MMI_State.h"
   10          #include "MMI_Driver.h"
   11          #include "MMI_Protocol.h"
   12          #include "MMI_SDAP.h"
   13          #include "MMI_A2DP.h"
   14          #include "MMI_HFP.h"
   15          #include "MMI_HCI.h"
   16          #include "MMI_AVRCP.h"
   17          #include "MMI_AirModule.h"
   18          #include "MMI_Timer.h"
   19          #include "MMI_Reconnect.h"
   20          #include "MMI_PSM.h"
   21          #include "..\L2CAP\L2CAP_Interface.h"
   22          
   23          #include "..\A2DP\A2DP_Interface.h"
   24          #include "..\AVRCP\AVRCP_Interface.h"
   25          
   26          #ifdef HID_Profile
               #include "MMI_HID.h"
               #endif
   29          
   30          OSMQ XDATA OSMQ_Protocol_Event_To_MMI[MAX_MULTI_POINT_NO];
   31          
   32          PUBLIC void MMI_PROTOCOL_Init(void)
   33          {
   34   1        if((gMMI_driver_variation_nvram.misc_para.init.isMiscEnabled & IS_MULTIPOINTS_ENABLE))
   35   1        {
   36   2          gMMI_ctl.currentSupportDeviceNo = MMI_MAX_PAGE_DEVICE;
   37   2        }
   38   1        else
   39   1        {
   40   2          gMMI_ctl.currentSupportDeviceNo = 1;
   41   2        }
   42   1      }
   43          
   44          PUBLIC void MMI_PROTOCOL_EventHandler(void)
   45          {
   46   1        U8 linkIndex, entries, passiveConnCnt;
   47   1        MMIMsgType XDATA_PTR msgPtr;
   48   1      
   49   1        for (linkIndex = 0; linkIndex < MAX_MULTI_POINT_NO; linkIndex++)
   50   1        {
   51   2          passiveConnCnt = 0;
   52   2          entries = OSMQ_Entries(OSMQ_Protocol_Event_To_MMI_ptr[linkIndex]);
C251 COMPILER V5.57.0,  MMI_Protocol                                                       08/11/20  06:33:22  PAGE 2   

   53   2          while(entries--)
   54   2          {
   55   3            msgPtr = (MMIMsgType XDATA_PTR)OSMQ_Get(OSMQ_Protocol_Event_To_MMI_ptr[linkIndex]);
   56   3      
   57   3            if(MMI_IsActiveLink(linkIndex))
   58   3            {
   59   4              if(msgPtr->eventCode == PROTOCOL_EVT_TO_MMI_AUTHENTICATION_REQ && msgPtr->msgBodyPtr.protocolAuthReqE
             -vt.isPassive)
   60   4              {
   61   5                passiveConnCnt++;
   62   5              }
   63   4      
   64   4              OSMQ_Put(OSMQ_Protocol_Event_To_MMI_ptr[linkIndex], (U8 XDATA_PTR)msgPtr);
   65   4      
   66   4              if(gMMI_ctl.mmiTimerInfo.connTimer[linkIndex].connectionPowerSavingTimer == (OST XDATA_PTR)NULL)
   67   4              {
   68   5                SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.connTimer[linkIndex].connectionPowerSavingTimer, ONE_SEC * 30);
   69   5                MMI_PowerSaving(FALSE, MMI_PWRSAVING_PROFILE_CONNECTION, linkIndex);
   70   5              }
   71   4            }
   72   3            else
   73   3            {
   74   4              OSMEM_Put((U8 XDATA_PTR)msgPtr);
   75   4              MMI_PowerSaving(TRUE, MMI_PWRSAVING_PROFILE_CONNECTION, linkIndex);
   76   4            }
   77   3          }
   78   2      
   79   2          if (msgPtr = (MMIMsgType XDATA_PTR)OSMQ_Get(OSMQ_Protocol_Event_To_MMI_ptr[linkIndex]))
   80   2          {
   81   3            switch (msgPtr->eventCode)
   82   3            {
   83   4              case PROTOCOL_EVT_TO_MMI_AUTHENTICATION_REQ:
   84   4                if(passiveConnCnt && msgPtr->msgBodyPtr.protocolAuthReqEvt.psm != PSM_SDP && !msgPtr->msgBodyPtr.pro
             -tocolAuthReqEvt.isPassive) // GetRemote Request
   85   4                {
   86   5                  UpperLayer_SendAuthenticationResult((L2CAP_CHANNEL_HDL)msgPtr->msgBodyPtr.protocolAuthReqEvt.l2capC
             -hannelHdl, L2CAP_STATUS_CONNECTION_REFUSED_SECURITY_BLOCK);
   87   5                  break;
   88   5                }
   89   4                msgPtr->eventCode = PROTOCOL_EVT_TO_MMI_AUTHENTICATION_ONGOING;
   90   4                if(msgPtr->msgBodyPtr.protocolAuthReqEvt.isPassive)
   91   4                {
   92   5                  MMI_TIMER_ReleaseDetachTimer(linkIndex);
   93   5                  gMMI_ctl.mmiInfo[linkIndex].linkPara.miscMask &= ~MMI_ACTIVE_CONNECT;
   94   5                }
   95   4              case PROTOCOL_EVT_TO_MMI_AUTHENTICATION_ONGOING:
   96   4                if(passiveConnCnt && msgPtr->msgBodyPtr.protocolAuthReqEvt.psm != PSM_SDP && !msgPtr->msgBodyPtr.pro
             -tocolAuthReqEvt.isPassive) // GetRemote Request
   97   4                {
   98   5                  UpperLayer_SendAuthenticationResult((L2CAP_CHANNEL_HDL)msgPtr->msgBodyPtr.protocolAuthReqEvt.l2capC
             -hannelHdl, L2CAP_STATUS_CONNECTION_REFUSED_SECURITY_BLOCK);
   99   5                  break;
  100   5                }
  101   4                switch(gMMI_ctl.mmiInfo[linkIndex].linkPara.isEncrypted)
  102   4                {
  103   5                  case ENCRYPTED_OK:
  104   5                    //Mantis 9926 change role switch timing into profile active
  105   5                    #if 0
                             if(MMI_ALWAYS_ROLE_SWITCH_TO_MASTER_FEAT)
                             {
                               if(MMI_MasterRoleAvailable(linkIndex) && MMI_IsRoleOfSlave(linkIndex))
                               {
                                 msgPtr->eventCode = PROTOCOL_EVT_TO_MMI_ROLE_SWITCH_TO_MASTER_ONGOING;
                                 OSMQ_PutFront(OSMQ_Protocol_Event_To_MMI_ptr[linkIndex], (U8 XDATA_PTR)msgPtr);
                                 MMI_HCI_SendSwitchRole(linkIndex, ROLE_MASTER);
                                 SYS_SetTimer(&gMMI_ctl.mmiTimerInfo.connTimer[linkIndex].roleSwitchTimer, 3*ONE_SEC);
C251 COMPILER V5.57.0,  MMI_Protocol                                                       08/11/20  06:33:22  PAGE 3   

                                 continue;               
                               }
                             }
                             #endif
  118   5                    goto ACCEPT_CONNECTION;             
  119   5                    break;
  120   5                    
  121   5                  case ENCRYPTED_ERROR:
  122   5                    UpperLayer_SendAuthenticationResult((L2CAP_CHANNEL_HDL)msgPtr->msgBodyPtr.protocolAuthReqEvt.l2cap
             -ChannelHdl, L2CAP_STATUS_LOCAL_AUTH_FAIL);
  123   5                    break;
  124   5                  case ENCRYPTED_NONE:
  125   5                    switch (gMMI_ctl.mmiInfo[linkIndex].linkPara.isAuthenticated)
  126   5                    {
  127   6                      case AUTH_OK:
  128   6                        MMI_HCI_SendSetConnectionEncryption(linkIndex);
  129   6                        break;
  130   6                      case AUTH_ERROR:
  131   6                        UpperLayer_SendAuthenticationResult((L2CAP_CHANNEL_HDL)msgPtr->msgBodyPtr.protocolAuthReqEvt.l2c
             -apChannelHdl, L2CAP_STATUS_LOCAL_AUTH_FAIL);
  132   6                        break;
  133   6                      case AUTH_NONE:
  134   6                        MMI_HCI_SendAuthenticationRequested(linkIndex);
  135   6                        break;
  136   6                    }
  137   5                    /* fallthrough *//*comment to prevent coverity warning*/
  138   5                  default: //ENCRYPTED_ONGOING
  139   5                    OSMQ_PutFront(OSMQ_Protocol_Event_To_MMI_ptr[linkIndex], (U8 XDATA_PTR)msgPtr);
  140   5                    continue;
  141   5                }
  142   4                break;
  143   4                
  144   4              case PROTOCOL_EVT_TO_MMI_ROLE_SWITCH_TO_SLAVE_ONGOING:
  145   4                if(MMI_IsRoleOfMaster(linkIndex) && !SYS_IsTimerExpired(&gMMI_ctl.mmiTimerInfo.connTimer[linkIndex].
             -roleSwitchTimer))
  146   4                {
  147   5                  OSMQ_PutFront(OSMQ_Protocol_Event_To_MMI_ptr[linkIndex], (U8 XDATA_PTR)msgPtr);
  148   5                  continue;               
  149   5                }
  150   4                goto ACCEPT_CONNECTION;
  151   4                break;
  152   4                
  153   4              case PROTOCOL_EVT_TO_MMI_ROLE_SWITCH_TO_MASTER_ONGOING:
  154   4                if(!MMI_IsRoleOfMaster(linkIndex) && !SYS_IsTimerExpired(&gMMI_ctl.mmiTimerInfo.connTimer[linkIndex]
             -.roleSwitchTimer))
  155   4                {
  156   5                  OSMQ_PutFront(OSMQ_Protocol_Event_To_MMI_ptr[linkIndex], (U8 XDATA_PTR)msgPtr);
  157   5                  continue;               
  158   5                }
  159   4                ACCEPT_CONNECTION:
  160   4                SYS_ReleaseTimer(&gMMI_ctl.mmiTimerInfo.connTimer[linkIndex].roleSwitchTimer);
  161   4                UpperLayer_SendAuthenticationResult((L2CAP_CHANNEL_HDL)msgPtr->msgBodyPtr.protocolAuthReqEvt.l2capCh
             -annelHdl, L2CAP_STATUS_SUCCESS);
  162   4                if (msgPtr->msgBodyPtr.protocolAuthReqEvt.isPassive)
  163   4                {
  164   5                  MMI_SDAP_StartServiceSearchProc(linkIndex);
  165   5                }         
  166   4                break;
  167   4            }
  168   3            OSMEM_Put((U8 XDATA_PTR)msgPtr);
  169   3          }
  170   2        }
  171   1      }
  172          
  173          PUBLIC U8 MMI_GetLinkIndexByConnHandle(U16 connHandle)
  174          {
C251 COMPILER V5.57.0,  MMI_Protocol                                                       08/11/20  06:33:22  PAGE 4   

  175   1        U8 linkIndex;
  176   1        for(linkIndex = 0; linkIndex < MAX_MULTI_POINT_NO; linkIndex++)
  177   1        {
  178   2          if(gMMI_ctl.mmiInfo[linkIndex].linkPara.aclConnHandle == connHandle||
  179   2            (connHandle == gMMI_ctl.mmiInfo[linkIndex].linkPara.scoConnHandle && SCO_EXISTS(linkIndex)))
  180   2          {
  181   3            break;
  182   3          }
  183   2        }
  184   1        return linkIndex;
  185   1      }
  186          
  187          PUBLIC U8 MMI_GetLinkIndexByBdA(U8 XDATA_PTR bdAddr)
  188          {
  189   1        U8 linkIndex;
  190   1      
  191   1        for(linkIndex = 0; linkIndex < MAX_MULTI_POINT_NO; linkIndex++)
  192   1        {
  193   2          if(SYS_IsBDAddrIsTheSame(bdAddr, (U8 XDATA_PTR)(&gMMI_ctl.mmiInfo[linkIndex].bdAddr[0])))
  194   2          {
  195   3            break;
  196   3          }
  197   2        }
  198   1        return linkIndex;
  199   1      }
  200          
  201          
  202          PUBLIC U8 MMI_GetEmptyLinkIndex(U8 XDATA_PTR bdAddrPtr, BOOL isActive)
  203          {
  204   1        U8 linkIndex, activeCount;
  205   1        
  206   1        for(linkIndex = 0; linkIndex < MAX_MULTI_POINT_NO; linkIndex++)
  207   1        {
  208   2          if(SYS_IsBDAddrIsTheSame(bdAddrPtr, (U8 XDATA_PTR)(&gMMI_ctl.mmiInfo[linkIndex].bdAddr[0])))
  209   2          {
  210   3            if(!isActive && MMI_CONN_STATE_WAITING_ACTIVE == MMI_GetConnectionState(linkIndex))
  211   3              return linkIndex;
  212   3            else
  213   3              return MMI_GET_EMPTY_LINK_SAME_BD_ADDR;
  214   3          }
  215   2        }
  216   1        
  217   1        activeCount = 0;
  218   1        for(linkIndex = 0; linkIndex < MAX_MULTI_POINT_NO; linkIndex++)
  219   1        {
  220   2          if(MMI_CONN_STATE_NONE != MMI_GetConnectionState(linkIndex))
  221   2          {
  222   3            activeCount++;
  223   3          }
  224   2        }
  225   1        
  226   1        if(activeCount < gMMI_ctl.currentSupportDeviceNo)
  227   1        {
  228   2          for(linkIndex = 0; linkIndex < MAX_MULTI_POINT_NO; linkIndex++)
  229   2          {
  230   3            if(MMI_CONN_STATE_NONE == MMI_GetConnectionState(linkIndex))
  231   3              return linkIndex;
  232   3          }
  233   2        }
  234   1        
  235   1        return MAX_MULTI_POINT_NO;
  236   1      }
  237          
  238          PUBLIC BOOL MMI_CheckProfileOnAllLinks(void)
  239          {
  240   1        U8 linkIndex;
C251 COMPILER V5.57.0,  MMI_Protocol                                                       08/11/20  06:33:22  PAGE 5   

  241   1        for(linkIndex = 0; linkIndex < MAX_MULTI_POINT_NO; linkIndex++)
  242   1        {
  243   2          if(MMI_GetConnectedProfileCount(linkIndex, TRUE))  // not include SDP
  244   2            return TRUE;
  245   2        }
  246   1        return FALSE;
  247   1      }
  248          
  249          PUBLIC void MMI_CancelCreateAcl(void)
  250          {
  251   1        U8 linkIndex =  MMI_Reconnect_GetPagingLink();
  252   1        
  253   1        if(linkIndex != MMI_EOF)
  254   1        {
  255   2          MMI_HCI_SendCreateConnectionCancel((U8 XDATA_PTR)&gMMI_ctl.mmiInfo[linkIndex].bdAddr);
  256   2        }
  257   1      
  258   1      }
  259          
  260          
  261          PUBLIC MMI_PROFILE_INFO XDATA_PTR MMI_ConnectProfile(U8 linkIndex, U8 profileId)
  262          {
  263   1        MMI_PROFILE_DESC CODE_PTR profileDesc;
  264   1        MMI_PROFILE_INFO XDATA_PTR profileInfo;
  265   1        
  266   1        if (MMI_KEY_STATE_POWER_OFF == MMI_GetKeyState() || !MMI_IsActiveLink(linkIndex))
  267   1          return (MMI_PROFILE_INFO XDATA_PTR)NULL;
  268   1        
  269   1        if (profileDesc = MMI_GetProfileDesc(profileId))
  270   1        {
  271   2          if (profileDesc->ProfileConnectRequest)
  272   2          {
  273   3            if (profileInfo = profileDesc->ProfileConnectRequest(linkIndex, profileDesc->profileId))
  274   3            {
  275   4              MMI_LoadProfile(linkIndex, profileInfo, profileDesc);
  276   4              MMI_TIMER_ReleaseDetachTimer(linkIndex);
  277   4              return profileInfo;
  278   4            }
  279   3          }
  280   2        }
  281   1        return (MMI_PROFILE_INFO XDATA_PTR)NULL;
  282   1      }
  283          
  284          PUBLIC U8 MMI_DisconnectProfile(U8 linkIndex, MMI_PROFILE_INFO XDATA_PTR profileInfo)
  285          {
  286   1        if(!profileInfo->profileDesc)
  287   1        {
  288   2          ASSERT(FALSE);
  289   2        }
  290   1        if (profileInfo->profileDesc->ProfileDisconnectRequest)
  291   1        {
  292   2          return profileInfo->profileDesc->ProfileDisconnectRequest(linkIndex, profileInfo);
  293   2        }
  294   1        return CMD_COMPLETE;
  295   1      }
  296          
  297          PUBLIC void MMI_PROTOCOL_RelAllLinks(void)
  298          {
  299   1        MMI_UpdateReconnectLinkInfo();
  300   1        MMI_ReleaseMultiLink();
  301   1        MMI_CancelCreateAcl();
  302   1        MMI_Reconnect_ClearCtl();
  303   1      }
  304          
  305          PUBLIC void MMI_PROTOCOL_CreateProfileConnection(U8 linkIndex)
  306          {
C251 COMPILER V5.57.0,  MMI_Protocol                                                       08/11/20  06:33:22  PAGE 6   

  307   1        LinkHistoryType XDATA_PTR linkListPtr;
  308   1        #ifdef SUPPORT_1TO2AG_SOUNDBAR
                 U8 otherLinkIndex;
                 #endif
  311   1        
  312   1        MMI_LinkKey_DeleteAirLinkHistory((U8 XDATA_PTR)&gMMI_ctl.mmiInfo[linkIndex].bdAddr);
  313   1      
  314   1        #ifdef SUPPORT_1TO2AG_SOUNDBAR
                   otherLinkIndex = MMI_GetNextNormalLink(linkIndex);
                   if (otherLinkIndex != MMI_EOF 
                     && MMI_LinkKey_SearchAirLinkKeyIndex((U8 XDATA_PTR)&gMMI_ctl.mmiInfo[otherLinkIndex].bdAddr, TRUE) == 
             -MMI_EOF)
                   {
                     MMI_ReleaseProfileLinkAndDetach(otherLinkIndex);
                   }
                 #endif
  322   1        
  323   1        if(!(gMMI_ctl.mmiInfo[linkIndex].linkPara.miscMask & MMI_ACTIVE_CONNECT))
  324   1        {
  325   2          return;
  326   2        }
  327   1          
  328   1        linkListPtr = MMI_LinkKey_SearchHistoryByBdAddr((U8 XDATA_PTR)&gMMI_ctl.mmiInfo[linkIndex].bdAddr[0], TR
             -UE, FALSE);
  329   1      
  330   1        if(linkListPtr != (LinkHistoryType XDATA_PTR)NULL && linkListPtr->miscMask)
  331   1        {
  332   2            #ifdef HID_Profile
                     if(linkListPtr->miscMask & NVRAM_LINK_KEY_MISC_MASK_HID)
                   {
                     MMI_CONNECT_ACTIVE_PROFILE(linkIndex, PROFILE_HID);
                     }
                     #endif
  338   2          if(linkListPtr->miscMask & NVRAM_LINK_KEY_MISC_MASK_HSP)
  339   2          {
  340   3            if(MMI_FORCE_USE_OF_HSP_CONNECTION_FEAT || !(linkListPtr->miscMask & NVRAM_LINK_KEY_MISC_MASK_HFP))
  341   3              MMI_CONNECT_ACTIVE_PROFILE(linkIndex, PROFILE_HEADSET);
  342   3            else
  343   3              MMI_CONNECT_ACTIVE_PROFILE(linkIndex, PROFILE_HANDSFREE);
  344   3            goto MUSIC_CREATE_CONN;
  345   3          }
  346   2          else if(linkListPtr->miscMask & NVRAM_LINK_KEY_MISC_MASK_HFP)
  347   2          {
  348   3            MMI_CONNECT_ACTIVE_PROFILE(linkIndex, PROFILE_HANDSFREE);
  349   3            goto MUSIC_CREATE_CONN;
  350   3          }
  351   2        }
  352   1        if(MMI_SDAP_GetRemoteServiceChannel(linkIndex, PROFILE_HANDSFREE) != 0)
  353   1        {
  354   2          MMI_CONNECT_ACTIVE_PROFILE(linkIndex, PROFILE_HANDSFREE);
  355   2        }
  356   1        else if(MMI_SDAP_GetRemoteServiceChannel(linkIndex, PROFILE_HEADSET) != 0)
  357   1        {
  358   2          MMI_CONNECT_ACTIVE_PROFILE(linkIndex, PROFILE_HEADSET);
  359   2        }
  360   1        MUSIC_CREATE_CONN:
  361   1        MMI_CONNECT_ACTIVE_PROFILE(linkIndex, PROFILE_A2DP);
  362   1        MMI_CONNECT_ACTIVE_PROFILE(linkIndex, PROFILE_AVRCP);
  363   1      }
  364          
  365          PUBLIC BOOL MMI_CreateActiveProfileConnection(U8 linkIndex)
  366          {
  367   1        #ifdef AIR_MODULE
  368   1        BOOL bResult = TRUE;
  369   1        #else
                 #define bResult TRUE
C251 COMPILER V5.57.0,  MMI_Protocol                                                       08/11/20  06:33:22  PAGE 7   

                 #endif
  372   1        
  373   1        #ifdef __SEQUENTIAL_ACTIVE_PROFILE__
  374   1        ConnectProfileSeqCtl XDATA_PTR seqCtl;
  375   1        if ((seqCtl = (ConnectProfileSeqCtl XDATA_PTR)OSMEM_Get(OSMEM_ptr1)) == NULL)
  376   1          return FALSE;
  377   1      
  378   1        MMI_ClearSequentialActiveProfileList(linkIndex);
  379   1        
  380   1        seqCtl->count = 0;
  381   1        seqCtl->index = 0;
  382   1        gMMI_ctl.mmiInfo[linkIndex].seqCtl = seqCtl;
  383   1        #endif
  384   1        
  385   1        switch(gMMI_ctl.sdapCtl[linkIndex].remoteApplicationID)
  386   1        {
  387   2        #ifdef AIR_MODULE
  388   2          #ifdef TWS_SETTINGS
  389   2          case PRODUCT_AIR_TWS:
  390   2            LightDbgPrint("USR - It is TWS!!!");
  391   2            MMI_AIR_CreateConnectionToShare(linkIndex);
  392   2            MMI_HCI_SendWriteLinkSuperVisionTimeout(linkIndex,TWS_SUPERVISION_TIMEOUT);
  393   2            break;
  394   2          #endif
  395   2          #if defined SCO_WOOFER || defined SOUND_BAR
                   case PRODUCT_AIR_SOUNDBAR:
                     LightDbgPrint("USR - It is Soundbar!!!");
                     MMI_AIR_CreateConnectionToSoundbar(linkIndex);
                     break;
                   case PRODUCT_AIR_SCO_WOOFER:
                   case PRODUCT_AIR_A2DP_WOOFER:
                     LightDbgPrint("USR - It is SCO Woofer!!!");
                     if(MMI_AIR_CreateConnectionToWoofer(linkIndex))
                     {
                       bResult = FALSE;
                     }
                     break;
                   #endif
  409   2        #endif
  410   2          case PRODUCT_AIR_NONE:
  411   2          default:
  412   2            LightDbgPrint("USR - It is Normal Phone!!!");
  413   2            #ifdef AIR_MODULE
  414   2            if(MMI_AIR_SDAPDisconnectedNotify(linkIndex))
  415   2            {
  416   3              bResult = FALSE;
  417   3              break;
  418   3            }
  419   2            #endif
  420   2            
  421   2            MMI_PROTOCOL_CreateProfileConnection(linkIndex);
  422   2            MMI_A2DP_SendCmd(linkIndex, A2DP_AIR_ROLE_NONE);
  423   2      
  424   2            #ifdef SOUND_BAR
                     if(MMI_GetProfileDesc(PROFILE_A2DP))
                     {
                       if(!MMI_IsProfileIdLoaded(linkIndex, PROFILE_A2DP) && !MMI_IsProfileConnected(linkIndex, PROFILE_A2DP
             -))
                         MMI_SetReconnectProfile(linkIndex, PROFILE_A2DP, 2 * ONE_SEC);
                     }
                     #endif
  431   2      
  432   2            if(MMI_GetProfileDesc(PROFILE_AVRCP))
  433   2            {
  434   3              if(!MMI_IsProfileIdLoaded(linkIndex, PROFILE_AVRCP) && MMI_IsProfileConnected(linkIndex, PROFILE_A2DP
             -))
C251 COMPILER V5.57.0,  MMI_Protocol                                                       08/11/20  06:33:22  PAGE 8   

  435   3                MMI_SetReconnectProfile(linkIndex, PROFILE_AVRCP, 2 * ONE_SEC);
  436   3            }
  437   2      
  438   2            if(MMI_GetProfileDesc(PROFILE_HANDSFREE))
  439   2            {
  440   3              if(!MMI_IsProfileIdLoaded(linkIndex, PROFILE_HANDSFREE) && !MMI_IsProfileConnected(linkIndex, PROFILE
             -_HANDSFREE))
  441   3                MMI_SetReconnectProfile(linkIndex, PROFILE_HANDSFREE, 2 * ONE_SEC);
  442   3            }
  443   2            break;  
  444   2        }
  445   1      
  446   1        #ifdef __SEQUENTIAL_ACTIVE_PROFILE__
  447   1        if (seqCtl->count == 0)
  448   1        {
  449   2          MMI_ClearSequentialActiveProfileList(linkIndex);
  450   2        }
  451   1        else
  452   1        {
  453   2          MMI_SequentialActiveProfileConnection(linkIndex);
  454   2        }
  455   1        #endif
  456   1        return bResult;
  457   1      }
  458          
  459          PUBLIC void MMI_PrepareActiveProfileConnection(U8 linkIndex)
  460          {
  461   1        //New Feature - "MMI_FORCE_USE_OF_HSP_CONNECTION_FEAT"
  462   1        //If the feature is enabled,it keeps the profile of a previously connected AG.
  463   1        //So, if an AG connects as HSP, when it's asked to reconnect later, the headset
  464   1        //will attempt to start reconnection and use HSP profile.
  465   1        MMI_SDAP_StartServiceSearchProc(linkIndex);
  466   1      
  467   1        gMMI_ctl.mmiInfo[linkIndex].linkPara.miscMask |= MMI_ACTIVE_CONNECT;
  468   1        
  469   1        #ifdef HFP_Profile
  470   1        MMI_HFP_SetReconnectReason(linkIndex, gMMI_ctl.reconnectCtl.type);
  471   1        #endif
  472   1      }
  473          
  474          #ifdef __SEQUENTIAL_ACTIVE_PROFILE__
  475          PUBLIC void MMI_AppendActiveProfileConnection(U8 linkIndex, U8 profileId)
  476          {
  477   1        ConnectProfileSeqCtl XDATA_PTR seqCtl;
  478   1        if (seqCtl = gMMI_ctl.mmiInfo[linkIndex].seqCtl)
  479   1        {
  480   2          seqCtl->profileId[seqCtl->count++] = profileId;
  481   2        }
  482   1      }
  483          
  484          PUBLIC void MMI_ClearSequentialActiveProfileList(U8 linkIndex)
  485          {
  486   1        SYS_MemoryRelease(&gMMI_ctl.mmiInfo[linkIndex].seqCtl);
  487   1      }
  488          
  489          PUBLIC void MMI_SequentialActiveProfileConnection(U8 linkIndex)
  490          {
  491   1        ConnectProfileSeqCtl XDATA_PTR seqCtl;
  492   1        if (seqCtl = gMMI_ctl.mmiInfo[linkIndex].seqCtl)
  493   1        {
  494   2          while (seqCtl->index < seqCtl->count)
  495   2          {
  496   3            if (MMI_ConnectProfile(linkIndex, seqCtl->profileId[seqCtl->index++]) != NULL)
  497   3              break;
  498   3          }
  499   2          
C251 COMPILER V5.57.0,  MMI_Protocol                                                       08/11/20  06:33:22  PAGE 9   

  500   2          if (seqCtl->index == seqCtl->count)
  501   2          {
  502   3            MMI_ClearSequentialActiveProfileList(linkIndex);
  503   3          }
  504   2        }
  505   1      }
  506          #endif
  507          
  508          PUBLIC void MMI_ConnectableStateChangeWhenConnected(void)
  509          {
  510   1        if (CURRENT_ACTIVE_LINK_CNT == gMMI_ctl.currentSupportDeviceNo)
  511   1        {
  512   2          MMI_ConnectabilityHandle(CMD_SET_NON_CONNECTABLE_ANYWAY);
  513   2          MMI_DiscoverabilityHandle(CMD_SET_NON_DISCOVERABLE_ANYWAY);
  514   2        }
  515   1        else if (CURRENT_ACTIVE_LINK_CNT > gMMI_ctl.currentSupportDeviceNo)
  516   1        {
  517   2          ASSERT(FALSE);
  518   2        }
  519   1        else
  520   1        {
  521   2          MMI_ConnectabilityHandle(CMD_SET_CONNECTABLE);
  522   2        }
  523   1      }
  524          
  525          PUBLIC void MMI_PageHandler(BOOL isStart)
  526          {
  527   1        if (MMI_SUPPORT_RECONN_CLOSE_SCAN_FEAT)
  528   1        {
  529   2          if(isStart)
  530   2          {
  531   3            if(CURRENT_ACTIVE_LINK_CNT ==0)
  532   3            {
  533   4              MMI_ConnectabilityHandle(CMD_SET_NON_CONNECTABLE_ANYWAY);
  534   4              MMI_DiscoverabilityHandle(CMD_SET_NON_DISCOVERABLE_ANYWAY);
  535   4            }
  536   3          }
  537   2          else
  538   2          {
  539   3            MMI_DiscoverabilityHandle(CMD_SET_RESUME_DISCOVERABLE);
  540   3            MMI_ConnectabilityHandle(CMD_SET_RESUME_CONNECTABLE);
  541   3          }
  542   2        }
  543   1        
  544   1        gMMI_ctl.page_ongoing = (isStart)?TRUE:FALSE;
  545   1      }
  546          
  547          PUBLIC void MMI_PageFailHandler(U8 linkIndex)
  548          {
  549   1        #ifdef AIR_MODULE
  550   1        if(linkIndex!= MMI_EOF)
  551   1          MMI_AIR_PageFailHandler(linkIndex);
  552   1        #endif
  553   1      
  554   1        MMI_PageHandler(FALSE);
  555   1        
  556   1        if(linkIndex!= MMI_EOF)
  557   1        {
  558   2          MMI_PushMediaEvent(MEDIA_EVT_RECONNECT_FAILED);
  559   2          MMI_ClearMMILinkSettingType(linkIndex);     
  560   2        }
  561   1        MMI_Reconnect_DeleteInvalidList();
  562   1        MMI_Reconnect_SetDelayTimer(HALF_SEC);
  563   1      }
  564          
  565          PUBLIC void MMI_PageOKHandler(U8 linkIndex)
C251 COMPILER V5.57.0,  MMI_Protocol                                                       08/11/20  06:33:22  PAGE 10  

  566          {
  567   1        MMI_PageHandler(FALSE);
  568   1        MMI_PrepareActiveProfileConnection(linkIndex);
  569   1        
  570   1        #if 0 //mantis 9183: delay the reconnect success condition until profile connection success
                 MMI_Reconnect_DeleteInvalidList();
                 MMI_Reconnect_SetDelayTimer((U32)gMMI_nvram.timerCtl.ReConnectDelayTimer* ONE_SEC);
                 #endif
  574   1      }
  575          
  576          PUBLIC BOOL MMI_IsUnderPage(void)
  577          {
  578   1        return gMMI_ctl.page_ongoing;
  579   1      }
  580          
  581          PUBLIC BOOL MMI_IsLinkActiveConnected(U8 linkIndex)
  582          {
  583   1        if(MMI_CONN_STATE_WAITING_ACTIVE == MMI_GetConnectionState(linkIndex) || gMMI_ctl.mmiInfo[linkIndex].lin
             -kPara.miscMask & MMI_ACTIVE_CONNECT)
  584   1          return TRUE;
  585   1      
  586   1        return FALSE;
  587   1      }
  588          
  589          PUBLIC BOOL MMI_CheckAllLinksInA2DPState(void)
  590          {
  591   1      #ifdef A2DP_Profile
  592   1        U8 linkIndex;
  593   1        for(linkIndex = 0; linkIndex < MAX_MULTI_POINT_NO; linkIndex++)
  594   1        {
  595   2          if(MUSIC_EXISTS(linkIndex))
  596   2            return TRUE;
  597   2        }
  598   1      #endif
  599   1        return FALSE;
  600   1      }
  601          
  602          PUBLIC MMIMsgType XDATA_PTR MMI_PROTOCOL_CommandFactory(U8 opcode)
  603          {
  604   1        MMIMsgType XDATA_PTR msgPtr = (MMIMsgType XDATA_PTR)OSMEM_Get(OSMEM_ptr1);
  605   1        
  606   1        if(msgPtr == (MMIMsgType XDATA_PTR)NULL)
  607   1        {
  608   2          ASSERT(FALSE);
  609   2        }
  610   1      
  611   1        msgPtr->dataOffset = CMD_OFFSET;
  612   1        msgPtr->msgOpcode = opcode;
  613   1      
  614   1        return msgPtr;
  615   1      }
  616          
  617          PUBLIC BOOL Protocol_SendAuthenticationReqToMMI(L2CAP_CHANNEL_HDL l2capChannelHdl, U16 psm, U8 isPassive)
  618          {
  619   1        U8 linkIndex = L2CAP_GetChannelLinkIndex(l2capChannelHdl);
  620   1        MMIMsgType XDATA_PTR ptr1;
  621   1        
  622   1        if(MMI_ALWAYS_ROLE_SWITCH_TO_MASTER_FEAT)
  623   1        {
  624   2          if(!MMI_IsRoleOfMaster(linkIndex))
  625   2          {
  626   3            goto SEND_AUTH_REQ;             
  627   3          }
  628   2        }
  629   1        
  630   1        if(gMMI_ctl.mmiInfo[linkIndex].linkPara.isAuthenticated == AUTH_OK && gMMI_ctl.mmiInfo[linkIndex].linkPa
C251 COMPILER V5.57.0,  MMI_Protocol                                                       08/11/20  06:33:22  PAGE 11  

             -ra.isEncrypted == ENCRYPTED_OK)
  631   1        {
  632   2          if(isPassive)
  633   2          {
  634   3            if(psm != PSM_SDP)
  635   3              gMMI_ctl.mmiInfo[linkIndex].linkPara.miscMask &= ~MMI_ACTIVE_CONNECT;
  636   3            MMI_SDAP_StartServiceSearchProc(linkIndex);
  637   3          }
  638   2          return TRUE;
  639   2        }
  640   1        
  641   1        SEND_AUTH_REQ:
  642   1        ptr1 = (MMIMsgType XDATA_PTR)OSMEM_Get(OSMEM_ptr1);
  643   1        if(ptr1)
  644   1        {
  645   2          ptr1->dataOffset  = EVT_OFFSET;
  646   2          ptr1->eventCode   = PROTOCOL_EVT_TO_MMI_AUTHENTICATION_REQ;
  647   2          ptr1->msgBodyPtr.protocolAuthReqEvt.l2capChannelHdl = l2capChannelHdl;
  648   2          ptr1->msgBodyPtr.protocolAuthReqEvt.psm = psm;
  649   2          ptr1->msgBodyPtr.protocolAuthReqEvt.isPassive = isPassive;
  650   2      
  651   2          OSMQ_Put(OSMQ_Protocol_Event_To_MMI_ptr[linkIndex], (U8 XDATA_PTR)ptr1);
  652   2        }
  653   1        return FALSE;
  654   1      }
  655          
  656          PUBLIC void Protocol_CancelAuthenticationReqToMMI(L2CAP_CHANNEL_HDL l2capChannelHdl)
  657          {
  658   1        MMIMsgType XDATA_PTR ptr1;
  659   1        U8 linkIndex = L2CAP_GetChannelLinkIndex(l2capChannelHdl);
  660   1        U8 i = OSMQ_Entries(OSMQ_Protocol_Event_To_MMI_ptr[linkIndex]);
  661   1        
  662   1        while(i--)
  663   1        {
  664   2          ptr1 = (MMIMsgType XDATA_PTR)OSMQ_Get(OSMQ_Protocol_Event_To_MMI_ptr[linkIndex]);
  665   2          if(ptr1->msgBodyPtr.protocolAuthReqEvt.l2capChannelHdl == l2capChannelHdl)
  666   2            OSMEM_Put((U8 XDATA_PTR)ptr1);
  667   2          else
  668   2            OSMQ_Put(OSMQ_Protocol_Event_To_MMI_ptr[linkIndex], (U8 XDATA_PTR)ptr1);
  669   2        }
  670   1      }
  671          
  672          PUBLIC BOOL MMI_IsRoleOfMaster(U8 linkIndex)
  673          {
  674   1        return (gMMI_ctl.mmiInfo[linkIndex].linkPara.role == ROLE_MASTER)?TRUE:FALSE;
  675   1      }
  676          
  677          PUBLIC BOOL MMI_IsRoleOfSlave(U8 linkIndex)
  678          {
  679   1        return (gMMI_ctl.mmiInfo[linkIndex].linkPara.role == ROLE_SLAVE)?TRUE:FALSE;
  680   1      }
  681          
  682          PUBLIC BOOL MMI_MasterRoleAvailable(U8 linkIndex)
  683          {
  684   1        U8 i;
  685   1        U8 MasterCount = 2;
  686   1      
  687   1        //reserve one master for woofer
  688   1        #ifdef AIR_MODULE
  689   1        if(GET_PRODUCT_AIR_TYPE(MMI_PNP_PRODUCT_VER) == PRODUCT_AIR_SOUNDBAR && MMI_AIR_GetAirLink(PRODUCT_AIR_S
             -CO_WOOFER) == MMI_EOF)
  690   1        {
  691   2          MasterCount = 1;
  692   2        }
  693   1        #endif
  694   1        
C251 COMPILER V5.57.0,  MMI_Protocol                                                       08/11/20  06:33:22  PAGE 12  

  695   1        if(gMMI_ctl.mmiInfo[linkIndex].linkPara.roleSwitchCnt >= gMMI_nvram.roleSwitchCnt)
  696   1          return FALSE;
  697   1        
  698   1        //if there is available link for master, return true (hardware 2M2L limit)
  699   1        for(i = 0; i < MAX_MULTI_POINT_NO; i++)
  700   1        {
  701   2          if(MMI_IsRoleOfMaster(i))
  702   2          {
  703   3            if(--MasterCount == 0)
  704   3            {
  705   4              return FALSE;
  706   4            }
  707   3          }
  708   2        }
  709   1        
  710   1        #ifdef A2DP_Profile
  711   1        if(MMI_A2DP_IsInStreaming(linkIndex) && gMMI_ctl.mmiInfo[linkIndex].linkPara.roleSwitchCnt)
  712   1          return FALSE;
  713   1        #endif
  714   1          
  715   1        return TRUE;
  716   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =      2268     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        20     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        47     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
